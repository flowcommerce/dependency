/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.7.60
 * apibuilder 0.14.75 app.apibuilder.io/flow/common/0.7.60/play_2_6_client
 */
package io.flow.common.v0.models {

  sealed trait DiscountOffer extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type DiscountOffer
   */
  sealed trait DiscountOfferDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object DiscountOfferDiscriminator {

    case object DiscountOfferFixed extends DiscountOfferDiscriminator { override def toString = "discount_offer_fixed" }
    case object DiscountOfferPercent extends DiscountOfferDiscriminator { override def toString = "discount_offer_percent" }

    final case class UNDEFINED(override val toString: String) extends DiscountOfferDiscriminator

    val all: scala.List[DiscountOfferDiscriminator] = scala.List(DiscountOfferFixed, DiscountOfferPercent)

    private[this] val byName: Map[String, DiscountOfferDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): DiscountOfferDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[DiscountOfferDiscriminator] = byName.get(value.toLowerCase)

  }

  sealed trait ExpandableOrganization extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type ExpandableOrganization
   */
  sealed trait ExpandableOrganizationDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object ExpandableOrganizationDiscriminator {

    case object Organization extends ExpandableOrganizationDiscriminator { override def toString = "organization" }
    case object OrganizationReference extends ExpandableOrganizationDiscriminator { override def toString = "organization_reference" }

    final case class UNDEFINED(override val toString: String) extends ExpandableOrganizationDiscriminator

    val all: scala.List[ExpandableOrganizationDiscriminator] = scala.List(Organization, OrganizationReference)

    private[this] val byName: Map[String, ExpandableOrganizationDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ExpandableOrganizationDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ExpandableOrganizationDiscriminator] = byName.get(value.toLowerCase)

  }

  sealed trait ExpandableUser extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type ExpandableUser
   */
  sealed trait ExpandableUserDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object ExpandableUserDiscriminator {

    case object User extends ExpandableUserDiscriminator { override def toString = "user" }
    case object UserReference extends ExpandableUserDiscriminator { override def toString = "user_reference" }

    final case class UNDEFINED(override val toString: String) extends ExpandableUserDiscriminator

    val all: scala.List[ExpandableUserDiscriminator] = scala.List(User, UserReference)

    private[this] val byName: Map[String, ExpandableUserDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ExpandableUserDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ExpandableUserDiscriminator] = byName.get(value.toLowerCase)

  }

  sealed trait InputSpecificationLimitation extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type InputSpecificationLimitation
   */
  sealed trait InputSpecificationLimitationDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object InputSpecificationLimitationDiscriminator {

    case object InputSpecificationLimitationMax extends InputSpecificationLimitationDiscriminator { override def toString = "input_specification_limitation_max" }

    final case class UNDEFINED(override val toString: String) extends InputSpecificationLimitationDiscriminator

    val all: scala.List[InputSpecificationLimitationDiscriminator] = scala.List(InputSpecificationLimitationMax)

    private[this] val byName: Map[String, InputSpecificationLimitationDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): InputSpecificationLimitationDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[InputSpecificationLimitationDiscriminator] = byName.get(value.toLowerCase)

  }

  sealed trait PriceSource extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type PriceSource
   */
  sealed trait PriceSourceDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object PriceSourceDiscriminator {

    case object PriceSourcePriceBook extends PriceSourceDiscriminator { override def toString = "price_book" }
    case object PriceSourceCatalog extends PriceSourceDiscriminator { override def toString = "catalog" }
    case object PriceSourceProvided extends PriceSourceDiscriminator { override def toString = "provided" }

    final case class UNDEFINED(override val toString: String) extends PriceSourceDiscriminator

    val all: scala.List[PriceSourceDiscriminator] = scala.List(PriceSourcePriceBook, PriceSourceCatalog, PriceSourceProvided)

    private[this] val byName: Map[String, PriceSourceDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): PriceSourceDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[PriceSourceDiscriminator] = byName.get(value.toLowerCase)

  }

  /**
   * Defines structured fields for address to be used in user/form input. Either text
   * or the structured input needs to be present.
   * 
   * @param text Full text version of address
   * @param streets Array for street line 1, street line 2, etc., in order
   * @param streetNumber The specific street number, if available.
   * @param country The ISO 3166-3 country code. Case insensitive. See
   *        https://api.flow.io/reference/countries
   */
  final case class Address(
    text: _root_.scala.Option[String] = None,
    streets: _root_.scala.Option[Seq[String]] = None,
    streetNumber: _root_.scala.Option[String] = None,
    city: _root_.scala.Option[String] = None,
    province: _root_.scala.Option[String] = None,
    postal: _root_.scala.Option[String] = None,
    country: _root_.scala.Option[String] = None,
    latitude: _root_.scala.Option[String] = None,
    longitude: _root_.scala.Option[String] = None
  )

  /**
   * @param name The name of the customer associated with the billing address
   * @param streets Array for street line 1, street line 2, etc., in order
   * @param country The ISO 3166-3 country code. Case insensitive. See
   *        https://api.flow.io/reference/countries
   * @param company Business entity or organization name of this contact
   */
  final case class BillingAddress(
    name: _root_.scala.Option[io.flow.common.v0.models.Name] = None,
    streets: _root_.scala.Option[Seq[String]] = None,
    city: _root_.scala.Option[String] = None,
    province: _root_.scala.Option[String] = None,
    postal: _root_.scala.Option[String] = None,
    country: _root_.scala.Option[String] = None,
    company: _root_.scala.Option[String] = None
  )

  final case class CatalogItemReference(
    id: String,
    number: String
  )

  final case class CatalogItemSummary(
    number: String,
    name: String,
    attributes: Map[String, String]
  )

  /**
   * Defines structured fields for a contact person. Typically used for specifying
   * contact person for an account, shipment, or organization representative
   * 
   * @param name Personal information of point-of-contact
   * @param company Business entity or organization name of this contact
   */
  final case class Contact(
    name: io.flow.common.v0.models.Name,
    company: _root_.scala.Option[String] = None,
    email: _root_.scala.Option[String] = None,
    phone: _root_.scala.Option[String] = None
  )

  /**
   * @param address The address to be used for invoicing and harmonization.
   */
  final case class CustomerInvoice(
    address: _root_.scala.Option[io.flow.common.v0.models.BillingAddress] = None
  )

  final case class DatetimeRange(
    from: _root_.org.joda.time.DateTime,
    to: _root_.org.joda.time.DateTime
  )

  final case class Dimension(
    depth: _root_.scala.Option[io.flow.common.v0.models.Measurement] = None,
    diameter: _root_.scala.Option[io.flow.common.v0.models.Measurement] = None,
    length: _root_.scala.Option[io.flow.common.v0.models.Measurement] = None,
    weight: _root_.scala.Option[io.flow.common.v0.models.Measurement] = None,
    width: _root_.scala.Option[io.flow.common.v0.models.Measurement] = None
  )

  final case class Dimensions(
    product: _root_.scala.Option[io.flow.common.v0.models.Dimension] = None,
    packaging: _root_.scala.Option[io.flow.common.v0.models.Dimension] = None
  )

  /**
   * @param target Indicates the target of the discount.
   * @param label Label to display (e.g. the discount code). Discounts with the same label
   *        represent aggregated offers.
   */
  final case class DiscountForm(
    offer: io.flow.common.v0.models.DiscountOffer,
    target: io.flow.common.v0.models.DiscountTarget = io.flow.common.v0.models.DiscountTarget.Item,
    label: _root_.scala.Option[String] = None
  )

  final case class DiscountOfferFixed(
    money: io.flow.common.v0.models.Money
  ) extends DiscountOffer

  final case class DiscountOfferPercent(
    percent: BigDecimal
  ) extends DiscountOffer

  final case class DiscountsForm(
    discounts: Seq[io.flow.common.v0.models.DiscountForm]
  )

  /**
   * Represents a duration of time.
   */
  final case class Duration(
    unit: io.flow.common.v0.models.UnitOfTime,
    value: Long
  )

  /**
   * Represents an exception to the schedule of a center.
   * 
   * @param datetimeRange Range for the holiday. For single-day holidays, from and to should just be the
   *        same.
   */
  final case class Exception(
    `type`: io.flow.common.v0.models.ExceptionType,
    datetimeRange: io.flow.common.v0.models.DatetimeRange
  )

  /**
   * Some important fields related to experiences used in various APIs
   * 
   * @param country ISO 3166 3 currency code as defined in https://api.flow.io/reference/countries
   * @param currency The ISO 4217-3 code for the currency. Case insensitive. See
   *        https://api.flow.io/reference/currencies
   * @param language ISO 639 2 language code as defined in https://api.flow.io/reference/languages
   */
  final case class ExperienceSummary(
    id: String,
    key: String,
    name: String,
    country: _root_.scala.Option[String] = None,
    currency: _root_.scala.Option[String] = None,
    language: _root_.scala.Option[String] = None
  )

  /**
   * @param label The label for the included levies that can be displayed as a tooltip on the
   *        product detail page.
   */
  final case class IncludedLevies(
    key: io.flow.common.v0.models.IncludedLevyKey,
    label: String
  )

  final case class InputForm(
    values: _root_.scala.Option[Map[String, String]] = None
  )

  final case class InputFormSpecification(
    inputs: _root_.scala.Option[Seq[io.flow.common.v0.models.InputSpecification]] = None,
    limitations: _root_.scala.Option[io.flow.common.v0.models.InputSpecificationLimitations] = None
  )

  /**
   * @param displayText Text to display for this input.
   */
  final case class InputSpecification(
    `type`: io.flow.common.v0.models.InputSpecificationType,
    name: String,
    displayText: _root_.scala.Option[String] = None
  )

  /**
   * Represents the maximum number of accepted inputs
   */
  final case class InputSpecificationLimitationMax(
    max: Long
  ) extends InputSpecificationLimitation

  final case class InputSpecificationLimitations(
    limitations: _root_.scala.Option[Seq[io.flow.common.v0.models.InputSpecificationLimitation]] = None
  )

  final case class ItemReference(
    number: String
  )

  /**
   * Line items represent the items a consumer is purchasing, including additional
   * information to complete the transaction. Note that you may pass in as many line
   * items as you like - including repeating item numbers across line items.
   * 
   * @param price The price of this item for this order. If not specified, we will use the item
   *        price from the experience. Note that this price represents the price of a single
   *        line item - the total price to the consumer will be quantity * price.
   * @param attributes A set of key/value pairs that you can attach to the order. It can be useful for
   *        storing additional information about the charge in a structured format.
   * @param center Optional center key associated with this item. Used for orders and quotes to
   *        specify where to ship an item from. If not specified, Flow will infer based on
   *        inventory setup.
   * @param discount The total discount, if any, to apply to this line item. Note that the discount
   *        is the total discount to apply regardless of the quantity here
   */
  final case class LineItem(
    number: String,
    quantity: Long,
    price: io.flow.common.v0.models.Money,
    attributes: Map[String, String],
    center: _root_.scala.Option[String] = None,
    discount: _root_.scala.Option[io.flow.common.v0.models.Money] = None
  )

  /**
   * Line items represent the items a consumer is purchasing, including additional
   * information to complete the transaction. Note that you may pass in as many line
   * items as you like - including repeating item numbers across line items.
   * 
   * @param shipmentEstimate For items that may not immediately ship out from the origin because of different
   *        models of inventory (e.g. drop-ship, sell-first), this is a way for a client to
   *        communicate when the items can ship out. This will be used to calculate delivery
   *        option windows.
   * @param price The price of this item for this order. If not specified, we will use the item
   *        price from the experience
   * @param attributes A set of key/value pairs that you can attach to the order. It can be useful for
   *        storing additional information about the charge in a structured format.
   * @param center Optional center key associated with this item. Used for orders and quotes to
   *        specify where to ship an item from. If not specified, Flow will infer based on
   *        inventory setup.
   * @param discount The total discount, if any, to apply to this line item. Note that the discount
   *        is the total discount to apply regardless of the quantity here
   * @param discounts The discounts, if any, to apply to this line item. Note that the discount is the
   *        total discount to apply regardless of the quantity here
   */
  final case class LineItemForm(
    number: String,
    quantity: Long,
    shipmentEstimate: _root_.scala.Option[io.flow.common.v0.models.DatetimeRange] = None,
    price: _root_.scala.Option[io.flow.common.v0.models.Money] = None,
    attributes: _root_.scala.Option[Map[String, String]] = None,
    center: _root_.scala.Option[String] = None,
    discount: _root_.scala.Option[io.flow.common.v0.models.Money] = None,
    discounts: _root_.scala.Option[io.flow.common.v0.models.DiscountsForm] = None
  )

  final case class Margin(
    `type`: io.flow.common.v0.models.MarginType,
    value: BigDecimal
  )

  final case class Measurement(
    value: String,
    units: io.flow.common.v0.models.UnitOfMeasurement
  )

  /**
   * The merchant of record entity provides the legal name and address of the
   * specific Flow entity serving as merchant of record.
   * 
   * @param streets Street Address Lines
   * @param country The ISO 3166-3 country code. Case insensitive. See
   *        https://api.flow.io/reference/countries
   * @param phone Primary customer service phone number for this entity
   * @param email Primary customer service email address for this entity
   */
  final case class MerchantOfRecordEntity(
    organization: io.flow.common.v0.models.OrganizationReference,
    name: String,
    vat: io.flow.common.v0.models.MerchantOfRecordEntityRegistration,
    streets: Seq[String],
    city: String,
    province: _root_.scala.Option[String] = None,
    postal: _root_.scala.Option[String] = None,
    country: String,
    phone: _root_.scala.Option[String] = None,
    email: _root_.scala.Option[String] = None
  )

  /**
   * @param number In Europe, this is the VAT registration number for the entity. In the US, this
   *        is the EIN.
   * @param country The country in which this registration number is defined. The ISO 3166-3 country
   *        code. Case insensitive. See https://api.flow.io/reference/countries
   */
  final case class MerchantOfRecordEntityRegistration(
    number: String,
    country: String
  )

  /**
   * Money represents an amount in a given currency
   * 
   * @param currency ISO 4217 3 currency code as defined in https://api.flow.io/reference/currencies
   */
  final case class Money(
    amount: Double,
    currency: String
  )

  /**
   * @param currency Iso 4217 3 currency code as defined in https://api.flow.io/reference/currencies
   */
  final case class MoneyWithBase(
    currency: String,
    amount: Double,
    base: io.flow.common.v0.models.Money
  )

  /**
   * Used to migrate older models to have a base value, without breaking
   * compatibility
   * 
   * @param currency Iso 4217 3 currency code as defined in https://api.flow.io/reference/currencies
   */
  final case class MoneyWithOptionalBase(
    currency: String,
    amount: Double,
    base: _root_.scala.Option[io.flow.common.v0.models.Money] = None
  )

  final case class Name(
    first: _root_.scala.Option[String] = None,
    last: _root_.scala.Option[String] = None
  )

  /**
   * A customer represents the actual person purchasing from you. This information is
   * needed primarily to support logistics (delivery to this person), fraud
   * management (verification of who the person is), and reporting. We also recommend
   * including your customer number whenever possible as doing so will allow Flow to
   * link up transactions for this customer making customer service easier.
   * 
   * @param phone Customer phone number. Useful for both fraud and order delivery.
   * @param email Customer email address. Useful for fraud.
   * @param invoice Customer invoice details.
   */
  final case class OrderCustomer(
    name: io.flow.common.v0.models.Name,
    number: _root_.scala.Option[String] = None,
    phone: _root_.scala.Option[String] = None,
    email: _root_.scala.Option[String] = None,
    address: _root_.scala.Option[io.flow.common.v0.models.BillingAddress] = None,
    invoice: _root_.scala.Option[io.flow.common.v0.models.CustomerInvoice] = None
  )

  /**
   * @param phone Customer phone number. Useful for both fraud and order delivery.
   * @param email Customer email address. Useful for fraud.
   * @param invoice Customer invoice details.
   */
  final case class OrderCustomerForm(
    name: _root_.scala.Option[io.flow.common.v0.models.Name] = None,
    number: _root_.scala.Option[String] = None,
    phone: _root_.scala.Option[String] = None,
    email: _root_.scala.Option[String] = None,
    address: _root_.scala.Option[io.flow.common.v0.models.BillingAddress] = None,
    invoice: _root_.scala.Option[io.flow.common.v0.models.CustomerInvoice] = None
  )

  /**
   * Represents a single organization in the system, and what environment it is
   * currently operating in.
   * 
   * @param parent When creating an organization in the test environment, it is linked to your
   *        production organization. This allows you to have as many test organizations as
   *        you like.
   * @param defaults Always present. Marked optional for backwards compatibility.
   */
  final case class Organization(
    id: String,
    name: String,
    environment: io.flow.common.v0.models.Environment,
    parent: _root_.scala.Option[io.flow.common.v0.models.OrganizationReference] = None,
    defaults: _root_.scala.Option[io.flow.common.v0.models.OrganizationDefaults] = None,
    createdAt: _root_.scala.Option[_root_.org.joda.time.DateTime] = None
  ) extends ExpandableOrganization

  /**
   * @param country The ISO 3166-3 country code. Case insensitive. See
   *        https://api.flow.io/reference/countries
   * @param baseCurrency ISO 4217 3 currency code as defined in https://api.flow.io/reference/currencies
   * @param language ISO 639 2 language code as defined in https://api.flow.io/reference/languages
   * @param locale The locale id as defined in https://api.flow.io/reference/locales
   * @param timezone The name of the timezone as defined in https://api.flow.io/reference/timezones
   */
  final case class OrganizationDefaults(
    country: String,
    baseCurrency: String,
    language: String,
    locale: String,
    timezone: String
  )

  final case class OrganizationReference(
    id: String
  ) extends ExpandableOrganization

  final case class OrganizationSummary(
    id: String,
    name: String
  )

  final case class PartnerReference(
    id: String
  )

  /**
   * Represents an amount-currency pair for a basic price
   * 
   * @param currency ISO 4217 3 currency code as defined in https://api.flow.io/reference/currencies
   */
  final case class Price(
    amount: Double,
    currency: String,
    label: String
  )

  /**
   * Amount-currency paid for a basic price to be used in model forms, before a price
   * label is created. Label in the main price model is created by the implementing
   * api.
   * 
   * @param currency ISO 4217 3 currency code as defined in https://api.flow.io/reference/currencies
   */
  final case class PriceForm(
    amount: Double,
    currency: String
  )

  /**
   * @param price Catalog item price.
   */
  final case class PriceSourceCatalog(
    price: io.flow.common.v0.models.Money
  ) extends PriceSource

  /**
   * @param price Price book item price.
   * @param includes Describes which levies are included in the price book price.
   */
  final case class PriceSourcePriceBook(
    price: io.flow.common.v0.models.Money,
    includes: io.flow.common.v0.models.IncludedLevies,
    priceBookReference: io.flow.common.v0.models.PriceSourcePriceBookReference
  ) extends PriceSource

  final case class PriceSourcePriceBookReference(
    id: String,
    key: String
  )

  /**
   * @param price Provided item price.
   */
  final case class PriceSourceProvided(
    price: io.flow.common.v0.models.Money
  ) extends PriceSource

  /**
   * @param currency Iso 4217 3 currency code as defined in https://api.flow.io/reference/currencies
   * @param label The localized label of the amount and currency
   */
  final case class PriceWithBase(
    currency: String,
    amount: Double,
    label: String,
    base: _root_.scala.Option[io.flow.common.v0.models.Price] = None
  )

  final case class Rounding(
    `type`: io.flow.common.v0.models.RoundingType,
    method: io.flow.common.v0.models.RoundingMethod,
    value: BigDecimal
  )

  /**
   * Represents operating calendar and holidays of a center
   * 
   * @param calendar Operating calendar used by origin center for shipment, if available. If not
   *        provided, assume they are never open.
   * @param holiday Standard holiday set to respect for this schedule
   * @param exception Holiday calendar used by origin center for shipment, if available.
   * @param cutoff Daily cutoff time for shipment fulfillment at origin center, if available.
   *        24-hour time
   * @param minLeadTime Optional number of days a center takes to make a shipment
   * @param maxLeadTime Optional number of days a center takes to make a shipment
   */
  final case class Schedule(
    calendar: _root_.scala.Option[io.flow.common.v0.models.Calendar] = None,
    holiday: io.flow.common.v0.models.HolidayCalendar,
    exception: Seq[io.flow.common.v0.models.Exception],
    cutoff: _root_.scala.Option[String] = None,
    minLeadTime: _root_.scala.Option[Long] = None,
    maxLeadTime: _root_.scala.Option[Long] = None
  )

  /**
   * Represents a single user in the system
   * 
   * @param email If known, the user's primary email address. While in most common cases, we
   *        expect users to have email addresses, there are edge cases where it is useful to
   *        allow a user to NOT have an email address. For example, users interacting solely
   *        from mobile devices, guest user accounts, initial onboarding where email is not
   *        known, etc. We think by starting off with an optional primary email address we
   *        can support these use cases with very little implementation cost.
   * @param name The user's name.
   * @param status Only active users are authorized to login and interact with the Flow platform.
   */
  final case class User(
    id: String,
    email: _root_.scala.Option[String] = None,
    name: io.flow.common.v0.models.Name,
    status: io.flow.common.v0.models.UserStatus = io.flow.common.v0.models.UserStatus.Active
  ) extends ExpandableUser

  final case class UserReference(
    id: String
  ) extends ExpandableUser

  /**
   * @param postals Group of postal code prefixes included in this zone
   * @param provinces Group of provinces included in this zone. Values should in ISO 3166-2 province
   *        code format.
   * @param country The ISO 3166-3 country code. Case insensitive. See
   *        https://api.flow.io/reference/countries
   */
  final case class Zone(
    postals: _root_.scala.Option[Seq[String]] = None,
    provinces: _root_.scala.Option[Seq[String]] = None,
    country: String
  )

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union DiscountOffer, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   * 
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  final case class DiscountOfferUndefinedType(
    description: String
  ) extends DiscountOffer

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union ExpandableOrganization, it will need to be handled in the client
   * code. This implementation will deserialize these future types as an instance of
   * this class.
   * 
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  final case class ExpandableOrganizationUndefinedType(
    description: String
  ) extends ExpandableOrganization

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union ExpandableUser, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   * 
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  final case class ExpandableUserUndefinedType(
    description: String
  ) extends ExpandableUser

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union InputSpecificationLimitation, it will need to be handled in the
   * client code. This implementation will deserialize these future types as an
   * instance of this class.
   * 
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  final case class InputSpecificationLimitationUndefinedType(
    description: String
  ) extends InputSpecificationLimitation

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union PriceSource, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   * 
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  final case class PriceSourceUndefinedType(
    description: String
  ) extends PriceSource

  /**
   * Used to tag attributes with a data type so they are properly validated.
   */
  sealed trait AttributeDataType extends _root_.scala.Product with _root_.scala.Serializable

  object AttributeDataType {

    /**
     * Boolean true/false data type
     */
    case object Boolean extends AttributeDataType { override def toString = "boolean" }
    /**
     * Decimal datatype without size or precision restrictions. Commonly used for
     * currency values.
     */
    case object Decimal extends AttributeDataType { override def toString = "decimal" }
    /**
     * Unvalidated string of characters.
     */
    case object String extends AttributeDataType { override def toString = "string" }
    /**
     * An example ["Cotton", "Wool"]
     */
    case object JsonArray extends AttributeDataType { override def toString = "json_array" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends AttributeDataType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[AttributeDataType] = scala.List(Boolean, Decimal, String, JsonArray)

    private[this]
    val byName: Map[String, AttributeDataType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): AttributeDataType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[AttributeDataType] = byName.get(value.toLowerCase)

  }

  sealed trait AvailabilityStatus extends _root_.scala.Product with _root_.scala.Serializable

  object AvailabilityStatus {

    case object Enabled extends AvailabilityStatus { override def toString = "enabled" }
    case object Disabled extends AvailabilityStatus { override def toString = "disabled" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends AvailabilityStatus

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[AvailabilityStatus] = scala.List(Enabled, Disabled)

    private[this]
    val byName: Map[String, AvailabilityStatus] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): AvailabilityStatus = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[AvailabilityStatus] = byName.get(value.toLowerCase)

  }

  sealed trait Calendar extends _root_.scala.Product with _root_.scala.Serializable

  object Calendar {

    /**
     * Mon - Fri
     */
    case object Weekdays extends Calendar { override def toString = "weekdays" }
    /**
     * 7 days per week
     */
    case object Everyday extends Calendar { override def toString = "everyday" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends Calendar

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Calendar] = scala.List(Weekdays, Everyday)

    private[this]
    val byName: Map[String, Calendar] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Calendar = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Calendar] = byName.get(value.toLowerCase)

  }

  sealed trait Capability extends _root_.scala.Product with _root_.scala.Serializable

  object Capability {

    case object Crossdock extends Capability { override def toString = "crossdock" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends Capability

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Capability] = scala.List(Crossdock)

    private[this]
    val byName: Map[String, Capability] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Capability = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Capability] = byName.get(value.toLowerCase)

  }

  sealed trait ChangeType extends _root_.scala.Product with _root_.scala.Serializable

  object ChangeType {

    case object Insert extends ChangeType { override def toString = "insert" }
    case object Update extends ChangeType { override def toString = "update" }
    case object Delete extends ChangeType { override def toString = "delete" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends ChangeType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[ChangeType] = scala.List(Insert, Update, Delete)

    private[this]
    val byName: Map[String, ChangeType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ChangeType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ChangeType] = byName.get(value.toLowerCase)

  }

  /**
   * A currency label formatter accepts a price label and updates it according to a
   * set of rules.
   */
  sealed trait CurrencyLabelFormatter extends _root_.scala.Product with _root_.scala.Serializable

  object CurrencyLabelFormatter {

    /**
     * If a price ends in '.00' or ',00', we remove the cents and just display the
     * price as a whole number. e.g. 'A$100.00' becomes 'A$100'
     */
    case object StripTrailingZeros extends CurrencyLabelFormatter { override def toString = "strip_trailing_zeros" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends CurrencyLabelFormatter

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[CurrencyLabelFormatter] = scala.List(StripTrailingZeros)

    private[this]
    val byName: Map[String, CurrencyLabelFormatter] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): CurrencyLabelFormatter = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[CurrencyLabelFormatter] = byName.get(value.toLowerCase)

  }

  /**
   * The currency symbol format controls which set of currency symbols we use when
   * displaying currencies
   */
  sealed trait CurrencySymbolFormat extends _root_.scala.Product with _root_.scala.Serializable

  object CurrencySymbolFormat {

    /**
     * The narrow format refers to the Unicode Common Locale Data Repository (CLDR)
     * 'narrow' symbols (e.g. '$' for CAD and AUD)
     */
    case object Narrow extends CurrencySymbolFormat { override def toString = "narrow" }
    /**
     * The primary format refers to the Unicode Common Locale Data Repository (CLDR)
     * 'primary' symbols (e.g. 'CA$' for CAD and 'A$' for AUD)
     */
    case object Primary extends CurrencySymbolFormat { override def toString = "primary" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends CurrencySymbolFormat

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[CurrencySymbolFormat] = scala.List(Narrow, Primary)

    private[this]
    val byName: Map[String, CurrencySymbolFormat] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): CurrencySymbolFormat = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[CurrencySymbolFormat] = byName.get(value.toLowerCase)

  }

  sealed trait DayOfWeek extends _root_.scala.Product with _root_.scala.Serializable

  object DayOfWeek {

    case object Sunday extends DayOfWeek { override def toString = "sunday" }
    case object Monday extends DayOfWeek { override def toString = "monday" }
    case object Tuesday extends DayOfWeek { override def toString = "tuesday" }
    case object Wednesday extends DayOfWeek { override def toString = "wednesday" }
    case object Thursday extends DayOfWeek { override def toString = "thursday" }
    case object Friday extends DayOfWeek { override def toString = "friday" }
    case object Saturday extends DayOfWeek { override def toString = "saturday" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends DayOfWeek

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[DayOfWeek] = scala.List(Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday)

    private[this]
    val byName: Map[String, DayOfWeek] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): DayOfWeek = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[DayOfWeek] = byName.get(value.toLowerCase)

  }

  sealed trait DeliveredDuty extends _root_.scala.Product with _root_.scala.Serializable

  object DeliveredDuty {

    /**
     * Delivered Duty Paid (DDP). See https://en.wikipedia.org/wiki/Incoterms for more
     * information
     */
    case object Paid extends DeliveredDuty { override def toString = "paid" }
    /**
     * Delivered Duty Unpaid (DDU). See https://en.wikipedia.org/wiki/Incoterms for
     * more information
     */
    case object Unpaid extends DeliveredDuty { override def toString = "unpaid" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends DeliveredDuty

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[DeliveredDuty] = scala.List(Paid, Unpaid)

    private[this]
    val byName: Map[String, DeliveredDuty] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): DeliveredDuty = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[DeliveredDuty] = byName.get(value.toLowerCase)

  }

  sealed trait DiscountTarget extends _root_.scala.Product with _root_.scala.Serializable

  object DiscountTarget {

    /**
     * Discount is targeted to an item.
     */
    case object Item extends DiscountTarget { override def toString = "item" }
    /**
     * Discount is targeting to shipping. Only applicable if the discount is provided
     * at the order level.
     */
    case object Shipping extends DiscountTarget { override def toString = "shipping" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends DiscountTarget

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[DiscountTarget] = scala.List(Item, Shipping)

    private[this]
    val byName: Map[String, DiscountTarget] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): DiscountTarget = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[DiscountTarget] = byName.get(value.toLowerCase)

  }

  sealed trait Environment extends _root_.scala.Product with _root_.scala.Serializable

  object Environment {

    /**
     * In sandbox, no external services (e.g. orders, payments, logistics) will
     * generate real transactions
     */
    case object Sandbox extends Environment { override def toString = "sandbox" }
    /**
     * In production, all external services are live and will generate real
     * transactions
     */
    case object Production extends Environment { override def toString = "production" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends Environment

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Environment] = scala.List(Sandbox, Production)

    private[this]
    val byName: Map[String, Environment] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Environment = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Environment] = byName.get(value.toLowerCase)

  }

  sealed trait ExceptionType extends _root_.scala.Product with _root_.scala.Serializable

  object ExceptionType {

    case object Open extends ExceptionType { override def toString = "open" }
    case object Closed extends ExceptionType { override def toString = "closed" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends ExceptionType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[ExceptionType] = scala.List(Open, Closed)

    private[this]
    val byName: Map[String, ExceptionType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ExceptionType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ExceptionType] = byName.get(value.toLowerCase)

  }

  sealed trait HolidayCalendar extends _root_.scala.Product with _root_.scala.Serializable

  object HolidayCalendar {

    case object UsBankHolidays extends HolidayCalendar { override def toString = "us_bank_holidays" }
    case object JewishHolidays extends HolidayCalendar { override def toString = "jewish_holidays" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends HolidayCalendar

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[HolidayCalendar] = scala.List(UsBankHolidays, JewishHolidays)

    private[this]
    val byName: Map[String, HolidayCalendar] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): HolidayCalendar = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[HolidayCalendar] = byName.get(value.toLowerCase)

  }

  /**
   * The key of each possible localized price note is defined here.
   */
  sealed trait IncludedLevyKey extends _root_.scala.Product with _root_.scala.Serializable

  object IncludedLevyKey {

    case object Duty extends IncludedLevyKey { override def toString = "duty" }
    case object Vat extends IncludedLevyKey { override def toString = "vat" }
    case object VatAndDuty extends IncludedLevyKey { override def toString = "vat_and_duty" }
    case object None extends IncludedLevyKey { override def toString = "none" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends IncludedLevyKey

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[IncludedLevyKey] = scala.List(Duty, Vat, VatAndDuty, None)

    private[this]
    val byName: Map[String, IncludedLevyKey] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): IncludedLevyKey = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[IncludedLevyKey] = byName.get(value.toLowerCase)

  }

  /**
   * International Commercial Terms are a series of pre-defined commercial terms
   * published by the International Chamber of Commerce (ICC) relating to
   * international commercial law.
   */
  sealed trait Incoterm extends _root_.scala.Product with _root_.scala.Serializable

  object Incoterm {

    /**
     * Ex Works (named place of delivery)
     */
    case object Exw extends Incoterm { override def toString = "EXW" }
    /**
     * Free Carrier (named place of delivery)
     */
    case object Fca extends Incoterm { override def toString = "FCA" }
    /**
     * Carriage Paid To (named place of destination)
     */
    case object Cpt extends Incoterm { override def toString = "CPT" }
    /**
     * Carriage and Insurance Paid to (named place of destination)
     */
    case object Cip extends Incoterm { override def toString = "CIP" }
    /**
     * Delivered At Terminal (named terminal at port or place of destination)
     */
    case object Dat extends Incoterm { override def toString = "DAT" }
    /**
     * Delivered At Place (named place of destination)
     */
    case object Dap extends Incoterm { override def toString = "DAP" }
    /**
     * Delivered Duty Paid (named place of destination)
     */
    case object Ddp extends Incoterm { override def toString = "DDP" }
    /**
     * Free Alongside Ship (named port of shipment)
     */
    case object Fas extends Incoterm { override def toString = "FAS" }
    /**
     * Free on Board (named port of shipment)
     */
    case object Fob extends Incoterm { override def toString = "FOB" }
    /**
     * Cost and Freight (named port of destination)
     */
    case object Cfr extends Incoterm { override def toString = "CFR" }
    /**
     * Cost, Insurance & Freight (named port of destination)
     */
    case object Cif extends Incoterm { override def toString = "CIF" }
    /**
     * Delivered at Frontier (named place of delivery)
     */
    case object Daf extends Incoterm { override def toString = "DAF" }
    /**
     * Delivered Ex Ship
     */
    case object Des extends Incoterm { override def toString = "DES" }
    /**
     * Delivered Ex Quay (named port of delivery)
     */
    case object Deq extends Incoterm { override def toString = "DEQ" }
    /**
     * Delivered Duty Unpaid (named place of destination)
     */
    case object Ddu extends Incoterm { override def toString = "DDU" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends Incoterm

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Incoterm] = scala.List(Exw, Fca, Cpt, Cip, Dat, Dap, Ddp, Fas, Fob, Cfr, Cif, Daf, Des, Deq, Ddu)

    private[this]
    val byName: Map[String, Incoterm] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Incoterm = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Incoterm] = byName.get(value.toLowerCase)

  }

  sealed trait InputSpecificationType extends _root_.scala.Product with _root_.scala.Serializable

  object InputSpecificationType {

    case object Text extends InputSpecificationType { override def toString = "text" }
    case object Number extends InputSpecificationType { override def toString = "number" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends InputSpecificationType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[InputSpecificationType] = scala.List(Text, Number)

    private[this]
    val byName: Map[String, InputSpecificationType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): InputSpecificationType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[InputSpecificationType] = byName.get(value.toLowerCase)

  }

  /**
   * Either a fixed or percent adjustment applied to some amount.
   */
  sealed trait MarginType extends _root_.scala.Product with _root_.scala.Serializable

  object MarginType {

    /**
     * A fixed amount to add, e.g 2.5 would add an absolute margin of 2.5 in the base
     * currency of your item.
     */
    case object Fixed extends MarginType { override def toString = "fixed" }
    /**
     * A percent of the base cost to add, e.g. 1.2 would represent a 1.2% increase.
     */
    case object Percent extends MarginType { override def toString = "percent" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends MarginType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[MarginType] = scala.List(Fixed, Percent)

    private[this]
    val byName: Map[String, MarginType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): MarginType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[MarginType] = byName.get(value.toLowerCase)

  }

  sealed trait MeasurementSystem extends _root_.scala.Product with _root_.scala.Serializable

  object MeasurementSystem {

    case object Imperial extends MeasurementSystem { override def toString = "imperial" }
    case object Metric extends MeasurementSystem { override def toString = "metric" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends MeasurementSystem

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[MeasurementSystem] = scala.List(Imperial, Metric)

    private[this]
    val byName: Map[String, MeasurementSystem] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): MeasurementSystem = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[MeasurementSystem] = byName.get(value.toLowerCase)

  }

  /**
   * The merchant of record enum defines who is merchant of record for a particular
   * transaction - either Flow is serving as the merchant of record or the
   * organization is serving as merchant of record.
   */
  sealed trait MerchantOfRecord extends _root_.scala.Product with _root_.scala.Serializable

  object MerchantOfRecord {

    case object Flow extends MerchantOfRecord { override def toString = "flow" }
    case object Organization extends MerchantOfRecord { override def toString = "organization" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends MerchantOfRecord

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[MerchantOfRecord] = scala.List(Flow, Organization)

    private[this]
    val byName: Map[String, MerchantOfRecord] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): MerchantOfRecord = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[MerchantOfRecord] = byName.get(value.toLowerCase)

  }

  /**
   * The order merchant of record defines who is merchant of record for a particular
   * order. The value will be 'mixed' if you support split payments and the merchant
   * of record differed across the individual payment transactions.
   */
  sealed trait OrderMerchantOfRecord extends _root_.scala.Product with _root_.scala.Serializable

  object OrderMerchantOfRecord {

    case object Flow extends OrderMerchantOfRecord { override def toString = "flow" }
    case object Organization extends OrderMerchantOfRecord { override def toString = "organization" }
    case object Mixed extends OrderMerchantOfRecord { override def toString = "mixed" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends OrderMerchantOfRecord

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[OrderMerchantOfRecord] = scala.List(Flow, Organization, Mixed)

    private[this]
    val byName: Map[String, OrderMerchantOfRecord] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): OrderMerchantOfRecord = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[OrderMerchantOfRecord] = byName.get(value.toLowerCase)

  }

  sealed trait PriceBookStatus extends _root_.scala.Product with _root_.scala.Serializable

  object PriceBookStatus {

    case object Draft extends PriceBookStatus { override def toString = "draft" }
    case object Published extends PriceBookStatus { override def toString = "published" }
    case object Archived extends PriceBookStatus { override def toString = "archived" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends PriceBookStatus

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[PriceBookStatus] = scala.List(Draft, Published, Archived)

    private[this]
    val byName: Map[String, PriceBookStatus] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): PriceBookStatus = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[PriceBookStatus] = byName.get(value.toLowerCase)

  }

  /**
   * A user's role within an organization
   */
  sealed trait Role extends _root_.scala.Product with _root_.scala.Serializable

  object Role {

    case object Admin extends Role { override def toString = "admin" }
    case object Member extends Role { override def toString = "member" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends Role

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Role] = scala.List(Admin, Member)

    private[this]
    val byName: Map[String, Role] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Role = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Role] = byName.get(value.toLowerCase)

  }

  /**
   * Direction to round localized price
   */
  sealed trait RoundingMethod extends _root_.scala.Product with _root_.scala.Serializable

  object RoundingMethod {

    /**
     * Round up to the specified rounding.value
     */
    case object Up extends RoundingMethod { override def toString = "up" }
    /**
     * Round down to the specified rounding.value
     */
    case object Down extends RoundingMethod { override def toString = "down" }
    /**
     * Round to the nearest specified rounding.value. If equidistant, will round up.
     */
    case object Nearest extends RoundingMethod { override def toString = "nearest" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends RoundingMethod

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[RoundingMethod] = scala.List(Up, Down, Nearest)

    private[this]
    val byName: Map[String, RoundingMethod] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): RoundingMethod = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[RoundingMethod] = byName.get(value.toLowerCase)

  }

  /**
   * Rounding type determines the rule used to enforce rounding. Common rules will
   * ensure that the final price ends w/ a given number (e.g. ends with .95) or is a
   * multiple of some number (multiples of 5 or 10 are common).
   */
  sealed trait RoundingType extends _root_.scala.Product with _root_.scala.Serializable

  object RoundingType {

    /**
     * Rounds a value to an amount ending with a pattern, e.g. an amount ending in
     * '.99'.
     */
    case object Pattern extends RoundingType { override def toString = "pattern" }
    /**
     * Rounds a value to an amount that is the multiple of a value, e.g. rounding to
     * the nearest 5 would ensure that the resulting number ends in either 0 or 5.
     */
    case object Multiple extends RoundingType { override def toString = "multiple" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends RoundingType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[RoundingType] = scala.List(Pattern, Multiple)

    private[this]
    val byName: Map[String, RoundingType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): RoundingType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[RoundingType] = byName.get(value.toLowerCase)

  }

  sealed trait ScheduleExceptionStatus extends _root_.scala.Product with _root_.scala.Serializable

  object ScheduleExceptionStatus {

    case object Open extends ScheduleExceptionStatus { override def toString = "Open" }
    case object Closed extends ScheduleExceptionStatus { override def toString = "Closed" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends ScheduleExceptionStatus

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[ScheduleExceptionStatus] = scala.List(Open, Closed)

    private[this]
    val byName: Map[String, ScheduleExceptionStatus] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ScheduleExceptionStatus = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ScheduleExceptionStatus] = byName.get(value.toLowerCase)

  }

  sealed trait SortDirection extends _root_.scala.Product with _root_.scala.Serializable

  object SortDirection {

    case object Ascending extends SortDirection { override def toString = "ascending" }
    case object Descending extends SortDirection { override def toString = "descending" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends SortDirection

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[SortDirection] = scala.List(Ascending, Descending)

    private[this]
    val byName: Map[String, SortDirection] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): SortDirection = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[SortDirection] = byName.get(value.toLowerCase)

  }

  /**
   * Defines the units of measurement that we support. As units are added, we conform
   * with the standard units provided by jscience as part of JSR 363 - see
   * http://jscience.org/api/javax/measure/unit/SI.html and
   * http://jscience.org/api/javax/measure/unit/NonSI.html
   */
  sealed trait UnitOfMeasurement extends _root_.scala.Product with _root_.scala.Serializable

  object UnitOfMeasurement {

    /**
     * Equivalent to MILLI(METRE).
     */
    case object Millimeter extends UnitOfMeasurement { override def toString = "millimeter" }
    /**
     * Equivalent to CENTI(METRE).
     */
    case object Centimeter extends UnitOfMeasurement { override def toString = "centimeter" }
    /**
     * A unit of length equal to 0.0254 m (standard name in).
     */
    case object Inch extends UnitOfMeasurement { override def toString = "inch" }
    /**
     * A unit of length equal to 0.3048 m (standard name ft).
     */
    case object Foot extends UnitOfMeasurement { override def toString = "foot" }
    /**
     * A unit of volume equal to one cubic inch (in³).
     */
    case object CubicInch extends UnitOfMeasurement { override def toString = "cubic_inch" }
    /**
     * The metric unit for volume quantities (m³).
     */
    case object CubicMeter extends UnitOfMeasurement { override def toString = "cubic_meter" }
    /**
     * A unit of mass equal to 1 / 1000 kilogram (standard name g).
     */
    case object Gram extends UnitOfMeasurement { override def toString = "gram" }
    /**
     * The base unit for mass quantities (kg).
     */
    case object Kilogram extends UnitOfMeasurement { override def toString = "kilogram" }
    /**
     * The base unit for length quantities (m).
     */
    case object Meter extends UnitOfMeasurement { override def toString = "meter" }
    /**
     * A unit of mass equal to 1 / 16 POUND (standard name oz).
     */
    case object Ounce extends UnitOfMeasurement { override def toString = "ounce" }
    /**
     * A unit of mass equal to 453.59237 grams (avoirdupois pound, standard name lb).
     */
    case object Pound extends UnitOfMeasurement { override def toString = "pound" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends UnitOfMeasurement

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[UnitOfMeasurement] = scala.List(Millimeter, Centimeter, Inch, Foot, CubicInch, CubicMeter, Gram, Kilogram, Meter, Ounce, Pound)

    private[this]
    val byName: Map[String, UnitOfMeasurement] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): UnitOfMeasurement = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[UnitOfMeasurement] = byName.get(value.toLowerCase)

  }

  /**
   * Defines the units of time that we support
   */
  sealed trait UnitOfTime extends _root_.scala.Product with _root_.scala.Serializable

  object UnitOfTime {

    case object Year extends UnitOfTime { override def toString = "year" }
    case object Month extends UnitOfTime { override def toString = "month" }
    case object Week extends UnitOfTime { override def toString = "week" }
    case object Day extends UnitOfTime { override def toString = "day" }
    case object Hour extends UnitOfTime { override def toString = "hour" }
    case object Minute extends UnitOfTime { override def toString = "minute" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends UnitOfTime

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[UnitOfTime] = scala.List(Year, Month, Week, Day, Hour, Minute)

    private[this]
    val byName: Map[String, UnitOfTime] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): UnitOfTime = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[UnitOfTime] = byName.get(value.toLowerCase)

  }

  /**
   * The status of the user account. Valid transitions are from pending -> active,
   * active -> inactive, inactive -> active
   */
  sealed trait UserStatus extends _root_.scala.Product with _root_.scala.Serializable

  object UserStatus {

    /**
     * Represents a new user account that is pending approval
     */
    case object Pending extends UserStatus { override def toString = "pending" }
    /**
     * Represents an active user account - can authenticate with this account
     */
    case object Active extends UserStatus { override def toString = "active" }
    /**
     * Represents an inactive user account - can no longer authenticate with this
     * account
     */
    case object Inactive extends UserStatus { override def toString = "inactive" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends UserStatus

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[UserStatus] = scala.List(Pending, Active, Inactive)

    private[this]
    val byName: Map[String, UserStatus] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): UserStatus = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[UserStatus] = byName.get(value.toLowerCase)

  }

  sealed trait ValueAddedService extends _root_.scala.Product with _root_.scala.Serializable

  object ValueAddedService {

    /**
     * See https://en.wikipedia.org/wiki/ORM-D
     */
    case object HazardousMaterial extends ValueAddedService { override def toString = "Hazardous Material" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends ValueAddedService

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[ValueAddedService] = scala.List(HazardousMaterial)

    private[this]
    val byName: Map[String, ValueAddedService] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ValueAddedService = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ValueAddedService] = byName.get(value.toLowerCase)

  }

  sealed trait Visibility extends _root_.scala.Product with _root_.scala.Serializable

  object Visibility {

    case object Public extends Visibility { override def toString = "public" }
    case object Private extends Visibility { override def toString = "private" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends Visibility

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Visibility] = scala.List(Public, Private)

    private[this]
    val byName: Map[String, Visibility] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Visibility = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Visibility] = byName.get(value.toLowerCase)

  }

}

package io.flow.common.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID = new Writes[_root_.java.util.UUID] {
      def writes(x: _root_.java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[_root_.org.joda.time.DateTime] {
      def writes(x: _root_.org.joda.time.DateTime) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
      }
    }

    private[v0] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate = new Writes[_root_.org.joda.time.LocalDate] {
      def writes(x: _root_.org.joda.time.LocalDate) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
      }
    }

    implicit val jsonReadsCommonAttributeDataType = new play.api.libs.json.Reads[io.flow.common.v0.models.AttributeDataType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.AttributeDataType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.AttributeDataType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.AttributeDataType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonAttributeDataType(obj: io.flow.common.v0.models.AttributeDataType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectAttributeDataType(obj: io.flow.common.v0.models.AttributeDataType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonAttributeDataType: play.api.libs.json.Writes[AttributeDataType] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.AttributeDataType] {
        def writes(obj: io.flow.common.v0.models.AttributeDataType) = {
          jsonWritesCommonAttributeDataType(obj)
        }
      }
    }

    implicit val jsonReadsCommonAvailabilityStatus = new play.api.libs.json.Reads[io.flow.common.v0.models.AvailabilityStatus] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.AvailabilityStatus] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.AvailabilityStatus(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.AvailabilityStatus(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonAvailabilityStatus(obj: io.flow.common.v0.models.AvailabilityStatus) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectAvailabilityStatus(obj: io.flow.common.v0.models.AvailabilityStatus) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonAvailabilityStatus: play.api.libs.json.Writes[AvailabilityStatus] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.AvailabilityStatus] {
        def writes(obj: io.flow.common.v0.models.AvailabilityStatus) = {
          jsonWritesCommonAvailabilityStatus(obj)
        }
      }
    }

    implicit val jsonReadsCommonCalendar = new play.api.libs.json.Reads[io.flow.common.v0.models.Calendar] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.Calendar] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Calendar(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Calendar(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonCalendar(obj: io.flow.common.v0.models.Calendar) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectCalendar(obj: io.flow.common.v0.models.Calendar) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonCalendar: play.api.libs.json.Writes[Calendar] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Calendar] {
        def writes(obj: io.flow.common.v0.models.Calendar) = {
          jsonWritesCommonCalendar(obj)
        }
      }
    }

    implicit val jsonReadsCommonCapability = new play.api.libs.json.Reads[io.flow.common.v0.models.Capability] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.Capability] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Capability(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Capability(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonCapability(obj: io.flow.common.v0.models.Capability) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectCapability(obj: io.flow.common.v0.models.Capability) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonCapability: play.api.libs.json.Writes[Capability] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Capability] {
        def writes(obj: io.flow.common.v0.models.Capability) = {
          jsonWritesCommonCapability(obj)
        }
      }
    }

    implicit val jsonReadsCommonChangeType = new play.api.libs.json.Reads[io.flow.common.v0.models.ChangeType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.ChangeType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ChangeType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ChangeType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonChangeType(obj: io.flow.common.v0.models.ChangeType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectChangeType(obj: io.flow.common.v0.models.ChangeType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonChangeType: play.api.libs.json.Writes[ChangeType] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ChangeType] {
        def writes(obj: io.flow.common.v0.models.ChangeType) = {
          jsonWritesCommonChangeType(obj)
        }
      }
    }

    implicit val jsonReadsCommonCurrencyLabelFormatter = new play.api.libs.json.Reads[io.flow.common.v0.models.CurrencyLabelFormatter] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.CurrencyLabelFormatter] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.CurrencyLabelFormatter(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.CurrencyLabelFormatter(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonCurrencyLabelFormatter(obj: io.flow.common.v0.models.CurrencyLabelFormatter) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectCurrencyLabelFormatter(obj: io.flow.common.v0.models.CurrencyLabelFormatter) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonCurrencyLabelFormatter: play.api.libs.json.Writes[CurrencyLabelFormatter] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.CurrencyLabelFormatter] {
        def writes(obj: io.flow.common.v0.models.CurrencyLabelFormatter) = {
          jsonWritesCommonCurrencyLabelFormatter(obj)
        }
      }
    }

    implicit val jsonReadsCommonCurrencySymbolFormat = new play.api.libs.json.Reads[io.flow.common.v0.models.CurrencySymbolFormat] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.CurrencySymbolFormat] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.CurrencySymbolFormat(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.CurrencySymbolFormat(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonCurrencySymbolFormat(obj: io.flow.common.v0.models.CurrencySymbolFormat) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectCurrencySymbolFormat(obj: io.flow.common.v0.models.CurrencySymbolFormat) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonCurrencySymbolFormat: play.api.libs.json.Writes[CurrencySymbolFormat] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.CurrencySymbolFormat] {
        def writes(obj: io.flow.common.v0.models.CurrencySymbolFormat) = {
          jsonWritesCommonCurrencySymbolFormat(obj)
        }
      }
    }

    implicit val jsonReadsCommonDayOfWeek = new play.api.libs.json.Reads[io.flow.common.v0.models.DayOfWeek] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.DayOfWeek] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.DayOfWeek(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.DayOfWeek(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonDayOfWeek(obj: io.flow.common.v0.models.DayOfWeek) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectDayOfWeek(obj: io.flow.common.v0.models.DayOfWeek) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonDayOfWeek: play.api.libs.json.Writes[DayOfWeek] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.DayOfWeek] {
        def writes(obj: io.flow.common.v0.models.DayOfWeek) = {
          jsonWritesCommonDayOfWeek(obj)
        }
      }
    }

    implicit val jsonReadsCommonDeliveredDuty = new play.api.libs.json.Reads[io.flow.common.v0.models.DeliveredDuty] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.DeliveredDuty] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.DeliveredDuty(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.DeliveredDuty(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonDeliveredDuty(obj: io.flow.common.v0.models.DeliveredDuty) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectDeliveredDuty(obj: io.flow.common.v0.models.DeliveredDuty) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonDeliveredDuty: play.api.libs.json.Writes[DeliveredDuty] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.DeliveredDuty] {
        def writes(obj: io.flow.common.v0.models.DeliveredDuty) = {
          jsonWritesCommonDeliveredDuty(obj)
        }
      }
    }

    implicit val jsonReadsCommonDiscountTarget = new play.api.libs.json.Reads[io.flow.common.v0.models.DiscountTarget] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.DiscountTarget] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.DiscountTarget(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.DiscountTarget(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonDiscountTarget(obj: io.flow.common.v0.models.DiscountTarget) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectDiscountTarget(obj: io.flow.common.v0.models.DiscountTarget) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonDiscountTarget: play.api.libs.json.Writes[DiscountTarget] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.DiscountTarget] {
        def writes(obj: io.flow.common.v0.models.DiscountTarget) = {
          jsonWritesCommonDiscountTarget(obj)
        }
      }
    }

    implicit val jsonReadsCommonEnvironment = new play.api.libs.json.Reads[io.flow.common.v0.models.Environment] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.Environment] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Environment(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Environment(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonEnvironment(obj: io.flow.common.v0.models.Environment) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectEnvironment(obj: io.flow.common.v0.models.Environment) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonEnvironment: play.api.libs.json.Writes[Environment] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Environment] {
        def writes(obj: io.flow.common.v0.models.Environment) = {
          jsonWritesCommonEnvironment(obj)
        }
      }
    }

    implicit val jsonReadsCommonExceptionType = new play.api.libs.json.Reads[io.flow.common.v0.models.ExceptionType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.ExceptionType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ExceptionType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ExceptionType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonExceptionType(obj: io.flow.common.v0.models.ExceptionType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectExceptionType(obj: io.flow.common.v0.models.ExceptionType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonExceptionType: play.api.libs.json.Writes[ExceptionType] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ExceptionType] {
        def writes(obj: io.flow.common.v0.models.ExceptionType) = {
          jsonWritesCommonExceptionType(obj)
        }
      }
    }

    implicit val jsonReadsCommonHolidayCalendar = new play.api.libs.json.Reads[io.flow.common.v0.models.HolidayCalendar] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.HolidayCalendar] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.HolidayCalendar(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.HolidayCalendar(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonHolidayCalendar(obj: io.flow.common.v0.models.HolidayCalendar) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectHolidayCalendar(obj: io.flow.common.v0.models.HolidayCalendar) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonHolidayCalendar: play.api.libs.json.Writes[HolidayCalendar] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.HolidayCalendar] {
        def writes(obj: io.flow.common.v0.models.HolidayCalendar) = {
          jsonWritesCommonHolidayCalendar(obj)
        }
      }
    }

    implicit val jsonReadsCommonIncludedLevyKey = new play.api.libs.json.Reads[io.flow.common.v0.models.IncludedLevyKey] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.IncludedLevyKey] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.IncludedLevyKey(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.IncludedLevyKey(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonIncludedLevyKey(obj: io.flow.common.v0.models.IncludedLevyKey) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectIncludedLevyKey(obj: io.flow.common.v0.models.IncludedLevyKey) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonIncludedLevyKey: play.api.libs.json.Writes[IncludedLevyKey] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.IncludedLevyKey] {
        def writes(obj: io.flow.common.v0.models.IncludedLevyKey) = {
          jsonWritesCommonIncludedLevyKey(obj)
        }
      }
    }

    implicit val jsonReadsCommonIncoterm = new play.api.libs.json.Reads[io.flow.common.v0.models.Incoterm] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.Incoterm] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Incoterm(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Incoterm(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonIncoterm(obj: io.flow.common.v0.models.Incoterm) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectIncoterm(obj: io.flow.common.v0.models.Incoterm) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonIncoterm: play.api.libs.json.Writes[Incoterm] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Incoterm] {
        def writes(obj: io.flow.common.v0.models.Incoterm) = {
          jsonWritesCommonIncoterm(obj)
        }
      }
    }

    implicit val jsonReadsCommonInputSpecificationType = new play.api.libs.json.Reads[io.flow.common.v0.models.InputSpecificationType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.InputSpecificationType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.InputSpecificationType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.InputSpecificationType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonInputSpecificationType(obj: io.flow.common.v0.models.InputSpecificationType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectInputSpecificationType(obj: io.flow.common.v0.models.InputSpecificationType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonInputSpecificationType: play.api.libs.json.Writes[InputSpecificationType] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.InputSpecificationType] {
        def writes(obj: io.flow.common.v0.models.InputSpecificationType) = {
          jsonWritesCommonInputSpecificationType(obj)
        }
      }
    }

    implicit val jsonReadsCommonMarginType = new play.api.libs.json.Reads[io.flow.common.v0.models.MarginType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.MarginType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.MarginType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.MarginType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonMarginType(obj: io.flow.common.v0.models.MarginType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectMarginType(obj: io.flow.common.v0.models.MarginType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonMarginType: play.api.libs.json.Writes[MarginType] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.MarginType] {
        def writes(obj: io.flow.common.v0.models.MarginType) = {
          jsonWritesCommonMarginType(obj)
        }
      }
    }

    implicit val jsonReadsCommonMeasurementSystem = new play.api.libs.json.Reads[io.flow.common.v0.models.MeasurementSystem] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.MeasurementSystem] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.MeasurementSystem(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.MeasurementSystem(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonMeasurementSystem(obj: io.flow.common.v0.models.MeasurementSystem) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectMeasurementSystem(obj: io.flow.common.v0.models.MeasurementSystem) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonMeasurementSystem: play.api.libs.json.Writes[MeasurementSystem] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.MeasurementSystem] {
        def writes(obj: io.flow.common.v0.models.MeasurementSystem) = {
          jsonWritesCommonMeasurementSystem(obj)
        }
      }
    }

    implicit val jsonReadsCommonMerchantOfRecord = new play.api.libs.json.Reads[io.flow.common.v0.models.MerchantOfRecord] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.MerchantOfRecord] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.MerchantOfRecord(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.MerchantOfRecord(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonMerchantOfRecord(obj: io.flow.common.v0.models.MerchantOfRecord) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectMerchantOfRecord(obj: io.flow.common.v0.models.MerchantOfRecord) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonMerchantOfRecord: play.api.libs.json.Writes[MerchantOfRecord] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.MerchantOfRecord] {
        def writes(obj: io.flow.common.v0.models.MerchantOfRecord) = {
          jsonWritesCommonMerchantOfRecord(obj)
        }
      }
    }

    implicit val jsonReadsCommonOrderMerchantOfRecord = new play.api.libs.json.Reads[io.flow.common.v0.models.OrderMerchantOfRecord] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.OrderMerchantOfRecord] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.OrderMerchantOfRecord(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.OrderMerchantOfRecord(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonOrderMerchantOfRecord(obj: io.flow.common.v0.models.OrderMerchantOfRecord) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectOrderMerchantOfRecord(obj: io.flow.common.v0.models.OrderMerchantOfRecord) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonOrderMerchantOfRecord: play.api.libs.json.Writes[OrderMerchantOfRecord] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.OrderMerchantOfRecord] {
        def writes(obj: io.flow.common.v0.models.OrderMerchantOfRecord) = {
          jsonWritesCommonOrderMerchantOfRecord(obj)
        }
      }
    }

    implicit val jsonReadsCommonPriceBookStatus = new play.api.libs.json.Reads[io.flow.common.v0.models.PriceBookStatus] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.PriceBookStatus] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.PriceBookStatus(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.PriceBookStatus(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonPriceBookStatus(obj: io.flow.common.v0.models.PriceBookStatus) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectPriceBookStatus(obj: io.flow.common.v0.models.PriceBookStatus) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonPriceBookStatus: play.api.libs.json.Writes[PriceBookStatus] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.PriceBookStatus] {
        def writes(obj: io.flow.common.v0.models.PriceBookStatus) = {
          jsonWritesCommonPriceBookStatus(obj)
        }
      }
    }

    implicit val jsonReadsCommonRole = new play.api.libs.json.Reads[io.flow.common.v0.models.Role] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.Role] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Role(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Role(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonRole(obj: io.flow.common.v0.models.Role) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectRole(obj: io.flow.common.v0.models.Role) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonRole: play.api.libs.json.Writes[Role] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Role] {
        def writes(obj: io.flow.common.v0.models.Role) = {
          jsonWritesCommonRole(obj)
        }
      }
    }

    implicit val jsonReadsCommonRoundingMethod = new play.api.libs.json.Reads[io.flow.common.v0.models.RoundingMethod] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.RoundingMethod] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.RoundingMethod(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.RoundingMethod(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonRoundingMethod(obj: io.flow.common.v0.models.RoundingMethod) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectRoundingMethod(obj: io.flow.common.v0.models.RoundingMethod) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonRoundingMethod: play.api.libs.json.Writes[RoundingMethod] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.RoundingMethod] {
        def writes(obj: io.flow.common.v0.models.RoundingMethod) = {
          jsonWritesCommonRoundingMethod(obj)
        }
      }
    }

    implicit val jsonReadsCommonRoundingType = new play.api.libs.json.Reads[io.flow.common.v0.models.RoundingType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.RoundingType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.RoundingType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.RoundingType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonRoundingType(obj: io.flow.common.v0.models.RoundingType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectRoundingType(obj: io.flow.common.v0.models.RoundingType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonRoundingType: play.api.libs.json.Writes[RoundingType] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.RoundingType] {
        def writes(obj: io.flow.common.v0.models.RoundingType) = {
          jsonWritesCommonRoundingType(obj)
        }
      }
    }

    implicit val jsonReadsCommonScheduleExceptionStatus = new play.api.libs.json.Reads[io.flow.common.v0.models.ScheduleExceptionStatus] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.ScheduleExceptionStatus] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ScheduleExceptionStatus(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ScheduleExceptionStatus(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonScheduleExceptionStatus(obj: io.flow.common.v0.models.ScheduleExceptionStatus) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectScheduleExceptionStatus(obj: io.flow.common.v0.models.ScheduleExceptionStatus) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonScheduleExceptionStatus: play.api.libs.json.Writes[ScheduleExceptionStatus] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ScheduleExceptionStatus] {
        def writes(obj: io.flow.common.v0.models.ScheduleExceptionStatus) = {
          jsonWritesCommonScheduleExceptionStatus(obj)
        }
      }
    }

    implicit val jsonReadsCommonSortDirection = new play.api.libs.json.Reads[io.flow.common.v0.models.SortDirection] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.SortDirection] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.SortDirection(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.SortDirection(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonSortDirection(obj: io.flow.common.v0.models.SortDirection) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectSortDirection(obj: io.flow.common.v0.models.SortDirection) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonSortDirection: play.api.libs.json.Writes[SortDirection] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.SortDirection] {
        def writes(obj: io.flow.common.v0.models.SortDirection) = {
          jsonWritesCommonSortDirection(obj)
        }
      }
    }

    implicit val jsonReadsCommonUnitOfMeasurement = new play.api.libs.json.Reads[io.flow.common.v0.models.UnitOfMeasurement] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.UnitOfMeasurement] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.UnitOfMeasurement(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.UnitOfMeasurement(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonUnitOfMeasurement(obj: io.flow.common.v0.models.UnitOfMeasurement) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectUnitOfMeasurement(obj: io.flow.common.v0.models.UnitOfMeasurement) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonUnitOfMeasurement: play.api.libs.json.Writes[UnitOfMeasurement] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.UnitOfMeasurement] {
        def writes(obj: io.flow.common.v0.models.UnitOfMeasurement) = {
          jsonWritesCommonUnitOfMeasurement(obj)
        }
      }
    }

    implicit val jsonReadsCommonUnitOfTime = new play.api.libs.json.Reads[io.flow.common.v0.models.UnitOfTime] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.UnitOfTime] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.UnitOfTime(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.UnitOfTime(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonUnitOfTime(obj: io.flow.common.v0.models.UnitOfTime) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectUnitOfTime(obj: io.flow.common.v0.models.UnitOfTime) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonUnitOfTime: play.api.libs.json.Writes[UnitOfTime] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.UnitOfTime] {
        def writes(obj: io.flow.common.v0.models.UnitOfTime) = {
          jsonWritesCommonUnitOfTime(obj)
        }
      }
    }

    implicit val jsonReadsCommonUserStatus = new play.api.libs.json.Reads[io.flow.common.v0.models.UserStatus] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.UserStatus] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.UserStatus(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.UserStatus(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonUserStatus(obj: io.flow.common.v0.models.UserStatus) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectUserStatus(obj: io.flow.common.v0.models.UserStatus) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonUserStatus: play.api.libs.json.Writes[UserStatus] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.UserStatus] {
        def writes(obj: io.flow.common.v0.models.UserStatus) = {
          jsonWritesCommonUserStatus(obj)
        }
      }
    }

    implicit val jsonReadsCommonValueAddedService = new play.api.libs.json.Reads[io.flow.common.v0.models.ValueAddedService] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.ValueAddedService] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ValueAddedService(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ValueAddedService(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonValueAddedService(obj: io.flow.common.v0.models.ValueAddedService) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectValueAddedService(obj: io.flow.common.v0.models.ValueAddedService) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonValueAddedService: play.api.libs.json.Writes[ValueAddedService] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ValueAddedService] {
        def writes(obj: io.flow.common.v0.models.ValueAddedService) = {
          jsonWritesCommonValueAddedService(obj)
        }
      }
    }

    implicit val jsonReadsCommonVisibility = new play.api.libs.json.Reads[io.flow.common.v0.models.Visibility] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.common.v0.models.Visibility] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Visibility(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.common.v0.models.Visibility(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCommonVisibility(obj: io.flow.common.v0.models.Visibility) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectVisibility(obj: io.flow.common.v0.models.Visibility) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCommonVisibility: play.api.libs.json.Writes[Visibility] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Visibility] {
        def writes(obj: io.flow.common.v0.models.Visibility) = {
          jsonWritesCommonVisibility(obj)
        }
      }
    }

    implicit def jsonReadsCommonAddress: play.api.libs.json.Reads[Address] = {
      for {
        text <- (__ \ "text").readNullable[String]
        streets <- (__ \ "streets").readNullable[Seq[String]]
        streetNumber <- (__ \ "street_number").readNullable[String]
        city <- (__ \ "city").readNullable[String]
        province <- (__ \ "province").readNullable[String]
        postal <- (__ \ "postal").readNullable[String]
        country <- (__ \ "country").readNullable[String]
        latitude <- (__ \ "latitude").readNullable[String]
        longitude <- (__ \ "longitude").readNullable[String]
      } yield Address(text, streets, streetNumber, city, province, postal, country, latitude, longitude)
    }

    def jsObjectAddress(obj: io.flow.common.v0.models.Address): play.api.libs.json.JsObject = {
      (obj.text match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("text" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.streets match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("streets" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.streetNumber match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("street_number" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.city match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("city" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.province match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("province" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.postal match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("postal" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.country match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("country" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.latitude match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("latitude" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.longitude match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("longitude" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesCommonAddress: play.api.libs.json.Writes[Address] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Address] {
        def writes(obj: io.flow.common.v0.models.Address) = {
          jsObjectAddress(obj)
        }
      }
    }

    implicit def jsonReadsCommonBillingAddress: play.api.libs.json.Reads[BillingAddress] = {
      for {
        name <- (__ \ "name").readNullable[io.flow.common.v0.models.Name]
        streets <- (__ \ "streets").readNullable[Seq[String]]
        city <- (__ \ "city").readNullable[String]
        province <- (__ \ "province").readNullable[String]
        postal <- (__ \ "postal").readNullable[String]
        country <- (__ \ "country").readNullable[String]
        company <- (__ \ "company").readNullable[String]
      } yield BillingAddress(name, streets, city, province, postal, country, company)
    }

    def jsObjectBillingAddress(obj: io.flow.common.v0.models.BillingAddress): play.api.libs.json.JsObject = {
      (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> jsObjectName(x))
      }) ++
      (obj.streets match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("streets" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.city match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("city" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.province match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("province" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.postal match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("postal" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.country match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("country" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.company match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("company" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesCommonBillingAddress: play.api.libs.json.Writes[BillingAddress] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.BillingAddress] {
        def writes(obj: io.flow.common.v0.models.BillingAddress) = {
          jsObjectBillingAddress(obj)
        }
      }
    }

    implicit def jsonReadsCommonCatalogItemReference: play.api.libs.json.Reads[CatalogItemReference] = {
      for {
        id <- (__ \ "id").read[String]
        number <- (__ \ "number").read[String]
      } yield CatalogItemReference(id, number)
    }

    def jsObjectCatalogItemReference(obj: io.flow.common.v0.models.CatalogItemReference): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "number" -> play.api.libs.json.JsString(obj.number)
      )
    }

    implicit def jsonWritesCommonCatalogItemReference: play.api.libs.json.Writes[CatalogItemReference] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.CatalogItemReference] {
        def writes(obj: io.flow.common.v0.models.CatalogItemReference) = {
          jsObjectCatalogItemReference(obj)
        }
      }
    }

    implicit def jsonReadsCommonCatalogItemSummary: play.api.libs.json.Reads[CatalogItemSummary] = {
      for {
        number <- (__ \ "number").read[String]
        name <- (__ \ "name").read[String]
        attributes <- (__ \ "attributes").read[Map[String, String]]
      } yield CatalogItemSummary(number, name, attributes)
    }

    def jsObjectCatalogItemSummary(obj: io.flow.common.v0.models.CatalogItemSummary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "number" -> play.api.libs.json.JsString(obj.number),
        "name" -> play.api.libs.json.JsString(obj.name),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      )
    }

    implicit def jsonWritesCommonCatalogItemSummary: play.api.libs.json.Writes[CatalogItemSummary] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.CatalogItemSummary] {
        def writes(obj: io.flow.common.v0.models.CatalogItemSummary) = {
          jsObjectCatalogItemSummary(obj)
        }
      }
    }

    implicit def jsonReadsCommonContact: play.api.libs.json.Reads[Contact] = {
      for {
        name <- (__ \ "name").read[io.flow.common.v0.models.Name]
        company <- (__ \ "company").readNullable[String]
        email <- (__ \ "email").readNullable[String]
        phone <- (__ \ "phone").readNullable[String]
      } yield Contact(name, company, email, phone)
    }

    def jsObjectContact(obj: io.flow.common.v0.models.Contact): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> jsObjectName(obj.name)
      ) ++ (obj.company match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("company" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.phone match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("phone" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesCommonContact: play.api.libs.json.Writes[Contact] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Contact] {
        def writes(obj: io.flow.common.v0.models.Contact) = {
          jsObjectContact(obj)
        }
      }
    }

    implicit def jsonReadsCommonCustomerInvoice: play.api.libs.json.Reads[CustomerInvoice] = {
      (__ \ "address").readNullable[io.flow.common.v0.models.BillingAddress].map { x => new CustomerInvoice(address = x) }
    }

    def jsObjectCustomerInvoice(obj: io.flow.common.v0.models.CustomerInvoice): play.api.libs.json.JsObject = {
      (obj.address match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("address" -> jsObjectBillingAddress(x))
      })
    }

    implicit def jsonWritesCommonCustomerInvoice: play.api.libs.json.Writes[CustomerInvoice] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.CustomerInvoice] {
        def writes(obj: io.flow.common.v0.models.CustomerInvoice) = {
          jsObjectCustomerInvoice(obj)
        }
      }
    }

    implicit def jsonReadsCommonDatetimeRange: play.api.libs.json.Reads[DatetimeRange] = {
      for {
        from <- (__ \ "from").read[_root_.org.joda.time.DateTime]
        to <- (__ \ "to").read[_root_.org.joda.time.DateTime]
      } yield DatetimeRange(from, to)
    }

    def jsObjectDatetimeRange(obj: io.flow.common.v0.models.DatetimeRange): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "from" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.from)),
        "to" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.to))
      )
    }

    implicit def jsonWritesCommonDatetimeRange: play.api.libs.json.Writes[DatetimeRange] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.DatetimeRange] {
        def writes(obj: io.flow.common.v0.models.DatetimeRange) = {
          jsObjectDatetimeRange(obj)
        }
      }
    }

    implicit def jsonReadsCommonDimension: play.api.libs.json.Reads[Dimension] = {
      for {
        depth <- (__ \ "depth").readNullable[io.flow.common.v0.models.Measurement]
        diameter <- (__ \ "diameter").readNullable[io.flow.common.v0.models.Measurement]
        length <- (__ \ "length").readNullable[io.flow.common.v0.models.Measurement]
        weight <- (__ \ "weight").readNullable[io.flow.common.v0.models.Measurement]
        width <- (__ \ "width").readNullable[io.flow.common.v0.models.Measurement]
      } yield Dimension(depth, diameter, length, weight, width)
    }

    def jsObjectDimension(obj: io.flow.common.v0.models.Dimension): play.api.libs.json.JsObject = {
      (obj.depth match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("depth" -> jsObjectMeasurement(x))
      }) ++
      (obj.diameter match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("diameter" -> jsObjectMeasurement(x))
      }) ++
      (obj.length match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("length" -> jsObjectMeasurement(x))
      }) ++
      (obj.weight match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("weight" -> jsObjectMeasurement(x))
      }) ++
      (obj.width match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("width" -> jsObjectMeasurement(x))
      })
    }

    implicit def jsonWritesCommonDimension: play.api.libs.json.Writes[Dimension] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Dimension] {
        def writes(obj: io.flow.common.v0.models.Dimension) = {
          jsObjectDimension(obj)
        }
      }
    }

    implicit def jsonReadsCommonDimensions: play.api.libs.json.Reads[Dimensions] = {
      for {
        product <- (__ \ "product").readNullable[io.flow.common.v0.models.Dimension]
        packaging <- (__ \ "packaging").readNullable[io.flow.common.v0.models.Dimension]
      } yield Dimensions(product, packaging)
    }

    def jsObjectDimensions(obj: io.flow.common.v0.models.Dimensions): play.api.libs.json.JsObject = {
      (obj.product match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("product" -> jsObjectDimension(x))
      }) ++
      (obj.packaging match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("packaging" -> jsObjectDimension(x))
      })
    }

    implicit def jsonWritesCommonDimensions: play.api.libs.json.Writes[Dimensions] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Dimensions] {
        def writes(obj: io.flow.common.v0.models.Dimensions) = {
          jsObjectDimensions(obj)
        }
      }
    }

    implicit def jsonReadsCommonDiscountForm: play.api.libs.json.Reads[DiscountForm] = {
      for {
        offer <- (__ \ "offer").read[io.flow.common.v0.models.DiscountOffer]
        target <- (__ \ "target").readWithDefault[io.flow.common.v0.models.DiscountTarget](io.flow.common.v0.models.DiscountTarget.Item)
        label <- (__ \ "label").readNullable[String]
      } yield DiscountForm(offer, target, label)
    }

    def jsObjectDiscountForm(obj: io.flow.common.v0.models.DiscountForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "offer" -> jsObjectDiscountOffer(obj.offer),
        "target" -> play.api.libs.json.JsString(obj.target.toString)
      ) ++ (obj.label match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("label" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesCommonDiscountForm: play.api.libs.json.Writes[DiscountForm] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.DiscountForm] {
        def writes(obj: io.flow.common.v0.models.DiscountForm) = {
          jsObjectDiscountForm(obj)
        }
      }
    }

    implicit def jsonReadsCommonDiscountOfferFixed: play.api.libs.json.Reads[DiscountOfferFixed] = {
      (__ \ "money").read[io.flow.common.v0.models.Money].map { x => new DiscountOfferFixed(money = x) }
    }

    def jsObjectDiscountOfferFixed(obj: io.flow.common.v0.models.DiscountOfferFixed): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "money" -> jsObjectMoney(obj.money)
      )
    }

    implicit def jsonReadsCommonDiscountOfferPercent: play.api.libs.json.Reads[DiscountOfferPercent] = {
      (__ \ "percent").read[BigDecimal].map { x => new DiscountOfferPercent(percent = x) }
    }

    def jsObjectDiscountOfferPercent(obj: io.flow.common.v0.models.DiscountOfferPercent): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "percent" -> play.api.libs.json.JsNumber(obj.percent)
      )
    }

    implicit def jsonReadsCommonDiscountsForm: play.api.libs.json.Reads[DiscountsForm] = {
      (__ \ "discounts").read[Seq[io.flow.common.v0.models.DiscountForm]].map { x => new DiscountsForm(discounts = x) }
    }

    def jsObjectDiscountsForm(obj: io.flow.common.v0.models.DiscountsForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "discounts" -> play.api.libs.json.Json.toJson(obj.discounts)
      )
    }

    implicit def jsonWritesCommonDiscountsForm: play.api.libs.json.Writes[DiscountsForm] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.DiscountsForm] {
        def writes(obj: io.flow.common.v0.models.DiscountsForm) = {
          jsObjectDiscountsForm(obj)
        }
      }
    }

    implicit def jsonReadsCommonDuration: play.api.libs.json.Reads[Duration] = {
      for {
        unit <- (__ \ "unit").read[io.flow.common.v0.models.UnitOfTime]
        value <- (__ \ "value").read[Long]
      } yield Duration(unit, value)
    }

    def jsObjectDuration(obj: io.flow.common.v0.models.Duration): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "unit" -> play.api.libs.json.JsString(obj.unit.toString),
        "value" -> play.api.libs.json.JsNumber(obj.value)
      )
    }

    implicit def jsonWritesCommonDuration: play.api.libs.json.Writes[Duration] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Duration] {
        def writes(obj: io.flow.common.v0.models.Duration) = {
          jsObjectDuration(obj)
        }
      }
    }

    implicit def jsonReadsCommonException: play.api.libs.json.Reads[Exception] = {
      for {
        `type` <- (__ \ "type").read[io.flow.common.v0.models.ExceptionType]
        datetimeRange <- (__ \ "datetime_range").read[io.flow.common.v0.models.DatetimeRange]
      } yield Exception(`type`, datetimeRange)
    }

    def jsObjectException(obj: io.flow.common.v0.models.Exception): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "datetime_range" -> jsObjectDatetimeRange(obj.datetimeRange)
      )
    }

    implicit def jsonWritesCommonException: play.api.libs.json.Writes[Exception] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Exception] {
        def writes(obj: io.flow.common.v0.models.Exception) = {
          jsObjectException(obj)
        }
      }
    }

    implicit def jsonReadsCommonExperienceSummary: play.api.libs.json.Reads[ExperienceSummary] = {
      for {
        id <- (__ \ "id").read[String]
        key <- (__ \ "key").read[String]
        name <- (__ \ "name").read[String]
        country <- (__ \ "country").readNullable[String]
        currency <- (__ \ "currency").readNullable[String]
        language <- (__ \ "language").readNullable[String]
      } yield ExperienceSummary(id, key, name, country, currency, language)
    }

    def jsObjectExperienceSummary(obj: io.flow.common.v0.models.ExperienceSummary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "key" -> play.api.libs.json.JsString(obj.key),
        "name" -> play.api.libs.json.JsString(obj.name)
      ) ++ (obj.country match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("country" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.currency match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("currency" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.language match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("language" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesCommonExperienceSummary: play.api.libs.json.Writes[ExperienceSummary] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ExperienceSummary] {
        def writes(obj: io.flow.common.v0.models.ExperienceSummary) = {
          jsObjectExperienceSummary(obj)
        }
      }
    }

    implicit def jsonReadsCommonIncludedLevies: play.api.libs.json.Reads[IncludedLevies] = {
      for {
        key <- (__ \ "key").read[io.flow.common.v0.models.IncludedLevyKey]
        label <- (__ \ "label").read[String]
      } yield IncludedLevies(key, label)
    }

    def jsObjectIncludedLevies(obj: io.flow.common.v0.models.IncludedLevies): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "key" -> play.api.libs.json.JsString(obj.key.toString),
        "label" -> play.api.libs.json.JsString(obj.label)
      )
    }

    implicit def jsonWritesCommonIncludedLevies: play.api.libs.json.Writes[IncludedLevies] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.IncludedLevies] {
        def writes(obj: io.flow.common.v0.models.IncludedLevies) = {
          jsObjectIncludedLevies(obj)
        }
      }
    }

    implicit def jsonReadsCommonInputForm: play.api.libs.json.Reads[InputForm] = {
      (__ \ "values").readNullable[Map[String, String]].map { x => new InputForm(values = x) }
    }

    def jsObjectInputForm(obj: io.flow.common.v0.models.InputForm): play.api.libs.json.JsObject = {
      (obj.values match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("values" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesCommonInputForm: play.api.libs.json.Writes[InputForm] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.InputForm] {
        def writes(obj: io.flow.common.v0.models.InputForm) = {
          jsObjectInputForm(obj)
        }
      }
    }

    implicit def jsonReadsCommonInputFormSpecification: play.api.libs.json.Reads[InputFormSpecification] = {
      for {
        inputs <- (__ \ "inputs").readNullable[Seq[io.flow.common.v0.models.InputSpecification]]
        limitations <- (__ \ "limitations").readNullable[io.flow.common.v0.models.InputSpecificationLimitations]
      } yield InputFormSpecification(inputs, limitations)
    }

    def jsObjectInputFormSpecification(obj: io.flow.common.v0.models.InputFormSpecification): play.api.libs.json.JsObject = {
      (obj.inputs match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("inputs" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.limitations match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("limitations" -> jsObjectInputSpecificationLimitations(x))
      })
    }

    implicit def jsonWritesCommonInputFormSpecification: play.api.libs.json.Writes[InputFormSpecification] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.InputFormSpecification] {
        def writes(obj: io.flow.common.v0.models.InputFormSpecification) = {
          jsObjectInputFormSpecification(obj)
        }
      }
    }

    implicit def jsonReadsCommonInputSpecification: play.api.libs.json.Reads[InputSpecification] = {
      for {
        `type` <- (__ \ "type").read[io.flow.common.v0.models.InputSpecificationType]
        name <- (__ \ "name").read[String]
        displayText <- (__ \ "display_text").readNullable[String]
      } yield InputSpecification(`type`, name, displayText)
    }

    def jsObjectInputSpecification(obj: io.flow.common.v0.models.InputSpecification): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "name" -> play.api.libs.json.JsString(obj.name)
      ) ++ (obj.displayText match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("display_text" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesCommonInputSpecification: play.api.libs.json.Writes[InputSpecification] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.InputSpecification] {
        def writes(obj: io.flow.common.v0.models.InputSpecification) = {
          jsObjectInputSpecification(obj)
        }
      }
    }

    implicit def jsonReadsCommonInputSpecificationLimitationMax: play.api.libs.json.Reads[InputSpecificationLimitationMax] = {
      (__ \ "max").read[Long].map { x => new InputSpecificationLimitationMax(max = x) }
    }

    def jsObjectInputSpecificationLimitationMax(obj: io.flow.common.v0.models.InputSpecificationLimitationMax): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "max" -> play.api.libs.json.JsNumber(obj.max)
      )
    }

    implicit def jsonReadsCommonInputSpecificationLimitations: play.api.libs.json.Reads[InputSpecificationLimitations] = {
      (__ \ "limitations").readNullable[Seq[io.flow.common.v0.models.InputSpecificationLimitation]].map { x => new InputSpecificationLimitations(limitations = x) }
    }

    def jsObjectInputSpecificationLimitations(obj: io.flow.common.v0.models.InputSpecificationLimitations): play.api.libs.json.JsObject = {
      (obj.limitations match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("limitations" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesCommonInputSpecificationLimitations: play.api.libs.json.Writes[InputSpecificationLimitations] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.InputSpecificationLimitations] {
        def writes(obj: io.flow.common.v0.models.InputSpecificationLimitations) = {
          jsObjectInputSpecificationLimitations(obj)
        }
      }
    }

    implicit def jsonReadsCommonItemReference: play.api.libs.json.Reads[ItemReference] = {
      (__ \ "number").read[String].map { x => new ItemReference(number = x) }
    }

    def jsObjectItemReference(obj: io.flow.common.v0.models.ItemReference): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "number" -> play.api.libs.json.JsString(obj.number)
      )
    }

    implicit def jsonWritesCommonItemReference: play.api.libs.json.Writes[ItemReference] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ItemReference] {
        def writes(obj: io.flow.common.v0.models.ItemReference) = {
          jsObjectItemReference(obj)
        }
      }
    }

    implicit def jsonReadsCommonLineItem: play.api.libs.json.Reads[LineItem] = {
      for {
        number <- (__ \ "number").read[String]
        quantity <- (__ \ "quantity").read[Long]
        price <- (__ \ "price").read[io.flow.common.v0.models.Money]
        attributes <- (__ \ "attributes").read[Map[String, String]]
        center <- (__ \ "center").readNullable[String]
        discount <- (__ \ "discount").readNullable[io.flow.common.v0.models.Money]
      } yield LineItem(number, quantity, price, attributes, center, discount)
    }

    def jsObjectLineItem(obj: io.flow.common.v0.models.LineItem): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "number" -> play.api.libs.json.JsString(obj.number),
        "quantity" -> play.api.libs.json.JsNumber(obj.quantity),
        "price" -> jsObjectMoney(obj.price),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      ) ++ (obj.center match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("center" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.discount match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("discount" -> jsObjectMoney(x))
      })
    }

    implicit def jsonWritesCommonLineItem: play.api.libs.json.Writes[LineItem] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.LineItem] {
        def writes(obj: io.flow.common.v0.models.LineItem) = {
          jsObjectLineItem(obj)
        }
      }
    }

    implicit def jsonReadsCommonLineItemForm: play.api.libs.json.Reads[LineItemForm] = {
      for {
        number <- (__ \ "number").read[String]
        quantity <- (__ \ "quantity").read[Long]
        shipmentEstimate <- (__ \ "shipment_estimate").readNullable[io.flow.common.v0.models.DatetimeRange]
        price <- (__ \ "price").readNullable[io.flow.common.v0.models.Money]
        attributes <- (__ \ "attributes").readNullable[Map[String, String]]
        center <- (__ \ "center").readNullable[String]
        discount <- (__ \ "discount").readNullable[io.flow.common.v0.models.Money]
        discounts <- (__ \ "discounts").readNullable[io.flow.common.v0.models.DiscountsForm]
      } yield LineItemForm(number, quantity, shipmentEstimate, price, attributes, center, discount, discounts)
    }

    def jsObjectLineItemForm(obj: io.flow.common.v0.models.LineItemForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "number" -> play.api.libs.json.JsString(obj.number),
        "quantity" -> play.api.libs.json.JsNumber(obj.quantity)
      ) ++ (obj.shipmentEstimate match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("shipment_estimate" -> jsObjectDatetimeRange(x))
      }) ++
      (obj.price match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("price" -> jsObjectMoney(x))
      }) ++
      (obj.attributes match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("attributes" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.center match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("center" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.discount match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("discount" -> jsObjectMoney(x))
      }) ++
      (obj.discounts match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("discounts" -> jsObjectDiscountsForm(x))
      })
    }

    implicit def jsonWritesCommonLineItemForm: play.api.libs.json.Writes[LineItemForm] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.LineItemForm] {
        def writes(obj: io.flow.common.v0.models.LineItemForm) = {
          jsObjectLineItemForm(obj)
        }
      }
    }

    implicit def jsonReadsCommonMargin: play.api.libs.json.Reads[Margin] = {
      for {
        `type` <- (__ \ "type").read[io.flow.common.v0.models.MarginType]
        value <- (__ \ "value").read[BigDecimal]
      } yield Margin(`type`, value)
    }

    def jsObjectMargin(obj: io.flow.common.v0.models.Margin): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "value" -> play.api.libs.json.JsNumber(obj.value)
      )
    }

    implicit def jsonWritesCommonMargin: play.api.libs.json.Writes[Margin] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Margin] {
        def writes(obj: io.flow.common.v0.models.Margin) = {
          jsObjectMargin(obj)
        }
      }
    }

    implicit def jsonReadsCommonMeasurement: play.api.libs.json.Reads[Measurement] = {
      for {
        value <- (__ \ "value").read[String]
        units <- (__ \ "units").read[io.flow.common.v0.models.UnitOfMeasurement]
      } yield Measurement(value, units)
    }

    def jsObjectMeasurement(obj: io.flow.common.v0.models.Measurement): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "value" -> play.api.libs.json.JsString(obj.value),
        "units" -> play.api.libs.json.JsString(obj.units.toString)
      )
    }

    implicit def jsonWritesCommonMeasurement: play.api.libs.json.Writes[Measurement] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Measurement] {
        def writes(obj: io.flow.common.v0.models.Measurement) = {
          jsObjectMeasurement(obj)
        }
      }
    }

    implicit def jsonReadsCommonMerchantOfRecordEntity: play.api.libs.json.Reads[MerchantOfRecordEntity] = {
      for {
        organization <- (__ \ "organization").read[io.flow.common.v0.models.OrganizationReference]
        name <- (__ \ "name").read[String]
        vat <- (__ \ "vat").read[io.flow.common.v0.models.MerchantOfRecordEntityRegistration]
        streets <- (__ \ "streets").read[Seq[String]]
        city <- (__ \ "city").read[String]
        province <- (__ \ "province").readNullable[String]
        postal <- (__ \ "postal").readNullable[String]
        country <- (__ \ "country").read[String]
        phone <- (__ \ "phone").readNullable[String]
        email <- (__ \ "email").readNullable[String]
      } yield MerchantOfRecordEntity(organization, name, vat, streets, city, province, postal, country, phone, email)
    }

    def jsObjectMerchantOfRecordEntity(obj: io.flow.common.v0.models.MerchantOfRecordEntity): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization" -> jsObjectOrganizationReference(obj.organization),
        "name" -> play.api.libs.json.JsString(obj.name),
        "vat" -> jsObjectMerchantOfRecordEntityRegistration(obj.vat),
        "streets" -> play.api.libs.json.Json.toJson(obj.streets),
        "city" -> play.api.libs.json.JsString(obj.city),
        "country" -> play.api.libs.json.JsString(obj.country)
      ) ++ (obj.province match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("province" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.postal match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("postal" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.phone match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("phone" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesCommonMerchantOfRecordEntity: play.api.libs.json.Writes[MerchantOfRecordEntity] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.MerchantOfRecordEntity] {
        def writes(obj: io.flow.common.v0.models.MerchantOfRecordEntity) = {
          jsObjectMerchantOfRecordEntity(obj)
        }
      }
    }

    implicit def jsonReadsCommonMerchantOfRecordEntityRegistration: play.api.libs.json.Reads[MerchantOfRecordEntityRegistration] = {
      for {
        number <- (__ \ "number").read[String]
        country <- (__ \ "country").read[String]
      } yield MerchantOfRecordEntityRegistration(number, country)
    }

    def jsObjectMerchantOfRecordEntityRegistration(obj: io.flow.common.v0.models.MerchantOfRecordEntityRegistration): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "number" -> play.api.libs.json.JsString(obj.number),
        "country" -> play.api.libs.json.JsString(obj.country)
      )
    }

    implicit def jsonWritesCommonMerchantOfRecordEntityRegistration: play.api.libs.json.Writes[MerchantOfRecordEntityRegistration] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.MerchantOfRecordEntityRegistration] {
        def writes(obj: io.flow.common.v0.models.MerchantOfRecordEntityRegistration) = {
          jsObjectMerchantOfRecordEntityRegistration(obj)
        }
      }
    }

    implicit def jsonReadsCommonMoney: play.api.libs.json.Reads[Money] = {
      for {
        amount <- (__ \ "amount").read[Double]
        currency <- (__ \ "currency").read[String]
      } yield Money(amount, currency)
    }

    def jsObjectMoney(obj: io.flow.common.v0.models.Money): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "amount" -> play.api.libs.json.JsNumber(obj.amount),
        "currency" -> play.api.libs.json.JsString(obj.currency)
      )
    }

    implicit def jsonWritesCommonMoney: play.api.libs.json.Writes[Money] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Money] {
        def writes(obj: io.flow.common.v0.models.Money) = {
          jsObjectMoney(obj)
        }
      }
    }

    implicit def jsonReadsCommonMoneyWithBase: play.api.libs.json.Reads[MoneyWithBase] = {
      for {
        currency <- (__ \ "currency").read[String]
        amount <- (__ \ "amount").read[Double]
        base <- (__ \ "base").read[io.flow.common.v0.models.Money]
      } yield MoneyWithBase(currency, amount, base)
    }

    def jsObjectMoneyWithBase(obj: io.flow.common.v0.models.MoneyWithBase): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "currency" -> play.api.libs.json.JsString(obj.currency),
        "amount" -> play.api.libs.json.JsNumber(obj.amount),
        "base" -> jsObjectMoney(obj.base)
      )
    }

    implicit def jsonWritesCommonMoneyWithBase: play.api.libs.json.Writes[MoneyWithBase] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.MoneyWithBase] {
        def writes(obj: io.flow.common.v0.models.MoneyWithBase) = {
          jsObjectMoneyWithBase(obj)
        }
      }
    }

    implicit def jsonReadsCommonMoneyWithOptionalBase: play.api.libs.json.Reads[MoneyWithOptionalBase] = {
      for {
        currency <- (__ \ "currency").read[String]
        amount <- (__ \ "amount").read[Double]
        base <- (__ \ "base").readNullable[io.flow.common.v0.models.Money]
      } yield MoneyWithOptionalBase(currency, amount, base)
    }

    def jsObjectMoneyWithOptionalBase(obj: io.flow.common.v0.models.MoneyWithOptionalBase): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "currency" -> play.api.libs.json.JsString(obj.currency),
        "amount" -> play.api.libs.json.JsNumber(obj.amount)
      ) ++ (obj.base match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("base" -> jsObjectMoney(x))
      })
    }

    implicit def jsonWritesCommonMoneyWithOptionalBase: play.api.libs.json.Writes[MoneyWithOptionalBase] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.MoneyWithOptionalBase] {
        def writes(obj: io.flow.common.v0.models.MoneyWithOptionalBase) = {
          jsObjectMoneyWithOptionalBase(obj)
        }
      }
    }

    implicit def jsonReadsCommonName: play.api.libs.json.Reads[Name] = {
      for {
        first <- (__ \ "first").readNullable[String]
        last <- (__ \ "last").readNullable[String]
      } yield Name(first, last)
    }

    def jsObjectName(obj: io.flow.common.v0.models.Name): play.api.libs.json.JsObject = {
      (obj.first match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("first" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.last match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("last" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesCommonName: play.api.libs.json.Writes[Name] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Name] {
        def writes(obj: io.flow.common.v0.models.Name) = {
          jsObjectName(obj)
        }
      }
    }

    implicit def jsonReadsCommonOrderCustomer: play.api.libs.json.Reads[OrderCustomer] = {
      for {
        name <- (__ \ "name").read[io.flow.common.v0.models.Name]
        number <- (__ \ "number").readNullable[String]
        phone <- (__ \ "phone").readNullable[String]
        email <- (__ \ "email").readNullable[String]
        address <- (__ \ "address").readNullable[io.flow.common.v0.models.BillingAddress]
        invoice <- (__ \ "invoice").readNullable[io.flow.common.v0.models.CustomerInvoice]
      } yield OrderCustomer(name, number, phone, email, address, invoice)
    }

    def jsObjectOrderCustomer(obj: io.flow.common.v0.models.OrderCustomer): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> jsObjectName(obj.name)
      ) ++ (obj.number match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("number" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.phone match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("phone" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.address match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("address" -> jsObjectBillingAddress(x))
      }) ++
      (obj.invoice match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("invoice" -> jsObjectCustomerInvoice(x))
      })
    }

    implicit def jsonWritesCommonOrderCustomer: play.api.libs.json.Writes[OrderCustomer] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.OrderCustomer] {
        def writes(obj: io.flow.common.v0.models.OrderCustomer) = {
          jsObjectOrderCustomer(obj)
        }
      }
    }

    implicit def jsonReadsCommonOrderCustomerForm: play.api.libs.json.Reads[OrderCustomerForm] = {
      for {
        name <- (__ \ "name").readNullable[io.flow.common.v0.models.Name]
        number <- (__ \ "number").readNullable[String]
        phone <- (__ \ "phone").readNullable[String]
        email <- (__ \ "email").readNullable[String]
        address <- (__ \ "address").readNullable[io.flow.common.v0.models.BillingAddress]
        invoice <- (__ \ "invoice").readNullable[io.flow.common.v0.models.CustomerInvoice]
      } yield OrderCustomerForm(name, number, phone, email, address, invoice)
    }

    def jsObjectOrderCustomerForm(obj: io.flow.common.v0.models.OrderCustomerForm): play.api.libs.json.JsObject = {
      (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> jsObjectName(x))
      }) ++
      (obj.number match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("number" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.phone match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("phone" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.address match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("address" -> jsObjectBillingAddress(x))
      }) ++
      (obj.invoice match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("invoice" -> jsObjectCustomerInvoice(x))
      })
    }

    implicit def jsonWritesCommonOrderCustomerForm: play.api.libs.json.Writes[OrderCustomerForm] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.OrderCustomerForm] {
        def writes(obj: io.flow.common.v0.models.OrderCustomerForm) = {
          jsObjectOrderCustomerForm(obj)
        }
      }
    }

    implicit def jsonReadsCommonOrganization: play.api.libs.json.Reads[Organization] = {
      for {
        id <- (__ \ "id").read[String]
        name <- (__ \ "name").read[String]
        environment <- (__ \ "environment").read[io.flow.common.v0.models.Environment]
        parent <- (__ \ "parent").readNullable[io.flow.common.v0.models.OrganizationReference]
        defaults <- (__ \ "defaults").readNullable[io.flow.common.v0.models.OrganizationDefaults]
        createdAt <- (__ \ "created_at").readNullable[_root_.org.joda.time.DateTime]
      } yield Organization(id, name, environment, parent, defaults, createdAt)
    }

    def jsObjectOrganization(obj: io.flow.common.v0.models.Organization): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> play.api.libs.json.JsString(obj.name),
        "environment" -> play.api.libs.json.JsString(obj.environment.toString)
      ) ++ (obj.parent match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("parent" -> jsObjectOrganizationReference(x))
      }) ++
      (obj.defaults match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("defaults" -> jsObjectOrganizationDefaults(x))
      }) ++
      (obj.createdAt match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("created_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x)))
      })
    }

    implicit def jsonReadsCommonOrganizationDefaults: play.api.libs.json.Reads[OrganizationDefaults] = {
      for {
        country <- (__ \ "country").read[String]
        baseCurrency <- (__ \ "base_currency").read[String]
        language <- (__ \ "language").read[String]
        locale <- (__ \ "locale").read[String]
        timezone <- (__ \ "timezone").read[String]
      } yield OrganizationDefaults(country, baseCurrency, language, locale, timezone)
    }

    def jsObjectOrganizationDefaults(obj: io.flow.common.v0.models.OrganizationDefaults): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "country" -> play.api.libs.json.JsString(obj.country),
        "base_currency" -> play.api.libs.json.JsString(obj.baseCurrency),
        "language" -> play.api.libs.json.JsString(obj.language),
        "locale" -> play.api.libs.json.JsString(obj.locale),
        "timezone" -> play.api.libs.json.JsString(obj.timezone)
      )
    }

    implicit def jsonWritesCommonOrganizationDefaults: play.api.libs.json.Writes[OrganizationDefaults] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.OrganizationDefaults] {
        def writes(obj: io.flow.common.v0.models.OrganizationDefaults) = {
          jsObjectOrganizationDefaults(obj)
        }
      }
    }

    implicit def jsonReadsCommonOrganizationReference: play.api.libs.json.Reads[OrganizationReference] = {
      (__ \ "id").read[String].map { x => new OrganizationReference(id = x) }
    }

    def jsObjectOrganizationReference(obj: io.flow.common.v0.models.OrganizationReference): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonReadsCommonOrganizationSummary: play.api.libs.json.Reads[OrganizationSummary] = {
      for {
        id <- (__ \ "id").read[String]
        name <- (__ \ "name").read[String]
      } yield OrganizationSummary(id, name)
    }

    def jsObjectOrganizationSummary(obj: io.flow.common.v0.models.OrganizationSummary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesCommonOrganizationSummary: play.api.libs.json.Writes[OrganizationSummary] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.OrganizationSummary] {
        def writes(obj: io.flow.common.v0.models.OrganizationSummary) = {
          jsObjectOrganizationSummary(obj)
        }
      }
    }

    implicit def jsonReadsCommonPartnerReference: play.api.libs.json.Reads[PartnerReference] = {
      (__ \ "id").read[String].map { x => new PartnerReference(id = x) }
    }

    def jsObjectPartnerReference(obj: io.flow.common.v0.models.PartnerReference): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonWritesCommonPartnerReference: play.api.libs.json.Writes[PartnerReference] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.PartnerReference] {
        def writes(obj: io.flow.common.v0.models.PartnerReference) = {
          jsObjectPartnerReference(obj)
        }
      }
    }

    implicit def jsonReadsCommonPrice: play.api.libs.json.Reads[Price] = {
      for {
        amount <- (__ \ "amount").read[Double]
        currency <- (__ \ "currency").read[String]
        label <- (__ \ "label").read[String]
      } yield Price(amount, currency, label)
    }

    def jsObjectPrice(obj: io.flow.common.v0.models.Price): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "amount" -> play.api.libs.json.JsNumber(obj.amount),
        "currency" -> play.api.libs.json.JsString(obj.currency),
        "label" -> play.api.libs.json.JsString(obj.label)
      )
    }

    implicit def jsonWritesCommonPrice: play.api.libs.json.Writes[Price] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Price] {
        def writes(obj: io.flow.common.v0.models.Price) = {
          jsObjectPrice(obj)
        }
      }
    }

    implicit def jsonReadsCommonPriceForm: play.api.libs.json.Reads[PriceForm] = {
      for {
        amount <- (__ \ "amount").read[Double]
        currency <- (__ \ "currency").read[String]
      } yield PriceForm(amount, currency)
    }

    def jsObjectPriceForm(obj: io.flow.common.v0.models.PriceForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "amount" -> play.api.libs.json.JsNumber(obj.amount),
        "currency" -> play.api.libs.json.JsString(obj.currency)
      )
    }

    implicit def jsonWritesCommonPriceForm: play.api.libs.json.Writes[PriceForm] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.PriceForm] {
        def writes(obj: io.flow.common.v0.models.PriceForm) = {
          jsObjectPriceForm(obj)
        }
      }
    }

    implicit def jsonReadsCommonPriceSourceCatalog: play.api.libs.json.Reads[PriceSourceCatalog] = {
      (__ \ "price").read[io.flow.common.v0.models.Money].map { x => new PriceSourceCatalog(price = x) }
    }

    def jsObjectPriceSourceCatalog(obj: io.flow.common.v0.models.PriceSourceCatalog): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "price" -> jsObjectMoney(obj.price)
      )
    }

    implicit def jsonReadsCommonPriceSourcePriceBook: play.api.libs.json.Reads[PriceSourcePriceBook] = {
      for {
        price <- (__ \ "price").read[io.flow.common.v0.models.Money]
        includes <- (__ \ "includes").read[io.flow.common.v0.models.IncludedLevies]
        priceBookReference <- (__ \ "price_book_reference").read[io.flow.common.v0.models.PriceSourcePriceBookReference]
      } yield PriceSourcePriceBook(price, includes, priceBookReference)
    }

    def jsObjectPriceSourcePriceBook(obj: io.flow.common.v0.models.PriceSourcePriceBook): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "price" -> jsObjectMoney(obj.price),
        "includes" -> jsObjectIncludedLevies(obj.includes),
        "price_book_reference" -> jsObjectPriceSourcePriceBookReference(obj.priceBookReference)
      )
    }

    implicit def jsonReadsCommonPriceSourcePriceBookReference: play.api.libs.json.Reads[PriceSourcePriceBookReference] = {
      for {
        id <- (__ \ "id").read[String]
        key <- (__ \ "key").read[String]
      } yield PriceSourcePriceBookReference(id, key)
    }

    def jsObjectPriceSourcePriceBookReference(obj: io.flow.common.v0.models.PriceSourcePriceBookReference): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "key" -> play.api.libs.json.JsString(obj.key)
      )
    }

    implicit def jsonWritesCommonPriceSourcePriceBookReference: play.api.libs.json.Writes[PriceSourcePriceBookReference] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.PriceSourcePriceBookReference] {
        def writes(obj: io.flow.common.v0.models.PriceSourcePriceBookReference) = {
          jsObjectPriceSourcePriceBookReference(obj)
        }
      }
    }

    implicit def jsonReadsCommonPriceSourceProvided: play.api.libs.json.Reads[PriceSourceProvided] = {
      (__ \ "price").read[io.flow.common.v0.models.Money].map { x => new PriceSourceProvided(price = x) }
    }

    def jsObjectPriceSourceProvided(obj: io.flow.common.v0.models.PriceSourceProvided): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "price" -> jsObjectMoney(obj.price)
      )
    }

    implicit def jsonReadsCommonPriceWithBase: play.api.libs.json.Reads[PriceWithBase] = {
      for {
        currency <- (__ \ "currency").read[String]
        amount <- (__ \ "amount").read[Double]
        label <- (__ \ "label").read[String]
        base <- (__ \ "base").readNullable[io.flow.common.v0.models.Price]
      } yield PriceWithBase(currency, amount, label, base)
    }

    def jsObjectPriceWithBase(obj: io.flow.common.v0.models.PriceWithBase): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "currency" -> play.api.libs.json.JsString(obj.currency),
        "amount" -> play.api.libs.json.JsNumber(obj.amount),
        "label" -> play.api.libs.json.JsString(obj.label)
      ) ++ (obj.base match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("base" -> jsObjectPrice(x))
      })
    }

    implicit def jsonWritesCommonPriceWithBase: play.api.libs.json.Writes[PriceWithBase] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.PriceWithBase] {
        def writes(obj: io.flow.common.v0.models.PriceWithBase) = {
          jsObjectPriceWithBase(obj)
        }
      }
    }

    implicit def jsonReadsCommonRounding: play.api.libs.json.Reads[Rounding] = {
      for {
        `type` <- (__ \ "type").read[io.flow.common.v0.models.RoundingType]
        method <- (__ \ "method").read[io.flow.common.v0.models.RoundingMethod]
        value <- (__ \ "value").read[BigDecimal]
      } yield Rounding(`type`, method, value)
    }

    def jsObjectRounding(obj: io.flow.common.v0.models.Rounding): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "method" -> play.api.libs.json.JsString(obj.method.toString),
        "value" -> play.api.libs.json.JsNumber(obj.value)
      )
    }

    implicit def jsonWritesCommonRounding: play.api.libs.json.Writes[Rounding] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Rounding] {
        def writes(obj: io.flow.common.v0.models.Rounding) = {
          jsObjectRounding(obj)
        }
      }
    }

    implicit def jsonReadsCommonSchedule: play.api.libs.json.Reads[Schedule] = {
      for {
        calendar <- (__ \ "calendar").readNullable[io.flow.common.v0.models.Calendar]
        holiday <- (__ \ "holiday").read[io.flow.common.v0.models.HolidayCalendar]
        exception <- (__ \ "exception").read[Seq[io.flow.common.v0.models.Exception]]
        cutoff <- (__ \ "cutoff").readNullable[String]
        minLeadTime <- (__ \ "min_lead_time").readNullable[Long]
        maxLeadTime <- (__ \ "max_lead_time").readNullable[Long]
      } yield Schedule(calendar, holiday, exception, cutoff, minLeadTime, maxLeadTime)
    }

    def jsObjectSchedule(obj: io.flow.common.v0.models.Schedule): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "holiday" -> play.api.libs.json.JsString(obj.holiday.toString),
        "exception" -> play.api.libs.json.Json.toJson(obj.exception)
      ) ++ (obj.calendar match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("calendar" -> play.api.libs.json.JsString(x.toString))
      }) ++
      (obj.cutoff match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("cutoff" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.minLeadTime match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("min_lead_time" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.maxLeadTime match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("max_lead_time" -> play.api.libs.json.JsNumber(x))
      })
    }

    implicit def jsonWritesCommonSchedule: play.api.libs.json.Writes[Schedule] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Schedule] {
        def writes(obj: io.flow.common.v0.models.Schedule) = {
          jsObjectSchedule(obj)
        }
      }
    }

    implicit def jsonReadsCommonUser: play.api.libs.json.Reads[User] = {
      for {
        id <- (__ \ "id").read[String]
        email <- (__ \ "email").readNullable[String]
        name <- (__ \ "name").read[io.flow.common.v0.models.Name]
        status <- (__ \ "status").read[io.flow.common.v0.models.UserStatus]
      } yield User(id, email, name, status)
    }

    def jsObjectUser(obj: io.flow.common.v0.models.User): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> jsObjectName(obj.name),
        "status" -> play.api.libs.json.JsString(obj.status.toString)
      ) ++ (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonReadsCommonUserReference: play.api.libs.json.Reads[UserReference] = {
      (__ \ "id").read[String].map { x => new UserReference(id = x) }
    }

    def jsObjectUserReference(obj: io.flow.common.v0.models.UserReference): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonReadsCommonZone: play.api.libs.json.Reads[Zone] = {
      for {
        postals <- (__ \ "postals").readNullable[Seq[String]]
        provinces <- (__ \ "provinces").readNullable[Seq[String]]
        country <- (__ \ "country").read[String]
      } yield Zone(postals, provinces, country)
    }

    def jsObjectZone(obj: io.flow.common.v0.models.Zone): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "country" -> play.api.libs.json.JsString(obj.country)
      ) ++ (obj.postals match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("postals" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.provinces match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("provinces" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesCommonZone: play.api.libs.json.Writes[Zone] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.Zone] {
        def writes(obj: io.flow.common.v0.models.Zone) = {
          jsObjectZone(obj)
        }
      }
    }

    implicit def jsonReadsCommonDiscountOffer: play.api.libs.json.Reads[DiscountOffer] = new play.api.libs.json.Reads[DiscountOffer] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[DiscountOffer] = {
        (js \ "discriminator").asOpt[String].getOrElse { sys.error("Union[DiscountOffer] requires a discriminator named 'discriminator' - this field was not found in the Json Value") } match {
          case "discount_offer_fixed" => js.validate[io.flow.common.v0.models.DiscountOfferFixed]
          case "discount_offer_percent" => js.validate[io.flow.common.v0.models.DiscountOfferPercent]
          case other => play.api.libs.json.JsSuccess(io.flow.common.v0.models.DiscountOfferUndefinedType(other))
        }
      }
    }

    def jsObjectDiscountOffer(obj: io.flow.common.v0.models.DiscountOffer): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.common.v0.models.DiscountOfferFixed => jsObjectDiscountOfferFixed(x) ++ play.api.libs.json.Json.obj("discriminator" -> "discount_offer_fixed")
        case x: io.flow.common.v0.models.DiscountOfferPercent => jsObjectDiscountOfferPercent(x) ++ play.api.libs.json.Json.obj("discriminator" -> "discount_offer_percent")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesCommonDiscountOffer: play.api.libs.json.Writes[DiscountOffer] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.DiscountOffer] {
        def writes(obj: io.flow.common.v0.models.DiscountOffer) = {
          jsObjectDiscountOffer(obj)
        }
      }
    }

    implicit def jsonReadsCommonExpandableOrganization: play.api.libs.json.Reads[ExpandableOrganization] = new play.api.libs.json.Reads[ExpandableOrganization] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[ExpandableOrganization] = {
        (js \ "discriminator").asOpt[String].getOrElse { sys.error("Union[ExpandableOrganization] requires a discriminator named 'discriminator' - this field was not found in the Json Value") } match {
          case "organization" => js.validate[io.flow.common.v0.models.Organization]
          case "organization_reference" => js.validate[io.flow.common.v0.models.OrganizationReference]
          case other => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ExpandableOrganizationUndefinedType(other))
        }
      }
    }

    def jsObjectExpandableOrganization(obj: io.flow.common.v0.models.ExpandableOrganization): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.common.v0.models.Organization => jsObjectOrganization(x) ++ play.api.libs.json.Json.obj("discriminator" -> "organization")
        case x: io.flow.common.v0.models.OrganizationReference => jsObjectOrganizationReference(x) ++ play.api.libs.json.Json.obj("discriminator" -> "organization_reference")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesCommonExpandableOrganization: play.api.libs.json.Writes[ExpandableOrganization] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ExpandableOrganization] {
        def writes(obj: io.flow.common.v0.models.ExpandableOrganization) = {
          jsObjectExpandableOrganization(obj)
        }
      }
    }

    implicit def jsonReadsCommonExpandableUser: play.api.libs.json.Reads[ExpandableUser] = new play.api.libs.json.Reads[ExpandableUser] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[ExpandableUser] = {
        (js \ "discriminator").asOpt[String].getOrElse { sys.error("Union[ExpandableUser] requires a discriminator named 'discriminator' - this field was not found in the Json Value") } match {
          case "user" => js.validate[io.flow.common.v0.models.User]
          case "user_reference" => js.validate[io.flow.common.v0.models.UserReference]
          case other => play.api.libs.json.JsSuccess(io.flow.common.v0.models.ExpandableUserUndefinedType(other))
        }
      }
    }

    def jsObjectExpandableUser(obj: io.flow.common.v0.models.ExpandableUser): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.common.v0.models.User => jsObjectUser(x) ++ play.api.libs.json.Json.obj("discriminator" -> "user")
        case x: io.flow.common.v0.models.UserReference => jsObjectUserReference(x) ++ play.api.libs.json.Json.obj("discriminator" -> "user_reference")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesCommonExpandableUser: play.api.libs.json.Writes[ExpandableUser] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.ExpandableUser] {
        def writes(obj: io.flow.common.v0.models.ExpandableUser) = {
          jsObjectExpandableUser(obj)
        }
      }
    }

    implicit def jsonReadsCommonInputSpecificationLimitation: play.api.libs.json.Reads[InputSpecificationLimitation] = new play.api.libs.json.Reads[InputSpecificationLimitation] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[InputSpecificationLimitation] = {
        (js \ "discriminator").asOpt[String].getOrElse { sys.error("Union[InputSpecificationLimitation] requires a discriminator named 'discriminator' - this field was not found in the Json Value") } match {
          case "input_specification_limitation_max" => js.validate[io.flow.common.v0.models.InputSpecificationLimitationMax]
          case other => play.api.libs.json.JsSuccess(io.flow.common.v0.models.InputSpecificationLimitationUndefinedType(other))
        }
      }
    }

    def jsObjectInputSpecificationLimitation(obj: io.flow.common.v0.models.InputSpecificationLimitation): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.common.v0.models.InputSpecificationLimitationMax => jsObjectInputSpecificationLimitationMax(x) ++ play.api.libs.json.Json.obj("discriminator" -> "input_specification_limitation_max")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesCommonInputSpecificationLimitation: play.api.libs.json.Writes[InputSpecificationLimitation] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.InputSpecificationLimitation] {
        def writes(obj: io.flow.common.v0.models.InputSpecificationLimitation) = {
          jsObjectInputSpecificationLimitation(obj)
        }
      }
    }

    implicit def jsonReadsCommonPriceSource: play.api.libs.json.Reads[PriceSource] = new play.api.libs.json.Reads[PriceSource] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[PriceSource] = {
        (js \ "discriminator").asOpt[String].getOrElse { sys.error("Union[PriceSource] requires a discriminator named 'discriminator' - this field was not found in the Json Value") } match {
          case "price_book" => js.validate[io.flow.common.v0.models.PriceSourcePriceBook]
          case "catalog" => js.validate[io.flow.common.v0.models.PriceSourceCatalog]
          case "provided" => js.validate[io.flow.common.v0.models.PriceSourceProvided]
          case other => play.api.libs.json.JsSuccess(io.flow.common.v0.models.PriceSourceUndefinedType(other))
        }
      }
    }

    def jsObjectPriceSource(obj: io.flow.common.v0.models.PriceSource): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.common.v0.models.PriceSourcePriceBook => jsObjectPriceSourcePriceBook(x) ++ play.api.libs.json.Json.obj("discriminator" -> "price_book")
        case x: io.flow.common.v0.models.PriceSourceCatalog => jsObjectPriceSourceCatalog(x) ++ play.api.libs.json.Json.obj("discriminator" -> "catalog")
        case x: io.flow.common.v0.models.PriceSourceProvided => jsObjectPriceSourceProvided(x) ++ play.api.libs.json.Json.obj("discriminator" -> "provided")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesCommonPriceSource: play.api.libs.json.Writes[PriceSource] = {
      new play.api.libs.json.Writes[io.flow.common.v0.models.PriceSource] {
        def writes(obj: io.flow.common.v0.models.PriceSource) = {
          jsObjectPriceSource(obj)
        }
      }
    }
  }
}

package io.flow.common.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._
    import Models._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    object Models {
      import io.flow.common.v0.models._

      val attributeDataTypeConverter: ApibuilderTypeConverter[io.flow.common.v0.models.AttributeDataType] = new ApibuilderTypeConverter[io.flow.common.v0.models.AttributeDataType] {
        override def convert(value: String): io.flow.common.v0.models.AttributeDataType = io.flow.common.v0.models.AttributeDataType(value)
        override def convert(value: io.flow.common.v0.models.AttributeDataType): String = value.toString
        override def example: io.flow.common.v0.models.AttributeDataType = io.flow.common.v0.models.AttributeDataType.Boolean
        override def validValues: Seq[io.flow.common.v0.models.AttributeDataType] = io.flow.common.v0.models.AttributeDataType.all
      }
      implicit def pathBindableAttributeDataType(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.AttributeDataType] = ApibuilderPathBindable(attributeDataTypeConverter)
      implicit def queryStringBindableAttributeDataType(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.AttributeDataType] = ApibuilderQueryStringBindable(attributeDataTypeConverter)

      val availabilityStatusConverter: ApibuilderTypeConverter[io.flow.common.v0.models.AvailabilityStatus] = new ApibuilderTypeConverter[io.flow.common.v0.models.AvailabilityStatus] {
        override def convert(value: String): io.flow.common.v0.models.AvailabilityStatus = io.flow.common.v0.models.AvailabilityStatus(value)
        override def convert(value: io.flow.common.v0.models.AvailabilityStatus): String = value.toString
        override def example: io.flow.common.v0.models.AvailabilityStatus = io.flow.common.v0.models.AvailabilityStatus.Enabled
        override def validValues: Seq[io.flow.common.v0.models.AvailabilityStatus] = io.flow.common.v0.models.AvailabilityStatus.all
      }
      implicit def pathBindableAvailabilityStatus(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.AvailabilityStatus] = ApibuilderPathBindable(availabilityStatusConverter)
      implicit def queryStringBindableAvailabilityStatus(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.AvailabilityStatus] = ApibuilderQueryStringBindable(availabilityStatusConverter)

      val calendarConverter: ApibuilderTypeConverter[io.flow.common.v0.models.Calendar] = new ApibuilderTypeConverter[io.flow.common.v0.models.Calendar] {
        override def convert(value: String): io.flow.common.v0.models.Calendar = io.flow.common.v0.models.Calendar(value)
        override def convert(value: io.flow.common.v0.models.Calendar): String = value.toString
        override def example: io.flow.common.v0.models.Calendar = io.flow.common.v0.models.Calendar.Weekdays
        override def validValues: Seq[io.flow.common.v0.models.Calendar] = io.flow.common.v0.models.Calendar.all
      }
      implicit def pathBindableCalendar(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.Calendar] = ApibuilderPathBindable(calendarConverter)
      implicit def queryStringBindableCalendar(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.Calendar] = ApibuilderQueryStringBindable(calendarConverter)

      val capabilityConverter: ApibuilderTypeConverter[io.flow.common.v0.models.Capability] = new ApibuilderTypeConverter[io.flow.common.v0.models.Capability] {
        override def convert(value: String): io.flow.common.v0.models.Capability = io.flow.common.v0.models.Capability(value)
        override def convert(value: io.flow.common.v0.models.Capability): String = value.toString
        override def example: io.flow.common.v0.models.Capability = io.flow.common.v0.models.Capability.Crossdock
        override def validValues: Seq[io.flow.common.v0.models.Capability] = io.flow.common.v0.models.Capability.all
      }
      implicit def pathBindableCapability(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.Capability] = ApibuilderPathBindable(capabilityConverter)
      implicit def queryStringBindableCapability(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.Capability] = ApibuilderQueryStringBindable(capabilityConverter)

      val changeTypeConverter: ApibuilderTypeConverter[io.flow.common.v0.models.ChangeType] = new ApibuilderTypeConverter[io.flow.common.v0.models.ChangeType] {
        override def convert(value: String): io.flow.common.v0.models.ChangeType = io.flow.common.v0.models.ChangeType(value)
        override def convert(value: io.flow.common.v0.models.ChangeType): String = value.toString
        override def example: io.flow.common.v0.models.ChangeType = io.flow.common.v0.models.ChangeType.Insert
        override def validValues: Seq[io.flow.common.v0.models.ChangeType] = io.flow.common.v0.models.ChangeType.all
      }
      implicit def pathBindableChangeType(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.ChangeType] = ApibuilderPathBindable(changeTypeConverter)
      implicit def queryStringBindableChangeType(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.ChangeType] = ApibuilderQueryStringBindable(changeTypeConverter)

      val currencyLabelFormatterConverter: ApibuilderTypeConverter[io.flow.common.v0.models.CurrencyLabelFormatter] = new ApibuilderTypeConverter[io.flow.common.v0.models.CurrencyLabelFormatter] {
        override def convert(value: String): io.flow.common.v0.models.CurrencyLabelFormatter = io.flow.common.v0.models.CurrencyLabelFormatter(value)
        override def convert(value: io.flow.common.v0.models.CurrencyLabelFormatter): String = value.toString
        override def example: io.flow.common.v0.models.CurrencyLabelFormatter = io.flow.common.v0.models.CurrencyLabelFormatter.StripTrailingZeros
        override def validValues: Seq[io.flow.common.v0.models.CurrencyLabelFormatter] = io.flow.common.v0.models.CurrencyLabelFormatter.all
      }
      implicit def pathBindableCurrencyLabelFormatter(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.CurrencyLabelFormatter] = ApibuilderPathBindable(currencyLabelFormatterConverter)
      implicit def queryStringBindableCurrencyLabelFormatter(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.CurrencyLabelFormatter] = ApibuilderQueryStringBindable(currencyLabelFormatterConverter)

      val currencySymbolFormatConverter: ApibuilderTypeConverter[io.flow.common.v0.models.CurrencySymbolFormat] = new ApibuilderTypeConverter[io.flow.common.v0.models.CurrencySymbolFormat] {
        override def convert(value: String): io.flow.common.v0.models.CurrencySymbolFormat = io.flow.common.v0.models.CurrencySymbolFormat(value)
        override def convert(value: io.flow.common.v0.models.CurrencySymbolFormat): String = value.toString
        override def example: io.flow.common.v0.models.CurrencySymbolFormat = io.flow.common.v0.models.CurrencySymbolFormat.Narrow
        override def validValues: Seq[io.flow.common.v0.models.CurrencySymbolFormat] = io.flow.common.v0.models.CurrencySymbolFormat.all
      }
      implicit def pathBindableCurrencySymbolFormat(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.CurrencySymbolFormat] = ApibuilderPathBindable(currencySymbolFormatConverter)
      implicit def queryStringBindableCurrencySymbolFormat(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.CurrencySymbolFormat] = ApibuilderQueryStringBindable(currencySymbolFormatConverter)

      val dayOfWeekConverter: ApibuilderTypeConverter[io.flow.common.v0.models.DayOfWeek] = new ApibuilderTypeConverter[io.flow.common.v0.models.DayOfWeek] {
        override def convert(value: String): io.flow.common.v0.models.DayOfWeek = io.flow.common.v0.models.DayOfWeek(value)
        override def convert(value: io.flow.common.v0.models.DayOfWeek): String = value.toString
        override def example: io.flow.common.v0.models.DayOfWeek = io.flow.common.v0.models.DayOfWeek.Sunday
        override def validValues: Seq[io.flow.common.v0.models.DayOfWeek] = io.flow.common.v0.models.DayOfWeek.all
      }
      implicit def pathBindableDayOfWeek(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.DayOfWeek] = ApibuilderPathBindable(dayOfWeekConverter)
      implicit def queryStringBindableDayOfWeek(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.DayOfWeek] = ApibuilderQueryStringBindable(dayOfWeekConverter)

      val deliveredDutyConverter: ApibuilderTypeConverter[io.flow.common.v0.models.DeliveredDuty] = new ApibuilderTypeConverter[io.flow.common.v0.models.DeliveredDuty] {
        override def convert(value: String): io.flow.common.v0.models.DeliveredDuty = io.flow.common.v0.models.DeliveredDuty(value)
        override def convert(value: io.flow.common.v0.models.DeliveredDuty): String = value.toString
        override def example: io.flow.common.v0.models.DeliveredDuty = io.flow.common.v0.models.DeliveredDuty.Paid
        override def validValues: Seq[io.flow.common.v0.models.DeliveredDuty] = io.flow.common.v0.models.DeliveredDuty.all
      }
      implicit def pathBindableDeliveredDuty(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.DeliveredDuty] = ApibuilderPathBindable(deliveredDutyConverter)
      implicit def queryStringBindableDeliveredDuty(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.DeliveredDuty] = ApibuilderQueryStringBindable(deliveredDutyConverter)

      val discountTargetConverter: ApibuilderTypeConverter[io.flow.common.v0.models.DiscountTarget] = new ApibuilderTypeConverter[io.flow.common.v0.models.DiscountTarget] {
        override def convert(value: String): io.flow.common.v0.models.DiscountTarget = io.flow.common.v0.models.DiscountTarget(value)
        override def convert(value: io.flow.common.v0.models.DiscountTarget): String = value.toString
        override def example: io.flow.common.v0.models.DiscountTarget = io.flow.common.v0.models.DiscountTarget.Item
        override def validValues: Seq[io.flow.common.v0.models.DiscountTarget] = io.flow.common.v0.models.DiscountTarget.all
      }
      implicit def pathBindableDiscountTarget(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.DiscountTarget] = ApibuilderPathBindable(discountTargetConverter)
      implicit def queryStringBindableDiscountTarget(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.DiscountTarget] = ApibuilderQueryStringBindable(discountTargetConverter)

      val environmentConverter: ApibuilderTypeConverter[io.flow.common.v0.models.Environment] = new ApibuilderTypeConverter[io.flow.common.v0.models.Environment] {
        override def convert(value: String): io.flow.common.v0.models.Environment = io.flow.common.v0.models.Environment(value)
        override def convert(value: io.flow.common.v0.models.Environment): String = value.toString
        override def example: io.flow.common.v0.models.Environment = io.flow.common.v0.models.Environment.Sandbox
        override def validValues: Seq[io.flow.common.v0.models.Environment] = io.flow.common.v0.models.Environment.all
      }
      implicit def pathBindableEnvironment(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.Environment] = ApibuilderPathBindable(environmentConverter)
      implicit def queryStringBindableEnvironment(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.Environment] = ApibuilderQueryStringBindable(environmentConverter)

      val exceptionTypeConverter: ApibuilderTypeConverter[io.flow.common.v0.models.ExceptionType] = new ApibuilderTypeConverter[io.flow.common.v0.models.ExceptionType] {
        override def convert(value: String): io.flow.common.v0.models.ExceptionType = io.flow.common.v0.models.ExceptionType(value)
        override def convert(value: io.flow.common.v0.models.ExceptionType): String = value.toString
        override def example: io.flow.common.v0.models.ExceptionType = io.flow.common.v0.models.ExceptionType.Open
        override def validValues: Seq[io.flow.common.v0.models.ExceptionType] = io.flow.common.v0.models.ExceptionType.all
      }
      implicit def pathBindableExceptionType(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.ExceptionType] = ApibuilderPathBindable(exceptionTypeConverter)
      implicit def queryStringBindableExceptionType(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.ExceptionType] = ApibuilderQueryStringBindable(exceptionTypeConverter)

      val holidayCalendarConverter: ApibuilderTypeConverter[io.flow.common.v0.models.HolidayCalendar] = new ApibuilderTypeConverter[io.flow.common.v0.models.HolidayCalendar] {
        override def convert(value: String): io.flow.common.v0.models.HolidayCalendar = io.flow.common.v0.models.HolidayCalendar(value)
        override def convert(value: io.flow.common.v0.models.HolidayCalendar): String = value.toString
        override def example: io.flow.common.v0.models.HolidayCalendar = io.flow.common.v0.models.HolidayCalendar.UsBankHolidays
        override def validValues: Seq[io.flow.common.v0.models.HolidayCalendar] = io.flow.common.v0.models.HolidayCalendar.all
      }
      implicit def pathBindableHolidayCalendar(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.HolidayCalendar] = ApibuilderPathBindable(holidayCalendarConverter)
      implicit def queryStringBindableHolidayCalendar(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.HolidayCalendar] = ApibuilderQueryStringBindable(holidayCalendarConverter)

      val includedLevyKeyConverter: ApibuilderTypeConverter[io.flow.common.v0.models.IncludedLevyKey] = new ApibuilderTypeConverter[io.flow.common.v0.models.IncludedLevyKey] {
        override def convert(value: String): io.flow.common.v0.models.IncludedLevyKey = io.flow.common.v0.models.IncludedLevyKey(value)
        override def convert(value: io.flow.common.v0.models.IncludedLevyKey): String = value.toString
        override def example: io.flow.common.v0.models.IncludedLevyKey = io.flow.common.v0.models.IncludedLevyKey.Duty
        override def validValues: Seq[io.flow.common.v0.models.IncludedLevyKey] = io.flow.common.v0.models.IncludedLevyKey.all
      }
      implicit def pathBindableIncludedLevyKey(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.IncludedLevyKey] = ApibuilderPathBindable(includedLevyKeyConverter)
      implicit def queryStringBindableIncludedLevyKey(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.IncludedLevyKey] = ApibuilderQueryStringBindable(includedLevyKeyConverter)

      val incotermConverter: ApibuilderTypeConverter[io.flow.common.v0.models.Incoterm] = new ApibuilderTypeConverter[io.flow.common.v0.models.Incoterm] {
        override def convert(value: String): io.flow.common.v0.models.Incoterm = io.flow.common.v0.models.Incoterm(value)
        override def convert(value: io.flow.common.v0.models.Incoterm): String = value.toString
        override def example: io.flow.common.v0.models.Incoterm = io.flow.common.v0.models.Incoterm.Exw
        override def validValues: Seq[io.flow.common.v0.models.Incoterm] = io.flow.common.v0.models.Incoterm.all
      }
      implicit def pathBindableIncoterm(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.Incoterm] = ApibuilderPathBindable(incotermConverter)
      implicit def queryStringBindableIncoterm(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.Incoterm] = ApibuilderQueryStringBindable(incotermConverter)

      val inputSpecificationTypeConverter: ApibuilderTypeConverter[io.flow.common.v0.models.InputSpecificationType] = new ApibuilderTypeConverter[io.flow.common.v0.models.InputSpecificationType] {
        override def convert(value: String): io.flow.common.v0.models.InputSpecificationType = io.flow.common.v0.models.InputSpecificationType(value)
        override def convert(value: io.flow.common.v0.models.InputSpecificationType): String = value.toString
        override def example: io.flow.common.v0.models.InputSpecificationType = io.flow.common.v0.models.InputSpecificationType.Text
        override def validValues: Seq[io.flow.common.v0.models.InputSpecificationType] = io.flow.common.v0.models.InputSpecificationType.all
      }
      implicit def pathBindableInputSpecificationType(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.InputSpecificationType] = ApibuilderPathBindable(inputSpecificationTypeConverter)
      implicit def queryStringBindableInputSpecificationType(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.InputSpecificationType] = ApibuilderQueryStringBindable(inputSpecificationTypeConverter)

      val marginTypeConverter: ApibuilderTypeConverter[io.flow.common.v0.models.MarginType] = new ApibuilderTypeConverter[io.flow.common.v0.models.MarginType] {
        override def convert(value: String): io.flow.common.v0.models.MarginType = io.flow.common.v0.models.MarginType(value)
        override def convert(value: io.flow.common.v0.models.MarginType): String = value.toString
        override def example: io.flow.common.v0.models.MarginType = io.flow.common.v0.models.MarginType.Fixed
        override def validValues: Seq[io.flow.common.v0.models.MarginType] = io.flow.common.v0.models.MarginType.all
      }
      implicit def pathBindableMarginType(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.MarginType] = ApibuilderPathBindable(marginTypeConverter)
      implicit def queryStringBindableMarginType(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.MarginType] = ApibuilderQueryStringBindable(marginTypeConverter)

      val measurementSystemConverter: ApibuilderTypeConverter[io.flow.common.v0.models.MeasurementSystem] = new ApibuilderTypeConverter[io.flow.common.v0.models.MeasurementSystem] {
        override def convert(value: String): io.flow.common.v0.models.MeasurementSystem = io.flow.common.v0.models.MeasurementSystem(value)
        override def convert(value: io.flow.common.v0.models.MeasurementSystem): String = value.toString
        override def example: io.flow.common.v0.models.MeasurementSystem = io.flow.common.v0.models.MeasurementSystem.Imperial
        override def validValues: Seq[io.flow.common.v0.models.MeasurementSystem] = io.flow.common.v0.models.MeasurementSystem.all
      }
      implicit def pathBindableMeasurementSystem(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.MeasurementSystem] = ApibuilderPathBindable(measurementSystemConverter)
      implicit def queryStringBindableMeasurementSystem(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.MeasurementSystem] = ApibuilderQueryStringBindable(measurementSystemConverter)

      val merchantOfRecordConverter: ApibuilderTypeConverter[io.flow.common.v0.models.MerchantOfRecord] = new ApibuilderTypeConverter[io.flow.common.v0.models.MerchantOfRecord] {
        override def convert(value: String): io.flow.common.v0.models.MerchantOfRecord = io.flow.common.v0.models.MerchantOfRecord(value)
        override def convert(value: io.flow.common.v0.models.MerchantOfRecord): String = value.toString
        override def example: io.flow.common.v0.models.MerchantOfRecord = io.flow.common.v0.models.MerchantOfRecord.Flow
        override def validValues: Seq[io.flow.common.v0.models.MerchantOfRecord] = io.flow.common.v0.models.MerchantOfRecord.all
      }
      implicit def pathBindableMerchantOfRecord(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.MerchantOfRecord] = ApibuilderPathBindable(merchantOfRecordConverter)
      implicit def queryStringBindableMerchantOfRecord(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.MerchantOfRecord] = ApibuilderQueryStringBindable(merchantOfRecordConverter)

      val orderMerchantOfRecordConverter: ApibuilderTypeConverter[io.flow.common.v0.models.OrderMerchantOfRecord] = new ApibuilderTypeConverter[io.flow.common.v0.models.OrderMerchantOfRecord] {
        override def convert(value: String): io.flow.common.v0.models.OrderMerchantOfRecord = io.flow.common.v0.models.OrderMerchantOfRecord(value)
        override def convert(value: io.flow.common.v0.models.OrderMerchantOfRecord): String = value.toString
        override def example: io.flow.common.v0.models.OrderMerchantOfRecord = io.flow.common.v0.models.OrderMerchantOfRecord.Flow
        override def validValues: Seq[io.flow.common.v0.models.OrderMerchantOfRecord] = io.flow.common.v0.models.OrderMerchantOfRecord.all
      }
      implicit def pathBindableOrderMerchantOfRecord(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.OrderMerchantOfRecord] = ApibuilderPathBindable(orderMerchantOfRecordConverter)
      implicit def queryStringBindableOrderMerchantOfRecord(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.OrderMerchantOfRecord] = ApibuilderQueryStringBindable(orderMerchantOfRecordConverter)

      val priceBookStatusConverter: ApibuilderTypeConverter[io.flow.common.v0.models.PriceBookStatus] = new ApibuilderTypeConverter[io.flow.common.v0.models.PriceBookStatus] {
        override def convert(value: String): io.flow.common.v0.models.PriceBookStatus = io.flow.common.v0.models.PriceBookStatus(value)
        override def convert(value: io.flow.common.v0.models.PriceBookStatus): String = value.toString
        override def example: io.flow.common.v0.models.PriceBookStatus = io.flow.common.v0.models.PriceBookStatus.Draft
        override def validValues: Seq[io.flow.common.v0.models.PriceBookStatus] = io.flow.common.v0.models.PriceBookStatus.all
      }
      implicit def pathBindablePriceBookStatus(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.PriceBookStatus] = ApibuilderPathBindable(priceBookStatusConverter)
      implicit def queryStringBindablePriceBookStatus(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.PriceBookStatus] = ApibuilderQueryStringBindable(priceBookStatusConverter)

      val roleConverter: ApibuilderTypeConverter[io.flow.common.v0.models.Role] = new ApibuilderTypeConverter[io.flow.common.v0.models.Role] {
        override def convert(value: String): io.flow.common.v0.models.Role = io.flow.common.v0.models.Role(value)
        override def convert(value: io.flow.common.v0.models.Role): String = value.toString
        override def example: io.flow.common.v0.models.Role = io.flow.common.v0.models.Role.Admin
        override def validValues: Seq[io.flow.common.v0.models.Role] = io.flow.common.v0.models.Role.all
      }
      implicit def pathBindableRole(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.Role] = ApibuilderPathBindable(roleConverter)
      implicit def queryStringBindableRole(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.Role] = ApibuilderQueryStringBindable(roleConverter)

      val roundingMethodConverter: ApibuilderTypeConverter[io.flow.common.v0.models.RoundingMethod] = new ApibuilderTypeConverter[io.flow.common.v0.models.RoundingMethod] {
        override def convert(value: String): io.flow.common.v0.models.RoundingMethod = io.flow.common.v0.models.RoundingMethod(value)
        override def convert(value: io.flow.common.v0.models.RoundingMethod): String = value.toString
        override def example: io.flow.common.v0.models.RoundingMethod = io.flow.common.v0.models.RoundingMethod.Up
        override def validValues: Seq[io.flow.common.v0.models.RoundingMethod] = io.flow.common.v0.models.RoundingMethod.all
      }
      implicit def pathBindableRoundingMethod(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.RoundingMethod] = ApibuilderPathBindable(roundingMethodConverter)
      implicit def queryStringBindableRoundingMethod(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.RoundingMethod] = ApibuilderQueryStringBindable(roundingMethodConverter)

      val roundingTypeConverter: ApibuilderTypeConverter[io.flow.common.v0.models.RoundingType] = new ApibuilderTypeConverter[io.flow.common.v0.models.RoundingType] {
        override def convert(value: String): io.flow.common.v0.models.RoundingType = io.flow.common.v0.models.RoundingType(value)
        override def convert(value: io.flow.common.v0.models.RoundingType): String = value.toString
        override def example: io.flow.common.v0.models.RoundingType = io.flow.common.v0.models.RoundingType.Pattern
        override def validValues: Seq[io.flow.common.v0.models.RoundingType] = io.flow.common.v0.models.RoundingType.all
      }
      implicit def pathBindableRoundingType(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.RoundingType] = ApibuilderPathBindable(roundingTypeConverter)
      implicit def queryStringBindableRoundingType(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.RoundingType] = ApibuilderQueryStringBindable(roundingTypeConverter)

      val scheduleExceptionStatusConverter: ApibuilderTypeConverter[io.flow.common.v0.models.ScheduleExceptionStatus] = new ApibuilderTypeConverter[io.flow.common.v0.models.ScheduleExceptionStatus] {
        override def convert(value: String): io.flow.common.v0.models.ScheduleExceptionStatus = io.flow.common.v0.models.ScheduleExceptionStatus(value)
        override def convert(value: io.flow.common.v0.models.ScheduleExceptionStatus): String = value.toString
        override def example: io.flow.common.v0.models.ScheduleExceptionStatus = io.flow.common.v0.models.ScheduleExceptionStatus.Open
        override def validValues: Seq[io.flow.common.v0.models.ScheduleExceptionStatus] = io.flow.common.v0.models.ScheduleExceptionStatus.all
      }
      implicit def pathBindableScheduleExceptionStatus(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.ScheduleExceptionStatus] = ApibuilderPathBindable(scheduleExceptionStatusConverter)
      implicit def queryStringBindableScheduleExceptionStatus(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.ScheduleExceptionStatus] = ApibuilderQueryStringBindable(scheduleExceptionStatusConverter)

      val sortDirectionConverter: ApibuilderTypeConverter[io.flow.common.v0.models.SortDirection] = new ApibuilderTypeConverter[io.flow.common.v0.models.SortDirection] {
        override def convert(value: String): io.flow.common.v0.models.SortDirection = io.flow.common.v0.models.SortDirection(value)
        override def convert(value: io.flow.common.v0.models.SortDirection): String = value.toString
        override def example: io.flow.common.v0.models.SortDirection = io.flow.common.v0.models.SortDirection.Ascending
        override def validValues: Seq[io.flow.common.v0.models.SortDirection] = io.flow.common.v0.models.SortDirection.all
      }
      implicit def pathBindableSortDirection(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.SortDirection] = ApibuilderPathBindable(sortDirectionConverter)
      implicit def queryStringBindableSortDirection(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.SortDirection] = ApibuilderQueryStringBindable(sortDirectionConverter)

      val unitOfMeasurementConverter: ApibuilderTypeConverter[io.flow.common.v0.models.UnitOfMeasurement] = new ApibuilderTypeConverter[io.flow.common.v0.models.UnitOfMeasurement] {
        override def convert(value: String): io.flow.common.v0.models.UnitOfMeasurement = io.flow.common.v0.models.UnitOfMeasurement(value)
        override def convert(value: io.flow.common.v0.models.UnitOfMeasurement): String = value.toString
        override def example: io.flow.common.v0.models.UnitOfMeasurement = io.flow.common.v0.models.UnitOfMeasurement.Millimeter
        override def validValues: Seq[io.flow.common.v0.models.UnitOfMeasurement] = io.flow.common.v0.models.UnitOfMeasurement.all
      }
      implicit def pathBindableUnitOfMeasurement(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.UnitOfMeasurement] = ApibuilderPathBindable(unitOfMeasurementConverter)
      implicit def queryStringBindableUnitOfMeasurement(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.UnitOfMeasurement] = ApibuilderQueryStringBindable(unitOfMeasurementConverter)

      val unitOfTimeConverter: ApibuilderTypeConverter[io.flow.common.v0.models.UnitOfTime] = new ApibuilderTypeConverter[io.flow.common.v0.models.UnitOfTime] {
        override def convert(value: String): io.flow.common.v0.models.UnitOfTime = io.flow.common.v0.models.UnitOfTime(value)
        override def convert(value: io.flow.common.v0.models.UnitOfTime): String = value.toString
        override def example: io.flow.common.v0.models.UnitOfTime = io.flow.common.v0.models.UnitOfTime.Year
        override def validValues: Seq[io.flow.common.v0.models.UnitOfTime] = io.flow.common.v0.models.UnitOfTime.all
      }
      implicit def pathBindableUnitOfTime(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.UnitOfTime] = ApibuilderPathBindable(unitOfTimeConverter)
      implicit def queryStringBindableUnitOfTime(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.UnitOfTime] = ApibuilderQueryStringBindable(unitOfTimeConverter)

      val userStatusConverter: ApibuilderTypeConverter[io.flow.common.v0.models.UserStatus] = new ApibuilderTypeConverter[io.flow.common.v0.models.UserStatus] {
        override def convert(value: String): io.flow.common.v0.models.UserStatus = io.flow.common.v0.models.UserStatus(value)
        override def convert(value: io.flow.common.v0.models.UserStatus): String = value.toString
        override def example: io.flow.common.v0.models.UserStatus = io.flow.common.v0.models.UserStatus.Pending
        override def validValues: Seq[io.flow.common.v0.models.UserStatus] = io.flow.common.v0.models.UserStatus.all
      }
      implicit def pathBindableUserStatus(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.UserStatus] = ApibuilderPathBindable(userStatusConverter)
      implicit def queryStringBindableUserStatus(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.UserStatus] = ApibuilderQueryStringBindable(userStatusConverter)

      val valueAddedServiceConverter: ApibuilderTypeConverter[io.flow.common.v0.models.ValueAddedService] = new ApibuilderTypeConverter[io.flow.common.v0.models.ValueAddedService] {
        override def convert(value: String): io.flow.common.v0.models.ValueAddedService = io.flow.common.v0.models.ValueAddedService(value)
        override def convert(value: io.flow.common.v0.models.ValueAddedService): String = value.toString
        override def example: io.flow.common.v0.models.ValueAddedService = io.flow.common.v0.models.ValueAddedService.HazardousMaterial
        override def validValues: Seq[io.flow.common.v0.models.ValueAddedService] = io.flow.common.v0.models.ValueAddedService.all
      }
      implicit def pathBindableValueAddedService(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.ValueAddedService] = ApibuilderPathBindable(valueAddedServiceConverter)
      implicit def queryStringBindableValueAddedService(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.ValueAddedService] = ApibuilderQueryStringBindable(valueAddedServiceConverter)

      val visibilityConverter: ApibuilderTypeConverter[io.flow.common.v0.models.Visibility] = new ApibuilderTypeConverter[io.flow.common.v0.models.Visibility] {
        override def convert(value: String): io.flow.common.v0.models.Visibility = io.flow.common.v0.models.Visibility(value)
        override def convert(value: io.flow.common.v0.models.Visibility): String = value.toString
        override def example: io.flow.common.v0.models.Visibility = io.flow.common.v0.models.Visibility.Public
        override def validValues: Seq[io.flow.common.v0.models.Visibility] = io.flow.common.v0.models.Visibility.all
      }
      implicit def pathBindableVisibility(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.common.v0.models.Visibility] = ApibuilderPathBindable(visibilityConverter)
      implicit def queryStringBindableVisibility(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.common.v0.models.Visibility] = ApibuilderQueryStringBindable(visibilityConverter)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}


package io.flow.common.v0 {

  object Constants {

    val BaseUrl = "https://api.flow.io"
    val Namespace = "io.flow.common.v0"
    val UserAgent = "apibuilder 0.14.75 app.apibuilder.io/flow/common/0.7.60/play_2_6_client"
    val Version = "0.7.60"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String = "https://api.flow.io",
    auth: scala.Option[io.flow.common.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.common.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.common.v0.Client")

    logger.info(s"Initializing io.flow.common.v0.Client for url $baseUrl")





    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).addHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).addHttpHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method '$url'")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' '$url'")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.flow.common.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    final case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String

    }

  }



  package errors {

    final case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}