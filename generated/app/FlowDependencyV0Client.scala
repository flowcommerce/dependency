/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.7.70
 * apibuilder 0.14.96 app.apibuilder.io/flow/dependency/latest/play_2_8_client
 */
package io.flow.dependency.v0.models {

  sealed trait Credentials extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type Credentials
   */
  sealed trait CredentialsDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object CredentialsDiscriminator {

    case object UsernamePassword extends CredentialsDiscriminator { override def toString = "username_password" }

    final case class UNDEFINED(override val toString: String) extends CredentialsDiscriminator

    val all: scala.List[CredentialsDiscriminator] = scala.List(UsernamePassword)

    private[this] val byName: Map[String, CredentialsDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): CredentialsDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[CredentialsDiscriminator] = byName.get(value.toLowerCase)

  }

  sealed trait ItemSummary extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type ItemSummary
   */
  sealed trait ItemSummaryDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object ItemSummaryDiscriminator {

    case object BinarySummary extends ItemSummaryDiscriminator { override def toString = "binary_summary" }
    case object LibrarySummary extends ItemSummaryDiscriminator { override def toString = "library_summary" }
    case object ProjectSummary extends ItemSummaryDiscriminator { override def toString = "project_summary" }

    final case class UNDEFINED(override val toString: String) extends ItemSummaryDiscriminator

    val all: scala.List[ItemSummaryDiscriminator] = scala.List(BinarySummary, LibrarySummary, ProjectSummary)

    private[this] val byName: Map[String, ItemSummaryDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ItemSummaryDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ItemSummaryDiscriminator] = byName.get(value.toLowerCase)

  }

  sealed trait TaskData extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type TaskData
   */
  sealed trait TaskDataDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object TaskDataDiscriminator {

    case object TaskDataUpserted extends TaskDataDiscriminator { override def toString = "task_data_upserted" }
    case object TaskDataSync extends TaskDataDiscriminator { override def toString = "task_data_sync" }
    case object TaskDataSyncOne extends TaskDataDiscriminator { override def toString = "task_data_sync_one" }
    case object TaskDataSyncOrganizationLibraries extends TaskDataDiscriminator { override def toString = "task_data_sync_organization_libraries" }

    final case class UNDEFINED(override val toString: String) extends TaskDataDiscriminator

    val all: scala.List[TaskDataDiscriminator] = scala.List(TaskDataUpserted, TaskDataSync, TaskDataSyncOne, TaskDataSyncOrganizationLibraries)

    private[this] val byName: Map[String, TaskDataDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): TaskDataDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[TaskDataDiscriminator] = byName.get(value.toLowerCase)

  }

  final case class Binary(
    id: String,
    organization: io.flow.dependency.v0.models.OrganizationSummary,
    name: io.flow.dependency.v0.models.BinaryType
  )

  final case class BinaryForm(
    organizationId: String,
    name: io.flow.dependency.v0.models.BinaryType
  )

  final case class BinarySummary(
    id: String,
    organization: io.flow.dependency.v0.models.OrganizationSummary,
    name: io.flow.dependency.v0.models.BinaryType
  ) extends ItemSummary

  final case class BinaryVersion(
    id: String,
    binary: io.flow.dependency.v0.models.Binary,
    version: String
  )

  /**
   * Used to authenticate user based on the oauth code we receive from github
   */
  final case class GithubAuthenticationForm(
    code: String
  )

  final case class GithubUser(
    id: String,
    user: io.flow.common.v0.models.UserReference,
    githubUserId: Long,
    login: String
  )

  final case class GithubUserForm(
    userId: String,
    githubUserId: Long,
    login: String
  )

  /**
   * Defines a github hook
   */
  final case class GithubWebhook(
    id: Long
  )

  /**
   * A denormalization of item content for search
   *
   * @param id Unique identifier for this item.
   */
  final case class Item(
    id: String,
    organization: io.flow.dependency.v0.models.OrganizationSummary,
    visibility: io.flow.dependency.v0.models.Visibility,
    summary: io.flow.dependency.v0.models.ItemSummary,
    label: String,
    description: _root_.scala.Option[String] = None
  )

  /**
   * @param resolver The resolver where we found this library
   */
  final case class Library(
    id: String,
    organization: io.flow.dependency.v0.models.OrganizationSummary,
    groupId: String,
    artifactId: String,
    resolver: io.flow.dependency.v0.models.ResolverSummary
  )

  /**
   * @param version If provided, we automatically record this version of this library.
   */
  final case class LibraryForm(
    organizationId: String,
    groupId: String,
    artifactId: String,
    resolverId: String,
    version: _root_.scala.Option[io.flow.dependency.v0.models.VersionForm] = None
  )

  final case class LibrarySummary(
    id: String,
    organization: io.flow.dependency.v0.models.OrganizationSummary,
    groupId: String,
    artifactId: String
  ) extends ItemSummary

  final case class LibraryVersion(
    id: String,
    library: io.flow.dependency.v0.models.Library,
    version: String,
    crossBuildVersion: _root_.scala.Option[String] = None
  )

  /**
   * A user can belong to one or more organizations via memberships.
   *
   * @param id Unique identifier for this membership
   */
  final case class Membership(
    id: String,
    user: io.flow.dependency.v0.models.UserSummary,
    organization: io.flow.dependency.v0.models.OrganizationSummary,
    role: io.flow.dependency.v0.models.Role
  )

  final case class MembershipForm(
    userId: String,
    organization: String,
    role: io.flow.dependency.v0.models.Role = io.flow.dependency.v0.models.Role.Member
  )

  /**
   * @param user The user that created this organization
   */
  final case class Organization(
    id: String,
    user: io.flow.common.v0.models.UserReference,
    key: String
  )

  final case class OrganizationForm(
    key: String
  )

  final case class OrganizationSummary(
    id: String,
    key: String
  )

  /**
   * @param user The user that created this project
   */
  final case class Project(
    id: String,
    organization: io.flow.dependency.v0.models.OrganizationSummary,
    user: io.flow.common.v0.models.UserReference,
    visibility: io.flow.dependency.v0.models.Visibility,
    scms: io.flow.dependency.v0.models.Scms,
    name: String,
    uri: String
  )

  final case class ProjectBinary(
    id: String,
    project: io.flow.dependency.v0.models.ProjectDetail,
    name: String,
    version: String,
    path: String,
    binary: _root_.scala.Option[io.flow.dependency.v0.models.Reference] = None
  )

  final case class ProjectDetail(
    id: String,
    organization: io.flow.dependency.v0.models.OrganizationSummary,
    name: String
  )

  final case class ProjectForm(
    organization: String,
    name: String,
    visibility: io.flow.dependency.v0.models.Visibility,
    scms: io.flow.dependency.v0.models.Scms,
    uri: String
  )

  final case class ProjectLibrary(
    id: String,
    project: io.flow.dependency.v0.models.ProjectDetail,
    groupId: String,
    artifactId: String,
    version: String,
    crossBuildVersion: _root_.scala.Option[String] = None,
    path: String,
    library: _root_.scala.Option[io.flow.dependency.v0.models.Reference] = None
  )

  final case class ProjectPatchForm(
    name: _root_.scala.Option[String] = None,
    visibility: _root_.scala.Option[io.flow.dependency.v0.models.Visibility] = None,
    scms: _root_.scala.Option[io.flow.dependency.v0.models.Scms] = None,
    uri: _root_.scala.Option[String] = None
  )

  final case class ProjectSummary(
    id: String,
    organization: io.flow.dependency.v0.models.OrganizationSummary,
    name: String
  ) extends ItemSummary

  /**
   * Summary of a specific recommendations for a project. Designed for display in the
   * project dashboard
   *
   * @param name The name of the library or binary to upgrade
   * @param from The current version
   * @param to The version to which we recommend upgrading
   */
  final case class Recommendation(
    id: String,
    project: io.flow.dependency.v0.models.ProjectDetail,
    `type`: io.flow.dependency.v0.models.RecommendationType,
    `object`: io.flow.dependency.v0.models.Reference,
    name: String,
    from: String,
    to: String,
    createdAt: _root_.org.joda.time.DateTime
  )

  final case class Reference(
    id: String
  )

  final case class Repository(
    name: String,
    visibility: io.flow.dependency.v0.models.Visibility,
    uri: String
  )

  /**
   * @param organization The organization that created the resolver. If empty, indicates a globally
   *        public resolver
   */
  final case class Resolver(
    id: String,
    visibility: io.flow.dependency.v0.models.Visibility,
    organization: _root_.scala.Option[io.flow.dependency.v0.models.OrganizationSummary] = None,
    uri: String,
    credentials: _root_.scala.Option[io.flow.dependency.v0.models.Credentials] = None
  )

  final case class ResolverForm(
    visibility: io.flow.dependency.v0.models.Visibility,
    organization: String,
    uri: String,
    credentials: _root_.scala.Option[io.flow.dependency.v0.models.Credentials] = None
  )

  final case class ResolverSummary(
    id: String,
    organization: _root_.scala.Option[io.flow.dependency.v0.models.OrganizationSummary] = None,
    visibility: io.flow.dependency.v0.models.Visibility,
    uri: String
  )

  /**
   * Represents a user that is currently subscribed to a publication
   *
   * @param id Internal unique identifier for this subscription record
   */
  final case class Subscription(
    id: String,
    user: io.flow.common.v0.models.UserReference,
    publication: io.flow.dependency.v0.models.Publication
  )

  final case class SubscriptionForm(
    userId: String,
    publication: io.flow.dependency.v0.models.Publication
  )

  /**
   * Records when we start and complete each sync of a module (e.g. project)
   *
   * @param id Unique identifier for this item.
   */
  final case class Sync(
    id: String,
    objectId: String,
    event: io.flow.dependency.v0.models.SyncEvent,
    createdAt: _root_.org.joda.time.DateTime
  )

  /**
   * @param `type` If not specified, we sync all types
   */
  final case class TaskDataSync(
    `type`: _root_.scala.Option[io.flow.dependency.v0.models.SyncType] = None
  ) extends TaskData

  final case class TaskDataSyncOne(
    id: String,
    `type`: io.flow.dependency.v0.models.SyncType
  ) extends TaskData

  final case class TaskDataSyncOrganizationLibraries(
    organizationId: String
  ) extends TaskData

  /**
   * Represents that a new, for example, project was created or updated
   */
  final case class TaskDataUpserted(
    id: String,
    `type`: io.flow.dependency.v0.models.SyncType
  ) extends TaskData

  /**
   * @param cleartext The cleartext token. Only available when the token is initially created
   */
  final case class Token(
    id: String,
    user: io.flow.common.v0.models.UserReference,
    masked: String,
    cleartext: _root_.scala.Option[String] = None,
    description: _root_.scala.Option[String] = None
  )

  final case class TokenForm(
    userId: String,
    description: _root_.scala.Option[String] = None
  )

  final case class UserForm(
    email: _root_.scala.Option[String] = None,
    name: _root_.scala.Option[io.flow.common.v0.models.Name] = None
  )

  final case class UserIdentifier(
    id: String,
    user: io.flow.common.v0.models.UserReference,
    value: String
  )

  final case class UserSummary(
    id: String,
    email: _root_.scala.Option[String] = None,
    name: io.flow.common.v0.models.Name
  )

  final case class UsernamePassword(
    username: String,
    password: _root_.scala.Option[String] = None
  ) extends Credentials

  final case class VersionForm(
    version: String,
    crossBuildVersion: _root_.scala.Option[String] = None
  )

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union Credentials, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   *
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  final case class CredentialsUndefinedType(
    description: String
  ) extends Credentials

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union ItemSummary, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   *
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  final case class ItemSummaryUndefinedType(
    description: String
  ) extends ItemSummary

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union TaskData, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   *
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  final case class TaskDataUndefinedType(
    description: String
  ) extends TaskData

  sealed trait BinaryType extends _root_.scala.Product with _root_.scala.Serializable

  object BinaryType {

    /**
     * See http://www.scala-lang.org/
     */
    case object Scala extends BinaryType { override def toString = "scala" }
    /**
     * See http://www.scala-sbt.org/
     */
    case object Sbt extends BinaryType { override def toString = "sbt" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends BinaryType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[BinaryType] = scala.List(Scala, Sbt)

    private[this]
    val byName: Map[String, BinaryType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): BinaryType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[BinaryType] = byName.get(value.toLowerCase)

  }

  /**
   * A publication represents something that a user can subscribe to.
   */
  sealed trait Publication extends _root_.scala.Product with _root_.scala.Serializable

  object Publication {

    /**
     * A daily summary of dependencies that can be upgraded
     */
    case object DailySummary extends Publication { override def toString = "daily_summary" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends Publication

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Publication] = scala.List(DailySummary)

    private[this]
    val byName: Map[String, Publication] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Publication = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Publication] = byName.get(value.toLowerCase)

  }

  sealed trait RecommendationType extends _root_.scala.Product with _root_.scala.Serializable

  object RecommendationType {

    case object Library extends RecommendationType { override def toString = "library" }
    case object Binary extends RecommendationType { override def toString = "binary" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends RecommendationType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[RecommendationType] = scala.List(Library, Binary)

    private[this]
    val byName: Map[String, RecommendationType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): RecommendationType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[RecommendationType] = byName.get(value.toLowerCase)

  }

  sealed trait Role extends _root_.scala.Product with _root_.scala.Serializable

  object Role {

    case object Member extends Role { override def toString = "member" }
    case object Admin extends Role { override def toString = "admin" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends Role

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Role] = scala.List(Member, Admin)

    private[this]
    val byName: Map[String, Role] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Role = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Role] = byName.get(value.toLowerCase)

  }

  sealed trait Scms extends _root_.scala.Product with _root_.scala.Serializable

  object Scms {

    case object Github extends Scms { override def toString = "github" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends Scms

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Scms] = scala.List(Github)

    private[this]
    val byName: Map[String, Scms] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Scms = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Scms] = byName.get(value.toLowerCase)

  }

  sealed trait SyncEvent extends _root_.scala.Product with _root_.scala.Serializable

  object SyncEvent {

    case object Started extends SyncEvent { override def toString = "started" }
    case object Completed extends SyncEvent { override def toString = "completed" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends SyncEvent

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[SyncEvent] = scala.List(Started, Completed)

    private[this]
    val byName: Map[String, SyncEvent] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): SyncEvent = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[SyncEvent] = byName.get(value.toLowerCase)

  }

  sealed trait SyncType extends _root_.scala.Product with _root_.scala.Serializable

  object SyncType {

    case object Project extends SyncType { override def toString = "project" }
    case object Library extends SyncType { override def toString = "library" }
    case object Binary extends SyncType { override def toString = "binary" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends SyncType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[SyncType] = scala.List(Project, Library, Binary)

    private[this]
    val byName: Map[String, SyncType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): SyncType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[SyncType] = byName.get(value.toLowerCase)

  }

  sealed trait Visibility extends _root_.scala.Product with _root_.scala.Serializable

  object Visibility {

    case object Public extends Visibility { override def toString = "public" }
    case object Private extends Visibility { override def toString = "private" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends Visibility

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Visibility] = scala.List(Public, Private)

    private[this]
    val byName: Map[String, Visibility] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Visibility = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Visibility] = byName.get(value.toLowerCase)

  }

}

package io.flow.dependency.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.dependency.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.github.v0.models.json._
    import io.flow.healthcheck.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID = new Writes[_root_.java.util.UUID] {
      def writes(x: _root_.java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[_root_.org.joda.time.DateTime] {
      def writes(x: _root_.org.joda.time.DateTime) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
      }
    }

    private[v0] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate = new Writes[_root_.org.joda.time.LocalDate] {
      def writes(x: _root_.org.joda.time.LocalDate) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
      }
    }

    implicit val jsonReadsDependencyBinaryType = new play.api.libs.json.Reads[io.flow.dependency.v0.models.BinaryType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.dependency.v0.models.BinaryType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.BinaryType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.BinaryType(v))
              case err: play.api.libs.json.JsError =>
                (js \ "binary_type").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.BinaryType(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesDependencyBinaryType(obj: io.flow.dependency.v0.models.BinaryType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectBinaryType(obj: io.flow.dependency.v0.models.BinaryType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDependencyBinaryType: play.api.libs.json.Writes[BinaryType] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.BinaryType] {
        def writes(obj: io.flow.dependency.v0.models.BinaryType) = {
          jsonWritesDependencyBinaryType(obj)
        }
      }
    }

    implicit val jsonReadsDependencyPublication = new play.api.libs.json.Reads[io.flow.dependency.v0.models.Publication] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.dependency.v0.models.Publication] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.Publication(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.Publication(v))
              case err: play.api.libs.json.JsError =>
                (js \ "publication").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.Publication(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesDependencyPublication(obj: io.flow.dependency.v0.models.Publication) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectPublication(obj: io.flow.dependency.v0.models.Publication) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDependencyPublication: play.api.libs.json.Writes[Publication] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.Publication] {
        def writes(obj: io.flow.dependency.v0.models.Publication) = {
          jsonWritesDependencyPublication(obj)
        }
      }
    }

    implicit val jsonReadsDependencyRecommendationType = new play.api.libs.json.Reads[io.flow.dependency.v0.models.RecommendationType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.dependency.v0.models.RecommendationType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.RecommendationType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.RecommendationType(v))
              case err: play.api.libs.json.JsError =>
                (js \ "recommendation_type").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.RecommendationType(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesDependencyRecommendationType(obj: io.flow.dependency.v0.models.RecommendationType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectRecommendationType(obj: io.flow.dependency.v0.models.RecommendationType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDependencyRecommendationType: play.api.libs.json.Writes[RecommendationType] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.RecommendationType] {
        def writes(obj: io.flow.dependency.v0.models.RecommendationType) = {
          jsonWritesDependencyRecommendationType(obj)
        }
      }
    }

    implicit val jsonReadsDependencyRole = new play.api.libs.json.Reads[io.flow.dependency.v0.models.Role] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.dependency.v0.models.Role] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.Role(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.Role(v))
              case err: play.api.libs.json.JsError =>
                (js \ "role").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.Role(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesDependencyRole(obj: io.flow.dependency.v0.models.Role) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectRole(obj: io.flow.dependency.v0.models.Role) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDependencyRole: play.api.libs.json.Writes[Role] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.Role] {
        def writes(obj: io.flow.dependency.v0.models.Role) = {
          jsonWritesDependencyRole(obj)
        }
      }
    }

    implicit val jsonReadsDependencyScms = new play.api.libs.json.Reads[io.flow.dependency.v0.models.Scms] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.dependency.v0.models.Scms] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.Scms(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.Scms(v))
              case err: play.api.libs.json.JsError =>
                (js \ "scms").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.Scms(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesDependencyScms(obj: io.flow.dependency.v0.models.Scms) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectScms(obj: io.flow.dependency.v0.models.Scms) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDependencyScms: play.api.libs.json.Writes[Scms] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.Scms] {
        def writes(obj: io.flow.dependency.v0.models.Scms) = {
          jsonWritesDependencyScms(obj)
        }
      }
    }

    implicit val jsonReadsDependencySyncEvent = new play.api.libs.json.Reads[io.flow.dependency.v0.models.SyncEvent] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.dependency.v0.models.SyncEvent] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.SyncEvent(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.SyncEvent(v))
              case err: play.api.libs.json.JsError =>
                (js \ "sync_event").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.SyncEvent(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesDependencySyncEvent(obj: io.flow.dependency.v0.models.SyncEvent) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectSyncEvent(obj: io.flow.dependency.v0.models.SyncEvent) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDependencySyncEvent: play.api.libs.json.Writes[SyncEvent] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.SyncEvent] {
        def writes(obj: io.flow.dependency.v0.models.SyncEvent) = {
          jsonWritesDependencySyncEvent(obj)
        }
      }
    }

    implicit val jsonReadsDependencySyncType = new play.api.libs.json.Reads[io.flow.dependency.v0.models.SyncType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.dependency.v0.models.SyncType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.SyncType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.SyncType(v))
              case err: play.api.libs.json.JsError =>
                (js \ "sync_type").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.SyncType(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesDependencySyncType(obj: io.flow.dependency.v0.models.SyncType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectSyncType(obj: io.flow.dependency.v0.models.SyncType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDependencySyncType: play.api.libs.json.Writes[SyncType] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.SyncType] {
        def writes(obj: io.flow.dependency.v0.models.SyncType) = {
          jsonWritesDependencySyncType(obj)
        }
      }
    }

    implicit val jsonReadsDependencyVisibility = new play.api.libs.json.Reads[io.flow.dependency.v0.models.Visibility] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.dependency.v0.models.Visibility] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.Visibility(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.Visibility(v))
              case err: play.api.libs.json.JsError =>
                (js \ "visibility").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.Visibility(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesDependencyVisibility(obj: io.flow.dependency.v0.models.Visibility) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectVisibility(obj: io.flow.dependency.v0.models.Visibility) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDependencyVisibility: play.api.libs.json.Writes[Visibility] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.Visibility] {
        def writes(obj: io.flow.dependency.v0.models.Visibility) = {
          jsonWritesDependencyVisibility(obj)
        }
      }
    }

    implicit def jsonReadsDependencyBinary: play.api.libs.json.Reads[Binary] = {
      for {
        id <- (__ \ "id").read[String]
        organization <- (__ \ "organization").read[io.flow.dependency.v0.models.OrganizationSummary]
        name <- (__ \ "name").read[io.flow.dependency.v0.models.BinaryType]
      } yield Binary(id, organization, name)
    }

    def jsObjectBinary(obj: io.flow.dependency.v0.models.Binary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "name" -> play.api.libs.json.JsString(obj.name.toString)
      )
    }

    implicit def jsonWritesDependencyBinary: play.api.libs.json.Writes[Binary] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.Binary] {
        def writes(obj: io.flow.dependency.v0.models.Binary) = {
          jsObjectBinary(obj)
        }
      }
    }

    implicit def jsonReadsDependencyBinaryForm: play.api.libs.json.Reads[BinaryForm] = {
      for {
        organizationId <- (__ \ "organization_id").read[String]
        name <- (__ \ "name").read[io.flow.dependency.v0.models.BinaryType]
      } yield BinaryForm(organizationId, name)
    }

    def jsObjectBinaryForm(obj: io.flow.dependency.v0.models.BinaryForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization_id" -> play.api.libs.json.JsString(obj.organizationId),
        "name" -> play.api.libs.json.JsString(obj.name.toString)
      )
    }

    implicit def jsonWritesDependencyBinaryForm: play.api.libs.json.Writes[BinaryForm] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.BinaryForm] {
        def writes(obj: io.flow.dependency.v0.models.BinaryForm) = {
          jsObjectBinaryForm(obj)
        }
      }
    }

    implicit def jsonReadsDependencyBinarySummary: play.api.libs.json.Reads[BinarySummary] = {
      for {
        id <- (__ \ "id").read[String]
        organization <- (__ \ "organization").read[io.flow.dependency.v0.models.OrganizationSummary]
        name <- (__ \ "name").read[io.flow.dependency.v0.models.BinaryType]
      } yield BinarySummary(id, organization, name)
    }

    def jsObjectBinarySummary(obj: io.flow.dependency.v0.models.BinarySummary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "name" -> play.api.libs.json.JsString(obj.name.toString)
      ) ++ play.api.libs.json.Json.obj("discriminator" -> "binary_summary")
    }

    implicit def jsonWritesDependencyBinarySummary: play.api.libs.json.Writes[BinarySummary] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.BinarySummary] {
        def writes(obj: io.flow.dependency.v0.models.BinarySummary) = {
          jsObjectBinarySummary(obj)
        }
      }
    }

    implicit def jsonReadsDependencyBinaryVersion: play.api.libs.json.Reads[BinaryVersion] = {
      for {
        id <- (__ \ "id").read[String]
        binary <- (__ \ "binary").read[io.flow.dependency.v0.models.Binary]
        version <- (__ \ "version").read[String]
      } yield BinaryVersion(id, binary, version)
    }

    def jsObjectBinaryVersion(obj: io.flow.dependency.v0.models.BinaryVersion): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "binary" -> jsObjectBinary(obj.binary),
        "version" -> play.api.libs.json.JsString(obj.version)
      )
    }

    implicit def jsonWritesDependencyBinaryVersion: play.api.libs.json.Writes[BinaryVersion] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.BinaryVersion] {
        def writes(obj: io.flow.dependency.v0.models.BinaryVersion) = {
          jsObjectBinaryVersion(obj)
        }
      }
    }

    implicit def jsonReadsDependencyGithubAuthenticationForm: play.api.libs.json.Reads[GithubAuthenticationForm] = {
      (__ \ "code").read[String].map { x => new GithubAuthenticationForm(code = x) }
    }

    def jsObjectGithubAuthenticationForm(obj: io.flow.dependency.v0.models.GithubAuthenticationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "code" -> play.api.libs.json.JsString(obj.code)
      )
    }

    implicit def jsonWritesDependencyGithubAuthenticationForm: play.api.libs.json.Writes[GithubAuthenticationForm] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.GithubAuthenticationForm] {
        def writes(obj: io.flow.dependency.v0.models.GithubAuthenticationForm) = {
          jsObjectGithubAuthenticationForm(obj)
        }
      }
    }

    implicit def jsonReadsDependencyGithubUser: play.api.libs.json.Reads[GithubUser] = {
      for {
        id <- (__ \ "id").read[String]
        user <- (__ \ "user").read[io.flow.common.v0.models.UserReference]
        githubUserId <- (__ \ "github_user_id").read[Long]
        login <- (__ \ "login").read[String]
      } yield GithubUser(id, user, githubUserId, login)
    }

    def jsObjectGithubUser(obj: io.flow.dependency.v0.models.GithubUser): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "user" -> io.flow.common.v0.models.json.jsObjectUserReference(obj.user),
        "github_user_id" -> play.api.libs.json.JsNumber(obj.githubUserId),
        "login" -> play.api.libs.json.JsString(obj.login)
      )
    }

    implicit def jsonWritesDependencyGithubUser: play.api.libs.json.Writes[GithubUser] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.GithubUser] {
        def writes(obj: io.flow.dependency.v0.models.GithubUser) = {
          jsObjectGithubUser(obj)
        }
      }
    }

    implicit def jsonReadsDependencyGithubUserForm: play.api.libs.json.Reads[GithubUserForm] = {
      for {
        userId <- (__ \ "user_id").read[String]
        githubUserId <- (__ \ "github_user_id").read[Long]
        login <- (__ \ "login").read[String]
      } yield GithubUserForm(userId, githubUserId, login)
    }

    def jsObjectGithubUserForm(obj: io.flow.dependency.v0.models.GithubUserForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "user_id" -> play.api.libs.json.JsString(obj.userId),
        "github_user_id" -> play.api.libs.json.JsNumber(obj.githubUserId),
        "login" -> play.api.libs.json.JsString(obj.login)
      )
    }

    implicit def jsonWritesDependencyGithubUserForm: play.api.libs.json.Writes[GithubUserForm] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.GithubUserForm] {
        def writes(obj: io.flow.dependency.v0.models.GithubUserForm) = {
          jsObjectGithubUserForm(obj)
        }
      }
    }

    implicit def jsonReadsDependencyGithubWebhook: play.api.libs.json.Reads[GithubWebhook] = {
      (__ \ "id").read[Long].map { x => new GithubWebhook(id = x) }
    }

    def jsObjectGithubWebhook(obj: io.flow.dependency.v0.models.GithubWebhook): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsNumber(obj.id)
      )
    }

    implicit def jsonWritesDependencyGithubWebhook: play.api.libs.json.Writes[GithubWebhook] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.GithubWebhook] {
        def writes(obj: io.flow.dependency.v0.models.GithubWebhook) = {
          jsObjectGithubWebhook(obj)
        }
      }
    }

    implicit def jsonReadsDependencyItem: play.api.libs.json.Reads[Item] = {
      for {
        id <- (__ \ "id").read[String]
        organization <- (__ \ "organization").read[io.flow.dependency.v0.models.OrganizationSummary]
        visibility <- (__ \ "visibility").read[io.flow.dependency.v0.models.Visibility]
        summary <- (__ \ "summary").read[io.flow.dependency.v0.models.ItemSummary]
        label <- (__ \ "label").read[String]
        description <- (__ \ "description").readNullable[String]
      } yield Item(id, organization, visibility, summary, label, description)
    }

    def jsObjectItem(obj: io.flow.dependency.v0.models.Item): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "summary" -> jsObjectItemSummary(obj.summary),
        "label" -> play.api.libs.json.JsString(obj.label)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDependencyItem: play.api.libs.json.Writes[Item] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.Item] {
        def writes(obj: io.flow.dependency.v0.models.Item) = {
          jsObjectItem(obj)
        }
      }
    }

    implicit def jsonReadsDependencyLibrary: play.api.libs.json.Reads[Library] = {
      for {
        id <- (__ \ "id").read[String]
        organization <- (__ \ "organization").read[io.flow.dependency.v0.models.OrganizationSummary]
        groupId <- (__ \ "group_id").read[String]
        artifactId <- (__ \ "artifact_id").read[String]
        resolver <- (__ \ "resolver").read[io.flow.dependency.v0.models.ResolverSummary]
      } yield Library(id, organization, groupId, artifactId, resolver)
    }

    def jsObjectLibrary(obj: io.flow.dependency.v0.models.Library): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "group_id" -> play.api.libs.json.JsString(obj.groupId),
        "artifact_id" -> play.api.libs.json.JsString(obj.artifactId),
        "resolver" -> jsObjectResolverSummary(obj.resolver)
      )
    }

    implicit def jsonWritesDependencyLibrary: play.api.libs.json.Writes[Library] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.Library] {
        def writes(obj: io.flow.dependency.v0.models.Library) = {
          jsObjectLibrary(obj)
        }
      }
    }

    implicit def jsonReadsDependencyLibraryForm: play.api.libs.json.Reads[LibraryForm] = {
      for {
        organizationId <- (__ \ "organization_id").read[String]
        groupId <- (__ \ "group_id").read[String]
        artifactId <- (__ \ "artifact_id").read[String]
        resolverId <- (__ \ "resolver_id").read[String]
        version <- (__ \ "version").readNullable[io.flow.dependency.v0.models.VersionForm]
      } yield LibraryForm(organizationId, groupId, artifactId, resolverId, version)
    }

    def jsObjectLibraryForm(obj: io.flow.dependency.v0.models.LibraryForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization_id" -> play.api.libs.json.JsString(obj.organizationId),
        "group_id" -> play.api.libs.json.JsString(obj.groupId),
        "artifact_id" -> play.api.libs.json.JsString(obj.artifactId),
        "resolver_id" -> play.api.libs.json.JsString(obj.resolverId)
      ) ++ (obj.version match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("version" -> jsObjectVersionForm(x))
      })
    }

    implicit def jsonWritesDependencyLibraryForm: play.api.libs.json.Writes[LibraryForm] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.LibraryForm] {
        def writes(obj: io.flow.dependency.v0.models.LibraryForm) = {
          jsObjectLibraryForm(obj)
        }
      }
    }

    implicit def jsonReadsDependencyLibrarySummary: play.api.libs.json.Reads[LibrarySummary] = {
      for {
        id <- (__ \ "id").read[String]
        organization <- (__ \ "organization").read[io.flow.dependency.v0.models.OrganizationSummary]
        groupId <- (__ \ "group_id").read[String]
        artifactId <- (__ \ "artifact_id").read[String]
      } yield LibrarySummary(id, organization, groupId, artifactId)
    }

    def jsObjectLibrarySummary(obj: io.flow.dependency.v0.models.LibrarySummary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "group_id" -> play.api.libs.json.JsString(obj.groupId),
        "artifact_id" -> play.api.libs.json.JsString(obj.artifactId)
      ) ++ play.api.libs.json.Json.obj("discriminator" -> "library_summary")
    }

    implicit def jsonWritesDependencyLibrarySummary: play.api.libs.json.Writes[LibrarySummary] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.LibrarySummary] {
        def writes(obj: io.flow.dependency.v0.models.LibrarySummary) = {
          jsObjectLibrarySummary(obj)
        }
      }
    }

    implicit def jsonReadsDependencyLibraryVersion: play.api.libs.json.Reads[LibraryVersion] = {
      for {
        id <- (__ \ "id").read[String]
        library <- (__ \ "library").read[io.flow.dependency.v0.models.Library]
        version <- (__ \ "version").read[String]
        crossBuildVersion <- (__ \ "cross_build_version").readNullable[String]
      } yield LibraryVersion(id, library, version, crossBuildVersion)
    }

    def jsObjectLibraryVersion(obj: io.flow.dependency.v0.models.LibraryVersion): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "library" -> jsObjectLibrary(obj.library),
        "version" -> play.api.libs.json.JsString(obj.version)
      ) ++ (obj.crossBuildVersion match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("cross_build_version" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDependencyLibraryVersion: play.api.libs.json.Writes[LibraryVersion] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.LibraryVersion] {
        def writes(obj: io.flow.dependency.v0.models.LibraryVersion) = {
          jsObjectLibraryVersion(obj)
        }
      }
    }

    implicit def jsonReadsDependencyMembership: play.api.libs.json.Reads[Membership] = {
      for {
        id <- (__ \ "id").read[String]
        user <- (__ \ "user").read[io.flow.dependency.v0.models.UserSummary]
        organization <- (__ \ "organization").read[io.flow.dependency.v0.models.OrganizationSummary]
        role <- (__ \ "role").read[io.flow.dependency.v0.models.Role]
      } yield Membership(id, user, organization, role)
    }

    def jsObjectMembership(obj: io.flow.dependency.v0.models.Membership): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "user" -> jsObjectUserSummary(obj.user),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "role" -> play.api.libs.json.JsString(obj.role.toString)
      )
    }

    implicit def jsonWritesDependencyMembership: play.api.libs.json.Writes[Membership] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.Membership] {
        def writes(obj: io.flow.dependency.v0.models.Membership) = {
          jsObjectMembership(obj)
        }
      }
    }

    implicit def jsonReadsDependencyMembershipForm: play.api.libs.json.Reads[MembershipForm] = {
      for {
        userId <- (__ \ "user_id").read[String]
        organization <- (__ \ "organization").read[String]
        role <- (__ \ "role").read[io.flow.dependency.v0.models.Role]
      } yield MembershipForm(userId, organization, role)
    }

    def jsObjectMembershipForm(obj: io.flow.dependency.v0.models.MembershipForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "user_id" -> play.api.libs.json.JsString(obj.userId),
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "role" -> play.api.libs.json.JsString(obj.role.toString)
      )
    }

    implicit def jsonWritesDependencyMembershipForm: play.api.libs.json.Writes[MembershipForm] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.MembershipForm] {
        def writes(obj: io.flow.dependency.v0.models.MembershipForm) = {
          jsObjectMembershipForm(obj)
        }
      }
    }

    implicit def jsonReadsDependencyOrganization: play.api.libs.json.Reads[Organization] = {
      for {
        id <- (__ \ "id").read[String]
        user <- (__ \ "user").read[io.flow.common.v0.models.UserReference]
        key <- (__ \ "key").read[String]
      } yield Organization(id, user, key)
    }

    def jsObjectOrganization(obj: io.flow.dependency.v0.models.Organization): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "user" -> io.flow.common.v0.models.json.jsObjectUserReference(obj.user),
        "key" -> play.api.libs.json.JsString(obj.key)
      )
    }

    implicit def jsonWritesDependencyOrganization: play.api.libs.json.Writes[Organization] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.Organization] {
        def writes(obj: io.flow.dependency.v0.models.Organization) = {
          jsObjectOrganization(obj)
        }
      }
    }

    implicit def jsonReadsDependencyOrganizationForm: play.api.libs.json.Reads[OrganizationForm] = {
      (__ \ "key").read[String].map { x => new OrganizationForm(key = x) }
    }

    def jsObjectOrganizationForm(obj: io.flow.dependency.v0.models.OrganizationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "key" -> play.api.libs.json.JsString(obj.key)
      )
    }

    implicit def jsonWritesDependencyOrganizationForm: play.api.libs.json.Writes[OrganizationForm] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.OrganizationForm] {
        def writes(obj: io.flow.dependency.v0.models.OrganizationForm) = {
          jsObjectOrganizationForm(obj)
        }
      }
    }

    implicit def jsonReadsDependencyOrganizationSummary: play.api.libs.json.Reads[OrganizationSummary] = {
      for {
        id <- (__ \ "id").read[String]
        key <- (__ \ "key").read[String]
      } yield OrganizationSummary(id, key)
    }

    def jsObjectOrganizationSummary(obj: io.flow.dependency.v0.models.OrganizationSummary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "key" -> play.api.libs.json.JsString(obj.key)
      )
    }

    implicit def jsonWritesDependencyOrganizationSummary: play.api.libs.json.Writes[OrganizationSummary] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.OrganizationSummary] {
        def writes(obj: io.flow.dependency.v0.models.OrganizationSummary) = {
          jsObjectOrganizationSummary(obj)
        }
      }
    }

    implicit def jsonReadsDependencyProject: play.api.libs.json.Reads[Project] = {
      for {
        id <- (__ \ "id").read[String]
        organization <- (__ \ "organization").read[io.flow.dependency.v0.models.OrganizationSummary]
        user <- (__ \ "user").read[io.flow.common.v0.models.UserReference]
        visibility <- (__ \ "visibility").read[io.flow.dependency.v0.models.Visibility]
        scms <- (__ \ "scms").read[io.flow.dependency.v0.models.Scms]
        name <- (__ \ "name").read[String]
        uri <- (__ \ "uri").read[String]
      } yield Project(id, organization, user, visibility, scms, name, uri)
    }

    def jsObjectProject(obj: io.flow.dependency.v0.models.Project): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "user" -> io.flow.common.v0.models.json.jsObjectUserReference(obj.user),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "scms" -> play.api.libs.json.JsString(obj.scms.toString),
        "name" -> play.api.libs.json.JsString(obj.name),
        "uri" -> play.api.libs.json.JsString(obj.uri)
      )
    }

    implicit def jsonWritesDependencyProject: play.api.libs.json.Writes[Project] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.Project] {
        def writes(obj: io.flow.dependency.v0.models.Project) = {
          jsObjectProject(obj)
        }
      }
    }

    implicit def jsonReadsDependencyProjectBinary: play.api.libs.json.Reads[ProjectBinary] = {
      for {
        id <- (__ \ "id").read[String]
        project <- (__ \ "project").read[io.flow.dependency.v0.models.ProjectDetail]
        name <- (__ \ "name").read[String]
        version <- (__ \ "version").read[String]
        path <- (__ \ "path").read[String]
        binary <- (__ \ "binary").readNullable[io.flow.dependency.v0.models.Reference]
      } yield ProjectBinary(id, project, name, version, path, binary)
    }

    def jsObjectProjectBinary(obj: io.flow.dependency.v0.models.ProjectBinary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "project" -> jsObjectProjectDetail(obj.project),
        "name" -> play.api.libs.json.JsString(obj.name),
        "version" -> play.api.libs.json.JsString(obj.version),
        "path" -> play.api.libs.json.JsString(obj.path)
      ) ++ (obj.binary match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("binary" -> jsObjectReference(x))
      })
    }

    implicit def jsonWritesDependencyProjectBinary: play.api.libs.json.Writes[ProjectBinary] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.ProjectBinary] {
        def writes(obj: io.flow.dependency.v0.models.ProjectBinary) = {
          jsObjectProjectBinary(obj)
        }
      }
    }

    implicit def jsonReadsDependencyProjectDetail: play.api.libs.json.Reads[ProjectDetail] = {
      for {
        id <- (__ \ "id").read[String]
        organization <- (__ \ "organization").read[io.flow.dependency.v0.models.OrganizationSummary]
        name <- (__ \ "name").read[String]
      } yield ProjectDetail(id, organization, name)
    }

    def jsObjectProjectDetail(obj: io.flow.dependency.v0.models.ProjectDetail): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesDependencyProjectDetail: play.api.libs.json.Writes[ProjectDetail] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.ProjectDetail] {
        def writes(obj: io.flow.dependency.v0.models.ProjectDetail) = {
          jsObjectProjectDetail(obj)
        }
      }
    }

    implicit def jsonReadsDependencyProjectForm: play.api.libs.json.Reads[ProjectForm] = {
      for {
        organization <- (__ \ "organization").read[String]
        name <- (__ \ "name").read[String]
        visibility <- (__ \ "visibility").read[io.flow.dependency.v0.models.Visibility]
        scms <- (__ \ "scms").read[io.flow.dependency.v0.models.Scms]
        uri <- (__ \ "uri").read[String]
      } yield ProjectForm(organization, name, visibility, scms, uri)
    }

    def jsObjectProjectForm(obj: io.flow.dependency.v0.models.ProjectForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "name" -> play.api.libs.json.JsString(obj.name),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "scms" -> play.api.libs.json.JsString(obj.scms.toString),
        "uri" -> play.api.libs.json.JsString(obj.uri)
      )
    }

    implicit def jsonWritesDependencyProjectForm: play.api.libs.json.Writes[ProjectForm] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.ProjectForm] {
        def writes(obj: io.flow.dependency.v0.models.ProjectForm) = {
          jsObjectProjectForm(obj)
        }
      }
    }

    implicit def jsonReadsDependencyProjectLibrary: play.api.libs.json.Reads[ProjectLibrary] = {
      for {
        id <- (__ \ "id").read[String]
        project <- (__ \ "project").read[io.flow.dependency.v0.models.ProjectDetail]
        groupId <- (__ \ "group_id").read[String]
        artifactId <- (__ \ "artifact_id").read[String]
        version <- (__ \ "version").read[String]
        crossBuildVersion <- (__ \ "cross_build_version").readNullable[String]
        path <- (__ \ "path").read[String]
        library <- (__ \ "library").readNullable[io.flow.dependency.v0.models.Reference]
      } yield ProjectLibrary(id, project, groupId, artifactId, version, crossBuildVersion, path, library)
    }

    def jsObjectProjectLibrary(obj: io.flow.dependency.v0.models.ProjectLibrary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "project" -> jsObjectProjectDetail(obj.project),
        "group_id" -> play.api.libs.json.JsString(obj.groupId),
        "artifact_id" -> play.api.libs.json.JsString(obj.artifactId),
        "version" -> play.api.libs.json.JsString(obj.version),
        "path" -> play.api.libs.json.JsString(obj.path)
      ) ++ (obj.crossBuildVersion match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("cross_build_version" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.library match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("library" -> jsObjectReference(x))
      })
    }

    implicit def jsonWritesDependencyProjectLibrary: play.api.libs.json.Writes[ProjectLibrary] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.ProjectLibrary] {
        def writes(obj: io.flow.dependency.v0.models.ProjectLibrary) = {
          jsObjectProjectLibrary(obj)
        }
      }
    }

    implicit def jsonReadsDependencyProjectPatchForm: play.api.libs.json.Reads[ProjectPatchForm] = {
      for {
        name <- (__ \ "name").readNullable[String]
        visibility <- (__ \ "visibility").readNullable[io.flow.dependency.v0.models.Visibility]
        scms <- (__ \ "scms").readNullable[io.flow.dependency.v0.models.Scms]
        uri <- (__ \ "uri").readNullable[String]
      } yield ProjectPatchForm(name, visibility, scms, uri)
    }

    def jsObjectProjectPatchForm(obj: io.flow.dependency.v0.models.ProjectPatchForm): play.api.libs.json.JsObject = {
      (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.visibility match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("visibility" -> play.api.libs.json.JsString(x.toString))
      }) ++
      (obj.scms match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("scms" -> play.api.libs.json.JsString(x.toString))
      }) ++
      (obj.uri match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("uri" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDependencyProjectPatchForm: play.api.libs.json.Writes[ProjectPatchForm] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.ProjectPatchForm] {
        def writes(obj: io.flow.dependency.v0.models.ProjectPatchForm) = {
          jsObjectProjectPatchForm(obj)
        }
      }
    }

    implicit def jsonReadsDependencyProjectSummary: play.api.libs.json.Reads[ProjectSummary] = {
      for {
        id <- (__ \ "id").read[String]
        organization <- (__ \ "organization").read[io.flow.dependency.v0.models.OrganizationSummary]
        name <- (__ \ "name").read[String]
      } yield ProjectSummary(id, organization, name)
    }

    def jsObjectProjectSummary(obj: io.flow.dependency.v0.models.ProjectSummary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "name" -> play.api.libs.json.JsString(obj.name)
      ) ++ play.api.libs.json.Json.obj("discriminator" -> "project_summary")
    }

    implicit def jsonWritesDependencyProjectSummary: play.api.libs.json.Writes[ProjectSummary] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.ProjectSummary] {
        def writes(obj: io.flow.dependency.v0.models.ProjectSummary) = {
          jsObjectProjectSummary(obj)
        }
      }
    }

    implicit def jsonReadsDependencyRecommendation: play.api.libs.json.Reads[Recommendation] = {
      for {
        id <- (__ \ "id").read[String]
        project <- (__ \ "project").read[io.flow.dependency.v0.models.ProjectDetail]
        `type` <- (__ \ "type").read[io.flow.dependency.v0.models.RecommendationType]
        `object` <- (__ \ "object").read[io.flow.dependency.v0.models.Reference]
        name <- (__ \ "name").read[String]
        from <- (__ \ "from").read[String]
        to <- (__ \ "to").read[String]
        createdAt <- (__ \ "created_at").read[_root_.org.joda.time.DateTime]
      } yield Recommendation(id, project, `type`, `object`, name, from, to, createdAt)
    }

    def jsObjectRecommendation(obj: io.flow.dependency.v0.models.Recommendation): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "project" -> jsObjectProjectDetail(obj.project),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "object" -> jsObjectReference(obj.`object`),
        "name" -> play.api.libs.json.JsString(obj.name),
        "from" -> play.api.libs.json.JsString(obj.from),
        "to" -> play.api.libs.json.JsString(obj.to),
        "created_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.createdAt))
      )
    }

    implicit def jsonWritesDependencyRecommendation: play.api.libs.json.Writes[Recommendation] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.Recommendation] {
        def writes(obj: io.flow.dependency.v0.models.Recommendation) = {
          jsObjectRecommendation(obj)
        }
      }
    }

    implicit def jsonReadsDependencyReference: play.api.libs.json.Reads[Reference] = {
      (__ \ "id").read[String].map { x => new Reference(id = x) }
    }

    def jsObjectReference(obj: io.flow.dependency.v0.models.Reference): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonWritesDependencyReference: play.api.libs.json.Writes[Reference] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.Reference] {
        def writes(obj: io.flow.dependency.v0.models.Reference) = {
          jsObjectReference(obj)
        }
      }
    }

    implicit def jsonReadsDependencyRepository: play.api.libs.json.Reads[Repository] = {
      for {
        name <- (__ \ "name").read[String]
        visibility <- (__ \ "visibility").read[io.flow.dependency.v0.models.Visibility]
        uri <- (__ \ "uri").read[String]
      } yield Repository(name, visibility, uri)
    }

    def jsObjectRepository(obj: io.flow.dependency.v0.models.Repository): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "uri" -> play.api.libs.json.JsString(obj.uri)
      )
    }

    implicit def jsonWritesDependencyRepository: play.api.libs.json.Writes[Repository] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.Repository] {
        def writes(obj: io.flow.dependency.v0.models.Repository) = {
          jsObjectRepository(obj)
        }
      }
    }

    implicit def jsonReadsDependencyResolver: play.api.libs.json.Reads[Resolver] = {
      for {
        id <- (__ \ "id").read[String]
        visibility <- (__ \ "visibility").read[io.flow.dependency.v0.models.Visibility]
        organization <- (__ \ "organization").readNullable[io.flow.dependency.v0.models.OrganizationSummary]
        uri <- (__ \ "uri").read[String]
        credentials <- (__ \ "credentials").readNullable[io.flow.dependency.v0.models.Credentials]
      } yield Resolver(id, visibility, organization, uri, credentials)
    }

    def jsObjectResolver(obj: io.flow.dependency.v0.models.Resolver): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "uri" -> play.api.libs.json.JsString(obj.uri)
      ) ++ (obj.organization match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("organization" -> jsObjectOrganizationSummary(x))
      }) ++
      (obj.credentials match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("credentials" -> jsObjectCredentials(x))
      })
    }

    implicit def jsonWritesDependencyResolver: play.api.libs.json.Writes[Resolver] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.Resolver] {
        def writes(obj: io.flow.dependency.v0.models.Resolver) = {
          jsObjectResolver(obj)
        }
      }
    }

    implicit def jsonReadsDependencyResolverForm: play.api.libs.json.Reads[ResolverForm] = {
      for {
        visibility <- (__ \ "visibility").read[io.flow.dependency.v0.models.Visibility]
        organization <- (__ \ "organization").read[String]
        uri <- (__ \ "uri").read[String]
        credentials <- (__ \ "credentials").readNullable[io.flow.dependency.v0.models.Credentials]
      } yield ResolverForm(visibility, organization, uri, credentials)
    }

    def jsObjectResolverForm(obj: io.flow.dependency.v0.models.ResolverForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "uri" -> play.api.libs.json.JsString(obj.uri)
      ) ++ (obj.credentials match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("credentials" -> jsObjectCredentials(x))
      })
    }

    implicit def jsonWritesDependencyResolverForm: play.api.libs.json.Writes[ResolverForm] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.ResolverForm] {
        def writes(obj: io.flow.dependency.v0.models.ResolverForm) = {
          jsObjectResolverForm(obj)
        }
      }
    }

    implicit def jsonReadsDependencyResolverSummary: play.api.libs.json.Reads[ResolverSummary] = {
      for {
        id <- (__ \ "id").read[String]
        organization <- (__ \ "organization").readNullable[io.flow.dependency.v0.models.OrganizationSummary]
        visibility <- (__ \ "visibility").read[io.flow.dependency.v0.models.Visibility]
        uri <- (__ \ "uri").read[String]
      } yield ResolverSummary(id, organization, visibility, uri)
    }

    def jsObjectResolverSummary(obj: io.flow.dependency.v0.models.ResolverSummary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "uri" -> play.api.libs.json.JsString(obj.uri)
      ) ++ (obj.organization match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("organization" -> jsObjectOrganizationSummary(x))
      })
    }

    implicit def jsonWritesDependencyResolverSummary: play.api.libs.json.Writes[ResolverSummary] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.ResolverSummary] {
        def writes(obj: io.flow.dependency.v0.models.ResolverSummary) = {
          jsObjectResolverSummary(obj)
        }
      }
    }

    implicit def jsonReadsDependencySubscription: play.api.libs.json.Reads[Subscription] = {
      for {
        id <- (__ \ "id").read[String]
        user <- (__ \ "user").read[io.flow.common.v0.models.UserReference]
        publication <- (__ \ "publication").read[io.flow.dependency.v0.models.Publication]
      } yield Subscription(id, user, publication)
    }

    def jsObjectSubscription(obj: io.flow.dependency.v0.models.Subscription): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "user" -> io.flow.common.v0.models.json.jsObjectUserReference(obj.user),
        "publication" -> play.api.libs.json.JsString(obj.publication.toString)
      )
    }

    implicit def jsonWritesDependencySubscription: play.api.libs.json.Writes[Subscription] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.Subscription] {
        def writes(obj: io.flow.dependency.v0.models.Subscription) = {
          jsObjectSubscription(obj)
        }
      }
    }

    implicit def jsonReadsDependencySubscriptionForm: play.api.libs.json.Reads[SubscriptionForm] = {
      for {
        userId <- (__ \ "user_id").read[String]
        publication <- (__ \ "publication").read[io.flow.dependency.v0.models.Publication]
      } yield SubscriptionForm(userId, publication)
    }

    def jsObjectSubscriptionForm(obj: io.flow.dependency.v0.models.SubscriptionForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "user_id" -> play.api.libs.json.JsString(obj.userId),
        "publication" -> play.api.libs.json.JsString(obj.publication.toString)
      )
    }

    implicit def jsonWritesDependencySubscriptionForm: play.api.libs.json.Writes[SubscriptionForm] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.SubscriptionForm] {
        def writes(obj: io.flow.dependency.v0.models.SubscriptionForm) = {
          jsObjectSubscriptionForm(obj)
        }
      }
    }

    implicit def jsonReadsDependencySync: play.api.libs.json.Reads[Sync] = {
      for {
        id <- (__ \ "id").read[String]
        objectId <- (__ \ "object_id").read[String]
        event <- (__ \ "event").read[io.flow.dependency.v0.models.SyncEvent]
        createdAt <- (__ \ "created_at").read[_root_.org.joda.time.DateTime]
      } yield Sync(id, objectId, event, createdAt)
    }

    def jsObjectSync(obj: io.flow.dependency.v0.models.Sync): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "object_id" -> play.api.libs.json.JsString(obj.objectId),
        "event" -> play.api.libs.json.JsString(obj.event.toString),
        "created_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.createdAt))
      )
    }

    implicit def jsonWritesDependencySync: play.api.libs.json.Writes[Sync] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.Sync] {
        def writes(obj: io.flow.dependency.v0.models.Sync) = {
          jsObjectSync(obj)
        }
      }
    }

    implicit def jsonReadsDependencyTaskDataSync: play.api.libs.json.Reads[TaskDataSync] = {
      (__ \ "type").readNullable[io.flow.dependency.v0.models.SyncType].map { x => new TaskDataSync(`type` = x) }
    }

    def jsObjectTaskDataSync(obj: io.flow.dependency.v0.models.TaskDataSync): play.api.libs.json.JsObject = {
      (obj.`type` match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("type" -> play.api.libs.json.JsString(x.toString))
      }) ++ play.api.libs.json.Json.obj("discriminator" -> "task_data_sync")
    }

    implicit def jsonWritesDependencyTaskDataSync: play.api.libs.json.Writes[TaskDataSync] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.TaskDataSync] {
        def writes(obj: io.flow.dependency.v0.models.TaskDataSync) = {
          jsObjectTaskDataSync(obj)
        }
      }
    }

    implicit def jsonReadsDependencyTaskDataSyncOne: play.api.libs.json.Reads[TaskDataSyncOne] = {
      for {
        id <- (__ \ "id").read[String]
        `type` <- (__ \ "type").read[io.flow.dependency.v0.models.SyncType]
      } yield TaskDataSyncOne(id, `type`)
    }

    def jsObjectTaskDataSyncOne(obj: io.flow.dependency.v0.models.TaskDataSyncOne): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString)
      ) ++ play.api.libs.json.Json.obj("discriminator" -> "task_data_sync_one")
    }

    implicit def jsonWritesDependencyTaskDataSyncOne: play.api.libs.json.Writes[TaskDataSyncOne] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.TaskDataSyncOne] {
        def writes(obj: io.flow.dependency.v0.models.TaskDataSyncOne) = {
          jsObjectTaskDataSyncOne(obj)
        }
      }
    }

    implicit def jsonReadsDependencyTaskDataSyncOrganizationLibraries: play.api.libs.json.Reads[TaskDataSyncOrganizationLibraries] = {
      (__ \ "organization_id").read[String].map { x => new TaskDataSyncOrganizationLibraries(organizationId = x) }
    }

    def jsObjectTaskDataSyncOrganizationLibraries(obj: io.flow.dependency.v0.models.TaskDataSyncOrganizationLibraries): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization_id" -> play.api.libs.json.JsString(obj.organizationId)
      ) ++ play.api.libs.json.Json.obj("discriminator" -> "task_data_sync_organization_libraries")
    }

    implicit def jsonWritesDependencyTaskDataSyncOrganizationLibraries: play.api.libs.json.Writes[TaskDataSyncOrganizationLibraries] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.TaskDataSyncOrganizationLibraries] {
        def writes(obj: io.flow.dependency.v0.models.TaskDataSyncOrganizationLibraries) = {
          jsObjectTaskDataSyncOrganizationLibraries(obj)
        }
      }
    }

    implicit def jsonReadsDependencyTaskDataUpserted: play.api.libs.json.Reads[TaskDataUpserted] = {
      for {
        id <- (__ \ "id").read[String]
        `type` <- (__ \ "type").read[io.flow.dependency.v0.models.SyncType]
      } yield TaskDataUpserted(id, `type`)
    }

    def jsObjectTaskDataUpserted(obj: io.flow.dependency.v0.models.TaskDataUpserted): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString)
      ) ++ play.api.libs.json.Json.obj("discriminator" -> "task_data_upserted")
    }

    implicit def jsonWritesDependencyTaskDataUpserted: play.api.libs.json.Writes[TaskDataUpserted] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.TaskDataUpserted] {
        def writes(obj: io.flow.dependency.v0.models.TaskDataUpserted) = {
          jsObjectTaskDataUpserted(obj)
        }
      }
    }

    implicit def jsonReadsDependencyToken: play.api.libs.json.Reads[Token] = {
      for {
        id <- (__ \ "id").read[String]
        user <- (__ \ "user").read[io.flow.common.v0.models.UserReference]
        masked <- (__ \ "masked").read[String]
        cleartext <- (__ \ "cleartext").readNullable[String]
        description <- (__ \ "description").readNullable[String]
      } yield Token(id, user, masked, cleartext, description)
    }

    def jsObjectToken(obj: io.flow.dependency.v0.models.Token): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "user" -> io.flow.common.v0.models.json.jsObjectUserReference(obj.user),
        "masked" -> play.api.libs.json.JsString(obj.masked)
      ) ++ (obj.cleartext match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("cleartext" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDependencyToken: play.api.libs.json.Writes[Token] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.Token] {
        def writes(obj: io.flow.dependency.v0.models.Token) = {
          jsObjectToken(obj)
        }
      }
    }

    implicit def jsonReadsDependencyTokenForm: play.api.libs.json.Reads[TokenForm] = {
      for {
        userId <- (__ \ "user_id").read[String]
        description <- (__ \ "description").readNullable[String]
      } yield TokenForm(userId, description)
    }

    def jsObjectTokenForm(obj: io.flow.dependency.v0.models.TokenForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "user_id" -> play.api.libs.json.JsString(obj.userId)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDependencyTokenForm: play.api.libs.json.Writes[TokenForm] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.TokenForm] {
        def writes(obj: io.flow.dependency.v0.models.TokenForm) = {
          jsObjectTokenForm(obj)
        }
      }
    }

    implicit def jsonReadsDependencyUserForm: play.api.libs.json.Reads[UserForm] = {
      for {
        email <- (__ \ "email").readNullable[String]
        name <- (__ \ "name").readNullable[io.flow.common.v0.models.Name]
      } yield UserForm(email, name)
    }

    def jsObjectUserForm(obj: io.flow.dependency.v0.models.UserForm): play.api.libs.json.JsObject = {
      (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> io.flow.common.v0.models.json.jsObjectName(x))
      })
    }

    implicit def jsonWritesDependencyUserForm: play.api.libs.json.Writes[UserForm] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.UserForm] {
        def writes(obj: io.flow.dependency.v0.models.UserForm) = {
          jsObjectUserForm(obj)
        }
      }
    }

    implicit def jsonReadsDependencyUserIdentifier: play.api.libs.json.Reads[UserIdentifier] = {
      for {
        id <- (__ \ "id").read[String]
        user <- (__ \ "user").read[io.flow.common.v0.models.UserReference]
        value <- (__ \ "value").read[String]
      } yield UserIdentifier(id, user, value)
    }

    def jsObjectUserIdentifier(obj: io.flow.dependency.v0.models.UserIdentifier): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "user" -> io.flow.common.v0.models.json.jsObjectUserReference(obj.user),
        "value" -> play.api.libs.json.JsString(obj.value)
      )
    }

    implicit def jsonWritesDependencyUserIdentifier: play.api.libs.json.Writes[UserIdentifier] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.UserIdentifier] {
        def writes(obj: io.flow.dependency.v0.models.UserIdentifier) = {
          jsObjectUserIdentifier(obj)
        }
      }
    }

    implicit def jsonReadsDependencyUserSummary: play.api.libs.json.Reads[UserSummary] = {
      for {
        id <- (__ \ "id").read[String]
        email <- (__ \ "email").readNullable[String]
        name <- (__ \ "name").read[io.flow.common.v0.models.Name]
      } yield UserSummary(id, email, name)
    }

    def jsObjectUserSummary(obj: io.flow.dependency.v0.models.UserSummary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> io.flow.common.v0.models.json.jsObjectName(obj.name)
      ) ++ (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDependencyUserSummary: play.api.libs.json.Writes[UserSummary] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.UserSummary] {
        def writes(obj: io.flow.dependency.v0.models.UserSummary) = {
          jsObjectUserSummary(obj)
        }
      }
    }

    implicit def jsonReadsDependencyUsernamePassword: play.api.libs.json.Reads[UsernamePassword] = {
      for {
        username <- (__ \ "username").read[String]
        password <- (__ \ "password").readNullable[String]
      } yield UsernamePassword(username, password)
    }

    def jsObjectUsernamePassword(obj: io.flow.dependency.v0.models.UsernamePassword): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "username" -> play.api.libs.json.JsString(obj.username)
      ) ++ (obj.password match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("password" -> play.api.libs.json.JsString(x))
      }) ++ play.api.libs.json.Json.obj("discriminator" -> "username_password")
    }

    implicit def jsonWritesDependencyUsernamePassword: play.api.libs.json.Writes[UsernamePassword] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.UsernamePassword] {
        def writes(obj: io.flow.dependency.v0.models.UsernamePassword) = {
          jsObjectUsernamePassword(obj)
        }
      }
    }

    implicit def jsonReadsDependencyVersionForm: play.api.libs.json.Reads[VersionForm] = {
      for {
        version <- (__ \ "version").read[String]
        crossBuildVersion <- (__ \ "cross_build_version").readNullable[String]
      } yield VersionForm(version, crossBuildVersion)
    }

    def jsObjectVersionForm(obj: io.flow.dependency.v0.models.VersionForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "version" -> play.api.libs.json.JsString(obj.version)
      ) ++ (obj.crossBuildVersion match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("cross_build_version" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDependencyVersionForm: play.api.libs.json.Writes[VersionForm] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.VersionForm] {
        def writes(obj: io.flow.dependency.v0.models.VersionForm) = {
          jsObjectVersionForm(obj)
        }
      }
    }

    implicit def jsonReadsDependencyCredentials: play.api.libs.json.Reads[Credentials] = new play.api.libs.json.Reads[Credentials] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[Credentials] = {
        (js \ "discriminator").asOpt[String].getOrElse { sys.error("Union[Credentials] requires a discriminator named 'discriminator' - this field was not found in the Json Value") } match {
          case "username_password" => js.validate[io.flow.dependency.v0.models.UsernamePassword]
          case other => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.CredentialsUndefinedType(other))
        }
      }
    }

    def jsObjectCredentials(obj: io.flow.dependency.v0.models.Credentials): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.dependency.v0.models.UsernamePassword => jsObjectUsernamePassword(x)
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesDependencyCredentials: play.api.libs.json.Writes[Credentials] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.Credentials] {
        def writes(obj: io.flow.dependency.v0.models.Credentials) = {
          jsObjectCredentials(obj)
        }
      }
    }

    implicit def jsonReadsDependencyItemSummary: play.api.libs.json.Reads[ItemSummary] = new play.api.libs.json.Reads[ItemSummary] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[ItemSummary] = {
        (js \ "discriminator").asOpt[String].getOrElse { sys.error("Union[ItemSummary] requires a discriminator named 'discriminator' - this field was not found in the Json Value") } match {
          case "binary_summary" => js.validate[io.flow.dependency.v0.models.BinarySummary]
          case "library_summary" => js.validate[io.flow.dependency.v0.models.LibrarySummary]
          case "project_summary" => js.validate[io.flow.dependency.v0.models.ProjectSummary]
          case other => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.ItemSummaryUndefinedType(other))
        }
      }
    }

    def jsObjectItemSummary(obj: io.flow.dependency.v0.models.ItemSummary): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.dependency.v0.models.BinarySummary => jsObjectBinarySummary(x)
        case x: io.flow.dependency.v0.models.LibrarySummary => jsObjectLibrarySummary(x)
        case x: io.flow.dependency.v0.models.ProjectSummary => jsObjectProjectSummary(x)
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesDependencyItemSummary: play.api.libs.json.Writes[ItemSummary] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.ItemSummary] {
        def writes(obj: io.flow.dependency.v0.models.ItemSummary) = {
          jsObjectItemSummary(obj)
        }
      }
    }

    implicit def jsonReadsDependencyTaskData: play.api.libs.json.Reads[TaskData] = new play.api.libs.json.Reads[TaskData] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[TaskData] = {
        (js \ "discriminator").asOpt[String].getOrElse { sys.error("Union[TaskData] requires a discriminator named 'discriminator' - this field was not found in the Json Value") } match {
          case "task_data_upserted" => js.validate[io.flow.dependency.v0.models.TaskDataUpserted]
          case "task_data_sync" => js.validate[io.flow.dependency.v0.models.TaskDataSync]
          case "task_data_sync_one" => js.validate[io.flow.dependency.v0.models.TaskDataSyncOne]
          case "task_data_sync_organization_libraries" => js.validate[io.flow.dependency.v0.models.TaskDataSyncOrganizationLibraries]
          case other => play.api.libs.json.JsSuccess(io.flow.dependency.v0.models.TaskDataUndefinedType(other))
        }
      }
    }

    def jsObjectTaskData(obj: io.flow.dependency.v0.models.TaskData): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.dependency.v0.models.TaskDataUpserted => jsObjectTaskDataUpserted(x)
        case x: io.flow.dependency.v0.models.TaskDataSync => jsObjectTaskDataSync(x)
        case x: io.flow.dependency.v0.models.TaskDataSyncOne => jsObjectTaskDataSyncOne(x)
        case x: io.flow.dependency.v0.models.TaskDataSyncOrganizationLibraries => jsObjectTaskDataSyncOrganizationLibraries(x)
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesDependencyTaskData: play.api.libs.json.Writes[TaskData] = {
      new play.api.libs.json.Writes[io.flow.dependency.v0.models.TaskData] {
        def writes(obj: io.flow.dependency.v0.models.TaskData) = {
          jsObjectTaskData(obj)
        }
      }
    }
  }
}

package io.flow.dependency.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._
    import Models._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    object Models {
      import io.flow.dependency.v0.models._

      val binaryTypeConverter: ApibuilderTypeConverter[io.flow.dependency.v0.models.BinaryType] = new ApibuilderTypeConverter[io.flow.dependency.v0.models.BinaryType] {
        override def convert(value: String): io.flow.dependency.v0.models.BinaryType = io.flow.dependency.v0.models.BinaryType(value)
        override def convert(value: io.flow.dependency.v0.models.BinaryType): String = value.toString
        override def example: io.flow.dependency.v0.models.BinaryType = io.flow.dependency.v0.models.BinaryType.Scala
        override def validValues: Seq[io.flow.dependency.v0.models.BinaryType] = io.flow.dependency.v0.models.BinaryType.all
      }
      implicit def pathBindableBinaryType(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.dependency.v0.models.BinaryType] = ApibuilderPathBindable(binaryTypeConverter)
      implicit def queryStringBindableBinaryType(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.dependency.v0.models.BinaryType] = ApibuilderQueryStringBindable(binaryTypeConverter)

      val publicationConverter: ApibuilderTypeConverter[io.flow.dependency.v0.models.Publication] = new ApibuilderTypeConverter[io.flow.dependency.v0.models.Publication] {
        override def convert(value: String): io.flow.dependency.v0.models.Publication = io.flow.dependency.v0.models.Publication(value)
        override def convert(value: io.flow.dependency.v0.models.Publication): String = value.toString
        override def example: io.flow.dependency.v0.models.Publication = io.flow.dependency.v0.models.Publication.DailySummary
        override def validValues: Seq[io.flow.dependency.v0.models.Publication] = io.flow.dependency.v0.models.Publication.all
      }
      implicit def pathBindablePublication(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.dependency.v0.models.Publication] = ApibuilderPathBindable(publicationConverter)
      implicit def queryStringBindablePublication(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.dependency.v0.models.Publication] = ApibuilderQueryStringBindable(publicationConverter)

      val recommendationTypeConverter: ApibuilderTypeConverter[io.flow.dependency.v0.models.RecommendationType] = new ApibuilderTypeConverter[io.flow.dependency.v0.models.RecommendationType] {
        override def convert(value: String): io.flow.dependency.v0.models.RecommendationType = io.flow.dependency.v0.models.RecommendationType(value)
        override def convert(value: io.flow.dependency.v0.models.RecommendationType): String = value.toString
        override def example: io.flow.dependency.v0.models.RecommendationType = io.flow.dependency.v0.models.RecommendationType.Library
        override def validValues: Seq[io.flow.dependency.v0.models.RecommendationType] = io.flow.dependency.v0.models.RecommendationType.all
      }
      implicit def pathBindableRecommendationType(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.dependency.v0.models.RecommendationType] = ApibuilderPathBindable(recommendationTypeConverter)
      implicit def queryStringBindableRecommendationType(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.dependency.v0.models.RecommendationType] = ApibuilderQueryStringBindable(recommendationTypeConverter)

      val roleConverter: ApibuilderTypeConverter[io.flow.dependency.v0.models.Role] = new ApibuilderTypeConverter[io.flow.dependency.v0.models.Role] {
        override def convert(value: String): io.flow.dependency.v0.models.Role = io.flow.dependency.v0.models.Role(value)
        override def convert(value: io.flow.dependency.v0.models.Role): String = value.toString
        override def example: io.flow.dependency.v0.models.Role = io.flow.dependency.v0.models.Role.Member
        override def validValues: Seq[io.flow.dependency.v0.models.Role] = io.flow.dependency.v0.models.Role.all
      }
      implicit def pathBindableRole(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.dependency.v0.models.Role] = ApibuilderPathBindable(roleConverter)
      implicit def queryStringBindableRole(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.dependency.v0.models.Role] = ApibuilderQueryStringBindable(roleConverter)

      val scmsConverter: ApibuilderTypeConverter[io.flow.dependency.v0.models.Scms] = new ApibuilderTypeConverter[io.flow.dependency.v0.models.Scms] {
        override def convert(value: String): io.flow.dependency.v0.models.Scms = io.flow.dependency.v0.models.Scms(value)
        override def convert(value: io.flow.dependency.v0.models.Scms): String = value.toString
        override def example: io.flow.dependency.v0.models.Scms = io.flow.dependency.v0.models.Scms.Github
        override def validValues: Seq[io.flow.dependency.v0.models.Scms] = io.flow.dependency.v0.models.Scms.all
      }
      implicit def pathBindableScms(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.dependency.v0.models.Scms] = ApibuilderPathBindable(scmsConverter)
      implicit def queryStringBindableScms(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.dependency.v0.models.Scms] = ApibuilderQueryStringBindable(scmsConverter)

      val syncEventConverter: ApibuilderTypeConverter[io.flow.dependency.v0.models.SyncEvent] = new ApibuilderTypeConverter[io.flow.dependency.v0.models.SyncEvent] {
        override def convert(value: String): io.flow.dependency.v0.models.SyncEvent = io.flow.dependency.v0.models.SyncEvent(value)
        override def convert(value: io.flow.dependency.v0.models.SyncEvent): String = value.toString
        override def example: io.flow.dependency.v0.models.SyncEvent = io.flow.dependency.v0.models.SyncEvent.Started
        override def validValues: Seq[io.flow.dependency.v0.models.SyncEvent] = io.flow.dependency.v0.models.SyncEvent.all
      }
      implicit def pathBindableSyncEvent(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.dependency.v0.models.SyncEvent] = ApibuilderPathBindable(syncEventConverter)
      implicit def queryStringBindableSyncEvent(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.dependency.v0.models.SyncEvent] = ApibuilderQueryStringBindable(syncEventConverter)

      val syncTypeConverter: ApibuilderTypeConverter[io.flow.dependency.v0.models.SyncType] = new ApibuilderTypeConverter[io.flow.dependency.v0.models.SyncType] {
        override def convert(value: String): io.flow.dependency.v0.models.SyncType = io.flow.dependency.v0.models.SyncType(value)
        override def convert(value: io.flow.dependency.v0.models.SyncType): String = value.toString
        override def example: io.flow.dependency.v0.models.SyncType = io.flow.dependency.v0.models.SyncType.Project
        override def validValues: Seq[io.flow.dependency.v0.models.SyncType] = io.flow.dependency.v0.models.SyncType.all
      }
      implicit def pathBindableSyncType(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.dependency.v0.models.SyncType] = ApibuilderPathBindable(syncTypeConverter)
      implicit def queryStringBindableSyncType(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.dependency.v0.models.SyncType] = ApibuilderQueryStringBindable(syncTypeConverter)

      val visibilityConverter: ApibuilderTypeConverter[io.flow.dependency.v0.models.Visibility] = new ApibuilderTypeConverter[io.flow.dependency.v0.models.Visibility] {
        override def convert(value: String): io.flow.dependency.v0.models.Visibility = io.flow.dependency.v0.models.Visibility(value)
        override def convert(value: io.flow.dependency.v0.models.Visibility): String = value.toString
        override def example: io.flow.dependency.v0.models.Visibility = io.flow.dependency.v0.models.Visibility.Public
        override def validValues: Seq[io.flow.dependency.v0.models.Visibility] = io.flow.dependency.v0.models.Visibility.all
      }
      implicit def pathBindableVisibility(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.dependency.v0.models.Visibility] = ApibuilderPathBindable(visibilityConverter)
      implicit def queryStringBindableVisibility(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.dependency.v0.models.Visibility] = ApibuilderQueryStringBindable(visibilityConverter)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}


package io.flow.dependency.v0 {

  object Constants {

    val Namespace = "io.flow.dependency.v0"
    val UserAgent = "apibuilder 0.14.96 app.apibuilder.io/flow/dependency/latest/play_2_8_client"
    val Version = "0.7.70"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String,
    auth: scala.Option[io.flow.dependency.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.common.v0.models.json._
    import io.flow.dependency.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.github.v0.models.json._
    import io.flow.healthcheck.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.dependency.v0.Client")

    logger.info(s"Initializing io.flow.dependency.v0.Client for url $baseUrl")

    def binaries: Binaries = Binaries

    def binaryVersions: BinaryVersions = BinaryVersions

    def githubUsers: GithubUsers = GithubUsers

    def githubWebhooks: GithubWebhooks = GithubWebhooks

    def healthchecks: Healthchecks = Healthchecks

    def items: Items = Items

    def libraries: Libraries = Libraries

    def libraryVersions: LibraryVersions = LibraryVersions

    def memberships: Memberships = Memberships

    def organizations: Organizations = Organizations

    def projectBinaries: ProjectBinaries = ProjectBinaries

    def projectLibraries: ProjectLibraries = ProjectLibraries

    def projects: Projects = Projects

    def recommendations: Recommendations = Recommendations

    def repositories: Repositories = Repositories

    def resolvers: Resolvers = Resolvers

    def subscriptions: Subscriptions = Subscriptions

    def syncs: Syncs = Syncs

    def tokens: Tokens = Tokens

    def users: Users = Users

    object Binaries extends Binaries {
      override def get(
        id: _root_.scala.Option[String] = None,
        ids: _root_.scala.Option[Seq[String]] = None,
        projectId: _root_.scala.Option[String] = None,
        name: _root_.scala.Option[String] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Binary]] = {
        val queryParameters = Seq(
          id.map("id" -> _),
          projectId.map("project_id" -> _),
          name.map("name" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          ids.getOrElse(Nil).map("ids" -> _)

        _executeRequest("GET", s"/binaries", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("Seq[io.flow.dependency.v0.models.Binary]", r, _.validate[Seq[io.flow.dependency.v0.models.Binary]])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Binary] = {
        _executeRequest("GET", s"/binaries/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Binary", r, _.validate[io.flow.dependency.v0.models.Binary])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        binaryForm: io.flow.dependency.v0.models.BinaryForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Binary] = {
        val payload = play.api.libs.json.Json.toJson(binaryForm)

        _executeRequest("POST", s"/binaries", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Binary", r, _.validate[io.flow.dependency.v0.models.Binary])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.dependency.v0.errors.GenericErrorsResponse(r)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/binaries/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object BinaryVersions extends BinaryVersions {
      override def get(
        id: _root_.scala.Option[String] = None,
        ids: _root_.scala.Option[Seq[String]] = None,
        binaryId: _root_.scala.Option[String] = None,
        projectId: _root_.scala.Option[String] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.BinaryVersion]] = {
        val queryParameters = Seq(
          id.map("id" -> _),
          binaryId.map("binary_id" -> _),
          projectId.map("project_id" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          ids.getOrElse(Nil).map("ids" -> _)

        _executeRequest("GET", s"/binary_versions", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("Seq[io.flow.dependency.v0.models.BinaryVersion]", r, _.validate[Seq[io.flow.dependency.v0.models.BinaryVersion]])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.BinaryVersion] = {
        _executeRequest("GET", s"/binary_versions/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.BinaryVersion", r, _.validate[io.flow.dependency.v0.models.BinaryVersion])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }
    }

    object GithubUsers extends GithubUsers {
      override def postGithub(
        githubAuthenticationForm: io.flow.dependency.v0.models.GithubAuthenticationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(githubAuthenticationForm)

        _executeRequest("POST", s"/authentications/github", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.common.v0.models.User", r, _.validate[io.flow.common.v0.models.User])
          case r if r.status == 422 => throw io.flow.dependency.v0.errors.GenericErrorsResponse(r)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 422")
        }
      }
    }

    object GithubWebhooks extends GithubWebhooks {
      override def postByProjectId(
        projectId: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("POST", s"/webhooks/github/${play.utils.UriEncoding.encodePathSegment(projectId, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }
    }

    object Healthchecks extends Healthchecks {
      override def getHealthcheck(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.healthcheck.v0.models.Healthcheck] = {
        _executeRequest("GET", s"/_internal_/healthcheck", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.healthcheck.v0.models.Healthcheck", r, _.validate[io.flow.healthcheck.v0.models.Healthcheck])
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Items extends Items {
      override def get(
        q: _root_.scala.Option[String] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Item]] = {
        val queryParameters = Seq(
          q.map("q" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/items", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("Seq[io.flow.dependency.v0.models.Item]", r, _.validate[Seq[io.flow.dependency.v0.models.Item]])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object Libraries extends Libraries {
      override def get(
        id: _root_.scala.Option[String] = None,
        ids: _root_.scala.Option[Seq[String]] = None,
        projectId: _root_.scala.Option[String] = None,
        groupId: _root_.scala.Option[String] = None,
        artifactId: _root_.scala.Option[String] = None,
        resolverId: _root_.scala.Option[String] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Library]] = {
        val queryParameters = Seq(
          id.map("id" -> _),
          projectId.map("project_id" -> _),
          groupId.map("group_id" -> _),
          artifactId.map("artifact_id" -> _),
          resolverId.map("resolver_id" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          ids.getOrElse(Nil).map("ids" -> _)

        _executeRequest("GET", s"/libraries", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("Seq[io.flow.dependency.v0.models.Library]", r, _.validate[Seq[io.flow.dependency.v0.models.Library]])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Library] = {
        _executeRequest("GET", s"/libraries/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Library", r, _.validate[io.flow.dependency.v0.models.Library])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        libraryForm: io.flow.dependency.v0.models.LibraryForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Library] = {
        val payload = play.api.libs.json.Json.toJson(libraryForm)

        _executeRequest("POST", s"/libraries", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Library", r, _.validate[io.flow.dependency.v0.models.Library])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.dependency.v0.errors.GenericErrorsResponse(r)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/libraries/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object LibraryVersions extends LibraryVersions {
      override def get(
        id: _root_.scala.Option[String] = None,
        ids: _root_.scala.Option[Seq[String]] = None,
        libraryId: _root_.scala.Option[String] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.LibraryVersion]] = {
        val queryParameters = Seq(
          id.map("id" -> _),
          libraryId.map("library_id" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          ids.getOrElse(Nil).map("ids" -> _)

        _executeRequest("GET", s"/library_versions", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("Seq[io.flow.dependency.v0.models.LibraryVersion]", r, _.validate[Seq[io.flow.dependency.v0.models.LibraryVersion]])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.LibraryVersion] = {
        _executeRequest("GET", s"/library_versions/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.LibraryVersion", r, _.validate[io.flow.dependency.v0.models.LibraryVersion])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }
    }

    object Memberships extends Memberships {
      override def get(
        id: _root_.scala.Option[String] = None,
        ids: _root_.scala.Option[Seq[String]] = None,
        organization: _root_.scala.Option[String] = None,
        userId: _root_.scala.Option[String] = None,
        role: _root_.scala.Option[io.flow.dependency.v0.models.Role] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Membership]] = {
        val queryParameters = Seq(
          id.map("id" -> _),
          organization.map("organization" -> _),
          userId.map("user_id" -> _),
          role.map("role" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          ids.getOrElse(Nil).map("ids" -> _)

        _executeRequest("GET", s"/memberships", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("Seq[io.flow.dependency.v0.models.Membership]", r, _.validate[Seq[io.flow.dependency.v0.models.Membership]])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Membership] = {
        _executeRequest("GET", s"/memberships/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Membership", r, _.validate[io.flow.dependency.v0.models.Membership])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        membershipForm: io.flow.dependency.v0.models.MembershipForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Membership] = {
        val payload = play.api.libs.json.Json.toJson(membershipForm)

        _executeRequest("POST", s"/memberships", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Membership", r, _.validate[io.flow.dependency.v0.models.Membership])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.dependency.v0.errors.GenericErrorsResponse(r)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 404, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/memberships/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Organizations extends Organizations {
      override def get(
        id: _root_.scala.Option[String] = None,
        ids: _root_.scala.Option[Seq[String]] = None,
        userId: _root_.scala.Option[String] = None,
        key: _root_.scala.Option[String] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Organization]] = {
        val queryParameters = Seq(
          id.map("id" -> _),
          userId.map("user_id" -> _),
          key.map("key" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          ids.getOrElse(Nil).map("ids" -> _)

        _executeRequest("GET", s"/organizations", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("Seq[io.flow.dependency.v0.models.Organization]", r, _.validate[Seq[io.flow.dependency.v0.models.Organization]])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getUsersByUserId(
        userId: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Organization] = {
        _executeRequest("GET", s"/organizations/users/${play.utils.UriEncoding.encodePathSegment(userId, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Organization", r, _.validate[io.flow.dependency.v0.models.Organization])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Organization] = {
        _executeRequest("GET", s"/organizations/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Organization", r, _.validate[io.flow.dependency.v0.models.Organization])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        organizationForm: io.flow.dependency.v0.models.OrganizationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.toJson(organizationForm)

        _executeRequest("POST", s"/organizations", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Organization", r, _.validate[io.flow.dependency.v0.models.Organization])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.dependency.v0.errors.GenericErrorsResponse(r)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def putById(
        id: String,
        organizationForm: io.flow.dependency.v0.models.OrganizationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.toJson(organizationForm)

        _executeRequest("PUT", s"/organizations/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Organization", r, _.validate[io.flow.dependency.v0.models.Organization])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.dependency.v0.errors.GenericErrorsResponse(r)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/organizations/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object ProjectBinaries extends ProjectBinaries {
      override def get(
        id: _root_.scala.Option[String] = None,
        ids: _root_.scala.Option[Seq[String]] = None,
        projectId: _root_.scala.Option[String] = None,
        binaryId: _root_.scala.Option[String] = None,
        isSynced: _root_.scala.Option[Boolean] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.ProjectBinary]] = {
        val queryParameters = Seq(
          id.map("id" -> _),
          projectId.map("project_id" -> _),
          binaryId.map("binary_id" -> _),
          isSynced.map("is_synced" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          ids.getOrElse(Nil).map("ids" -> _)

        _executeRequest("GET", s"/project_binaries", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("Seq[io.flow.dependency.v0.models.ProjectBinary]", r, _.validate[Seq[io.flow.dependency.v0.models.ProjectBinary]])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object ProjectLibraries extends ProjectLibraries {
      override def get(
        id: _root_.scala.Option[String] = None,
        ids: _root_.scala.Option[Seq[String]] = None,
        projectId: _root_.scala.Option[String] = None,
        libraryId: _root_.scala.Option[String] = None,
        isSynced: _root_.scala.Option[Boolean] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.ProjectLibrary]] = {
        val queryParameters = Seq(
          id.map("id" -> _),
          projectId.map("project_id" -> _),
          libraryId.map("library_id" -> _),
          isSynced.map("is_synced" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          ids.getOrElse(Nil).map("ids" -> _)

        _executeRequest("GET", s"/project_libraries", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("Seq[io.flow.dependency.v0.models.ProjectLibrary]", r, _.validate[Seq[io.flow.dependency.v0.models.ProjectLibrary]])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object Projects extends Projects {
      override def get(
        id: _root_.scala.Option[String] = None,
        ids: _root_.scala.Option[Seq[String]] = None,
        organization: _root_.scala.Option[String] = None,
        name: _root_.scala.Option[String] = None,
        groupId: _root_.scala.Option[String] = None,
        artifactId: _root_.scala.Option[String] = None,
        version: _root_.scala.Option[String] = None,
        libraryId: _root_.scala.Option[String] = None,
        binary: _root_.scala.Option[String] = None,
        binaryId: _root_.scala.Option[String] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Project]] = {
        val queryParameters = Seq(
          id.map("id" -> _),
          organization.map("organization" -> _),
          name.map("name" -> _),
          groupId.map("group_id" -> _),
          artifactId.map("artifact_id" -> _),
          version.map("version" -> _),
          libraryId.map("library_id" -> _),
          binary.map("binary" -> _),
          binaryId.map("binary_id" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          ids.getOrElse(Nil).map("ids" -> _)

        _executeRequest("GET", s"/projects", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("Seq[io.flow.dependency.v0.models.Project]", r, _.validate[Seq[io.flow.dependency.v0.models.Project]])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Project] = {
        _executeRequest("GET", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Project", r, _.validate[io.flow.dependency.v0.models.Project])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        projectForm: io.flow.dependency.v0.models.ProjectForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Project] = {
        val payload = play.api.libs.json.Json.toJson(projectForm)

        _executeRequest("POST", s"/projects", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Project", r, _.validate[io.flow.dependency.v0.models.Project])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.dependency.v0.errors.GenericErrorsResponse(r)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def putById(
        id: String,
        projectForm: io.flow.dependency.v0.models.ProjectForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Project] = {
        val payload = play.api.libs.json.Json.toJson(projectForm)

        _executeRequest("PUT", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Project", r, _.validate[io.flow.dependency.v0.models.Project])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.dependency.v0.errors.GenericErrorsResponse(r)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }

      override def patchById(
        id: String,
        projectPatchForm: io.flow.dependency.v0.models.ProjectPatchForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Project] = {
        val payload = play.api.libs.json.Json.toJson(projectPatchForm)

        _executeRequest("PATCH", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Project", r, _.validate[io.flow.dependency.v0.models.Project])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.dependency.v0.errors.GenericErrorsResponse(r)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Recommendations extends Recommendations {
      override def get(
        organization: _root_.scala.Option[String] = None,
        projectId: _root_.scala.Option[String] = None,
        `type`: _root_.scala.Option[io.flow.dependency.v0.models.RecommendationType] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Recommendation]] = {
        val queryParameters = Seq(
          organization.map("organization" -> _),
          projectId.map("project_id" -> _),
          `type`.map("type" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/recommendations", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("Seq[io.flow.dependency.v0.models.Recommendation]", r, _.validate[Seq[io.flow.dependency.v0.models.Recommendation]])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object Repositories extends Repositories {
      override def getGithub(
        owner: _root_.scala.Option[String] = None,
        name: _root_.scala.Option[String] = None,
        organizationId: _root_.scala.Option[String] = None,
        existingProject: _root_.scala.Option[Boolean] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.github.v0.models.Repository]] = {
        val queryParameters = Seq(
          owner.map("owner" -> _),
          name.map("name" -> _),
          organizationId.map("organization_id" -> _),
          existingProject.map("existing_project" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/repositories/github", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("Seq[io.flow.github.v0.models.Repository]", r, _.validate[Seq[io.flow.github.v0.models.Repository]])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.dependency.v0.errors.GenericErrorsResponse(r)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }
    }

    object Resolvers extends Resolvers {
      override def get(
        id: _root_.scala.Option[String] = None,
        ids: _root_.scala.Option[Seq[String]] = None,
        organization: _root_.scala.Option[String] = None,
        visibility: _root_.scala.Option[io.flow.dependency.v0.models.Visibility] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Resolver]] = {
        val queryParameters = Seq(
          id.map("id" -> _),
          organization.map("organization" -> _),
          visibility.map("visibility" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          ids.getOrElse(Nil).map("ids" -> _)

        _executeRequest("GET", s"/resolvers", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("Seq[io.flow.dependency.v0.models.Resolver]", r, _.validate[Seq[io.flow.dependency.v0.models.Resolver]])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Resolver] = {
        _executeRequest("GET", s"/resolvers/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Resolver", r, _.validate[io.flow.dependency.v0.models.Resolver])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        resolverForm: io.flow.dependency.v0.models.ResolverForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Resolver] = {
        val payload = play.api.libs.json.Json.toJson(resolverForm)

        _executeRequest("POST", s"/resolvers", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Resolver", r, _.validate[io.flow.dependency.v0.models.Resolver])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.dependency.v0.errors.GenericErrorsResponse(r)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/resolvers/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Subscriptions extends Subscriptions {
      override def get(
        id: _root_.scala.Option[String] = None,
        ids: _root_.scala.Option[Seq[String]] = None,
        userId: _root_.scala.Option[String] = None,
        identifier: _root_.scala.Option[String] = None,
        publication: _root_.scala.Option[io.flow.dependency.v0.models.Publication] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Subscription]] = {
        val queryParameters = Seq(
          id.map("id" -> _),
          userId.map("user_id" -> _),
          identifier.map("identifier" -> _),
          publication.map("publication" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          ids.getOrElse(Nil).map("ids" -> _)

        _executeRequest("GET", s"/subscriptions", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("Seq[io.flow.dependency.v0.models.Subscription]", r, _.validate[Seq[io.flow.dependency.v0.models.Subscription]])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Subscription] = {
        _executeRequest("GET", s"/subscriptions/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Subscription", r, _.validate[io.flow.dependency.v0.models.Subscription])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        subscriptionForm: io.flow.dependency.v0.models.SubscriptionForm,
        identifier: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Subscription] = {
        val payload = play.api.libs.json.Json.toJson(subscriptionForm)

        val queryParameters = Seq(
          identifier.map("identifier" -> _)
        ).flatten

        _executeRequest("POST", s"/subscriptions", body = Some(payload), queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Subscription", r, _.validate[io.flow.dependency.v0.models.Subscription])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.dependency.v0.errors.GenericErrorsResponse(r)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def deleteById(
        id: String,
        identifier: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        val queryParameters = Seq(
          identifier.map("identifier" -> _)
        ).flatten

        _executeRequest("DELETE", s"/subscriptions/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Syncs extends Syncs {
      override def get(
        objectId: _root_.scala.Option[String] = None,
        event: _root_.scala.Option[io.flow.dependency.v0.models.SyncEvent] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Sync]] = {
        val queryParameters = Seq(
          objectId.map("object_id" -> _),
          event.map("event" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/syncs", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("Seq[io.flow.dependency.v0.models.Sync]", r, _.validate[Seq[io.flow.dependency.v0.models.Sync]])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def postLibrariesByOrganization(
        organization: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("POST", s"/syncs/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}/libraries", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 404")
        }
      }

      override def postBinariesById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("POST", s"/syncs/binaries/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 404")
        }
      }

      override def postLibrariesById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("POST", s"/syncs/libraries/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 404")
        }
      }

      override def postProjectsById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("POST", s"/syncs/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 404")
        }
      }
    }

    object Tokens extends Tokens {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        userId: _root_.scala.Option[String] = None,
        limit: Long = 25L,
        offset: Long = 0L,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Token]] = {
        val queryParameters = Seq(
          userId.map("user_id" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/tokens", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("Seq[io.flow.dependency.v0.models.Token]", r, _.validate[Seq[io.flow.dependency.v0.models.Token]])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Token] = {
        _executeRequest("GET", s"/tokens/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Token", r, _.validate[io.flow.dependency.v0.models.Token])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        tokenForm: io.flow.dependency.v0.models.TokenForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Token] = {
        val payload = play.api.libs.json.Json.toJson(tokenForm)

        _executeRequest("POST", s"/tokens", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.Token", r, _.validate[io.flow.dependency.v0.models.Token])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.dependency.v0.errors.GenericErrorsResponse(r)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/tokens/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Users extends Users {
      override def get(
        id: _root_.scala.Option[String] = None,
        email: _root_.scala.Option[String] = None,
        identifier: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.common.v0.models.User]] = {
        val queryParameters = Seq(
          id.map("id" -> _),
          email.map("email" -> _),
          identifier.map("identifier" -> _)
        ).flatten

        _executeRequest("GET", s"/users", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("Seq[io.flow.common.v0.models.User]", r, _.validate[Seq[io.flow.common.v0.models.User]])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.dependency.v0.errors.GenericErrorsResponse(r)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.User] = {
        _executeRequest("GET", s"/users/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.common.v0.models.User", r, _.validate[io.flow.common.v0.models.User])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def getIdentifierById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.UserIdentifier] = {
        _executeRequest("GET", s"/users/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}/identifier", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.dependency.v0.models.UserIdentifier", r, _.validate[io.flow.dependency.v0.models.UserIdentifier])
          case r if r.status == 401 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.dependency.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        userForm: io.flow.dependency.v0.models.UserForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(userForm)

        _executeRequest("POST", s"/users", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.dependency.v0.Client.parseJson("io.flow.common.v0.models.User", r, _.validate[io.flow.common.v0.models.User])
          case r if r.status == 422 => throw io.flow.dependency.v0.errors.GenericErrorsResponse(r)
          case r => throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 422")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).addHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).addHttpHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method '$url'")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' '$url'")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    ): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.flow.dependency.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    final case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def binaries: io.flow.dependency.v0.Binaries
      def binaryVersions: io.flow.dependency.v0.BinaryVersions
      def githubUsers: io.flow.dependency.v0.GithubUsers
      def githubWebhooks: io.flow.dependency.v0.GithubWebhooks
      def healthchecks: io.flow.dependency.v0.Healthchecks
      def items: io.flow.dependency.v0.Items
      def libraries: io.flow.dependency.v0.Libraries
      def libraryVersions: io.flow.dependency.v0.LibraryVersions
      def memberships: io.flow.dependency.v0.Memberships
      def organizations: io.flow.dependency.v0.Organizations
      def projectBinaries: io.flow.dependency.v0.ProjectBinaries
      def projectLibraries: io.flow.dependency.v0.ProjectLibraries
      def projects: io.flow.dependency.v0.Projects
      def recommendations: io.flow.dependency.v0.Recommendations
      def repositories: io.flow.dependency.v0.Repositories
      def resolvers: io.flow.dependency.v0.Resolvers
      def subscriptions: io.flow.dependency.v0.Subscriptions
      def syncs: io.flow.dependency.v0.Syncs
      def tokens: io.flow.dependency.v0.Tokens
      def users: io.flow.dependency.v0.Users
    }

  }

  trait Binaries {
    /**
     * Search binaries. Results are paginated
     *
     * @param id Find binary with this id. Exact match
     * @param ids Filter by any one of these ids
     * @param projectId Find binaries associated with this project
     * @param name Find project with this name. Case in-sensitive. Exact match
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[String] = None,
      ids: _root_.scala.Option[Seq[String]] = None,
      projectId: _root_.scala.Option[String] = None,
      name: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Binary]]

    /**
     * Returns information about the binary with this id.
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Binary]

    /**
     * Create a new binary.
     */
    def post(
      binaryForm: io.flow.dependency.v0.models.BinaryForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Binary]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait BinaryVersions {
    /**
     * Search binary versions. Results are paginated
     *
     * @param id Find binary version with this id. Exact match
     * @param ids Filter by any one of these ids
     * @param binaryId Find binaries associated with this binary
     * @param projectId Find binaries associated with this project
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[String] = None,
      ids: _root_.scala.Option[Seq[String]] = None,
      binaryId: _root_.scala.Option[String] = None,
      projectId: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.BinaryVersion]]

    /**
     * Returns information about the binary version with this id.
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.BinaryVersion]
  }

  trait GithubUsers {
    /**
     * Used to authenticate a user via github
     */
    def postGithub(
      githubAuthenticationForm: io.flow.dependency.v0.models.GithubAuthenticationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.User]
  }

  trait GithubWebhooks {
    /**
     * Receives a webhook on push for this particular project
     */
    def postByProjectId(
      projectId: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Healthchecks {
    def getHealthcheck(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.healthcheck.v0.models.Healthcheck]
  }

  trait Items {
    /**
     * Returns a list of all matching items
     *
     * @param q Actual search query
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      q: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Item]]
  }

  trait Libraries {
    /**
     * Search libraries. Results are paginated
     *
     * @param id Find library with this id. Exact match
     * @param ids Filter by any one of these ids
     * @param projectId Find binaries associated with this project
     * @param groupId Find library with this group_id. Case sensitive. Exact match
     * @param artifactId Find library with this artifact_id. Case sensitive. Exact match
     * @param resolverId Find libraries resolved with this resolver
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[String] = None,
      ids: _root_.scala.Option[Seq[String]] = None,
      projectId: _root_.scala.Option[String] = None,
      groupId: _root_.scala.Option[String] = None,
      artifactId: _root_.scala.Option[String] = None,
      resolverId: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Library]]

    /**
     * Returns information about the library with this id.
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Library]

    /**
     * Create a new library.
     */
    def post(
      libraryForm: io.flow.dependency.v0.models.LibraryForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Library]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait LibraryVersions {
    /**
     * Search library versions. Results are paginated
     *
     * @param id Find library version with this id. Exact match
     * @param ids Filter by any one of these ids
     * @param libraryId Find binaries associated with this binary
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[String] = None,
      ids: _root_.scala.Option[Seq[String]] = None,
      libraryId: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.LibraryVersion]]

    /**
     * Returns information about the library version with this id.
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.LibraryVersion]
  }

  trait Memberships {
    /**
     * Search all memberships. Results are always paginated.
     *
     * @param id Find organization with this id. Exact match
     * @param ids Filter by any one of these ids
     * @param organization Filter to organization with this key. Case insensitive
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[String] = None,
      ids: _root_.scala.Option[Seq[String]] = None,
      organization: _root_.scala.Option[String] = None,
      userId: _root_.scala.Option[String] = None,
      role: _root_.scala.Option[io.flow.dependency.v0.models.Role] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Membership]]

    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Membership]

    def post(
      membershipForm: io.flow.dependency.v0.models.MembershipForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Membership]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Organizations {
    /**
     * Search organizations. Results are paginated
     *
     * @param id Find organization with this id. Exact match
     * @param ids Filter by any one of these ids
     * @param userId Find organizations that this user has access to
     * @param key Find organization with this key. Case in-sensitive. Exact match
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[String] = None,
      ids: _root_.scala.Option[Seq[String]] = None,
      userId: _root_.scala.Option[String] = None,
      key: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Organization]]

    /**
     * Returns the organization representing the individual user.
     *
     * @param userId Find organization representing this user
     */
    def getUsersByUserId(
      userId: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Organization]

    /**
     * Returns information about the organization with this id.
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Organization]

    /**
     * Create a new organization.
     */
    def post(
      organizationForm: io.flow.dependency.v0.models.OrganizationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Organization]

    /**
     * Update an existing organization.
     */
    def putById(
      id: String,
      organizationForm: io.flow.dependency.v0.models.OrganizationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Organization]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait ProjectBinaries {
    /**
     * Search project binaries. Results are paginated
     *
     * @param id Find project binary with this id. Exact match
     * @param ids Filter by any one of these ids
     * @param projectId filter by this project
     * @param binaryId filter by this binary
     * @param isSynced If true, filter by project binaries that have been synced. False to filter by
     *        project binaries that have not yet been synced. Main purpose of this filter is
     *        to see what binaries we are still evaluating after a project is added for the
     *        first time.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[String] = None,
      ids: _root_.scala.Option[Seq[String]] = None,
      projectId: _root_.scala.Option[String] = None,
      binaryId: _root_.scala.Option[String] = None,
      isSynced: _root_.scala.Option[Boolean] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.ProjectBinary]]
  }

  trait ProjectLibraries {
    /**
     * Search project libraries. Results are paginated
     *
     * @param id Find project library with this id. Exact match
     * @param ids Filter by any one of these ids
     * @param projectId filter by this project
     * @param libraryId filter by this library
     * @param isSynced If true, filter by project libraries that have been synced. False to filter by
     *        project libraries that have not yet been synced. Main purpose of this filter is
     *        to see what libraries we are still evaluating after a project is added for the
     *        first time.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[String] = None,
      ids: _root_.scala.Option[Seq[String]] = None,
      projectId: _root_.scala.Option[String] = None,
      libraryId: _root_.scala.Option[String] = None,
      isSynced: _root_.scala.Option[Boolean] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.ProjectLibrary]]
  }

  trait Projects {
    /**
     * Search projects. Results are paginated
     *
     * @param id Find project with this id. Exact match
     * @param ids Filter by any one of these ids
     * @param organization Filter to resolvers belongs to the organization with this key
     * @param name Find project with this name. Case in-sensitive. Exact match
     * @param groupId Find projects that are dependent on a library with this group ID. Exact match
     * @param artifactId Find projects that are dependent on a library with this artifact ID. Exact match
     * @param version Find projects that are dependent on a library with this version number. Exact
     *        match
     * @param libraryId Find projects that are dependent on a library
     * @param binary Find projects that are dependent on this binary. Case in-sensitive. Exact match
     * @param binaryId Find projects that are dependent on a binary
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[String] = None,
      ids: _root_.scala.Option[Seq[String]] = None,
      organization: _root_.scala.Option[String] = None,
      name: _root_.scala.Option[String] = None,
      groupId: _root_.scala.Option[String] = None,
      artifactId: _root_.scala.Option[String] = None,
      version: _root_.scala.Option[String] = None,
      libraryId: _root_.scala.Option[String] = None,
      binary: _root_.scala.Option[String] = None,
      binaryId: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Project]]

    /**
     * Returns information about the project with this id.
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Project]

    /**
     * Create a new project.
     */
    def post(
      projectForm: io.flow.dependency.v0.models.ProjectForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Project]

    /**
     * Update an existing project.
     */
    def putById(
      id: String,
      projectForm: io.flow.dependency.v0.models.ProjectForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Project]

    /**
     * Patch an existing project
     */
    def patchById(
      id: String,
      projectPatchForm: io.flow.dependency.v0.models.ProjectPatchForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Project]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Recommendations {
    /**
     * Returns a list of recommendations for this user
     *
     * @param organization Optionally filter to recommendations for this organization
     * @param projectId Optionally filter by project
     * @param type Optionally filter by type of recommendation.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      organization: _root_.scala.Option[String] = None,
      projectId: _root_.scala.Option[String] = None,
      `type`: _root_.scala.Option[io.flow.dependency.v0.models.RecommendationType] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Recommendation]]
  }

  trait Repositories {
    /**
     * Returns a list of repositories from github
     *
     * @param owner Optionally filter by owner name. Case in-sensitive. Exact match
     * @param name Optionally filter by repo name. Case in-sensitive. Exact match
     * @param organizationId If specified, we enable additional filtering by this organization (see
     *        existing_project parameter).
     * @param existingProject Optionally filter by repositories that are either already mapped to existing
     *        projects or not. Requires organization_id parameter to also be specified.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def getGithub(
      owner: _root_.scala.Option[String] = None,
      name: _root_.scala.Option[String] = None,
      organizationId: _root_.scala.Option[String] = None,
      existingProject: _root_.scala.Option[Boolean] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.github.v0.models.Repository]]
  }

  trait Resolvers {
    /**
     * Search resolvers. Results are paginated
     *
     * @param id Find resolver with this id. Exact match
     * @param ids Filter by any one of these ids
     * @param organization Filter to resolvers belongs to the organization with this key
     * @param visibility Filter based on visibility
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[String] = None,
      ids: _root_.scala.Option[Seq[String]] = None,
      organization: _root_.scala.Option[String] = None,
      visibility: _root_.scala.Option[io.flow.dependency.v0.models.Visibility] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Resolver]]

    /**
     * Returns information about the resolver with this id.
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Resolver]

    /**
     * Create a new resolver.
     */
    def post(
      resolverForm: io.flow.dependency.v0.models.ResolverForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Resolver]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Subscriptions {
    /**
     * Search subscriptions. Always paginated.
     *
     * @param id Find the subscription with this id.
     * @param ids Filter by any one of these ids
     * @param userId Find subscriptions for this user.
     * @param identifier Find subscriptions associated with this user identifier. Exact match
     * @param publication Find subscriptions for this publication.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[String] = None,
      ids: _root_.scala.Option[Seq[String]] = None,
      userId: _root_.scala.Option[String] = None,
      identifier: _root_.scala.Option[String] = None,
      publication: _root_.scala.Option[io.flow.dependency.v0.models.Publication] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Subscription]]

    /**
     * Returns information about a specific subscription.
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Subscription]

    /**
     * Create a new subscription.
     *
     * @param identifier If a user identifier is provided, authentication is bypassed
     */
    def post(
      subscriptionForm: io.flow.dependency.v0.models.SubscriptionForm,
      identifier: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Subscription]

    /**
     * @param identifier If a user identifier is provided, authentication is bypassed
     */
    def deleteById(
      id: String,
      identifier: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Syncs {
    /**
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      objectId: _root_.scala.Option[String] = None,
      event: _root_.scala.Option[io.flow.dependency.v0.models.SyncEvent] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Sync]]

    /**
     * Synchronize libraries for resolvers associated with this organization
     */
    def postLibrariesByOrganization(
      organization: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    def postBinariesById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    def postLibrariesById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    def postProjectsById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Tokens {
    /**
     * @param id Filter by any one of these ids
     * @param userId Find tokens for this user.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      userId: _root_.scala.Option[String] = None,
      limit: Long = 25L,
      offset: Long = 0L,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.dependency.v0.models.Token]]

    /**
     * Used to fetch one token
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Token]

    /**
     * Create a new API token for this user
     */
    def post(
      tokenForm: io.flow.dependency.v0.models.TokenForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.Token]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Users {
    /**
     * Search for a specific user. You must specify at least 1 parameter - either a id
     * or email - and will receive back either 0 or 1 users.
     *
     * @param id Find user with this id. Exact match
     * @param email Find user with this email address. Case in-sensitive. Exact match
     * @param identifier Find user associated with this randomly generated identifier. Exact match
     */
    def get(
      id: _root_.scala.Option[String] = None,
      email: _root_.scala.Option[String] = None,
      identifier: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.common.v0.models.User]]

    /**
     * Returns information about the user with this id.
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.User]

    /**
     * Returns the latest identifier for this user. The basic use case is to enable
     * things like unsubscribe w/out  login (and thus once you have an identifier, you
     * can GET /users?identifier=xxx). Identifiers are rotated regularly with last n
     * identifiers being valid (allowing eventual expiration).
     */
    def getIdentifierById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.dependency.v0.models.UserIdentifier]

    /**
     * Create a new user.
     */
    def post(
      userForm: io.flow.dependency.v0.models.UserForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.User]
  }

  package errors {

    import io.flow.common.v0.models.json._
    import io.flow.dependency.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.github.v0.models.json._
    import io.flow.healthcheck.v0.models.json._

    final case class GenericErrorsResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val genericErrors = _root_.io.flow.dependency.v0.Client.parseJson("Seq[io.flow.error.v0.models.GenericError]", response, _.validate[Seq[io.flow.error.v0.models.GenericError]])
    }

    final case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    final case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}