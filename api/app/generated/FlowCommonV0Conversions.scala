/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.9.79
 * apibuilder 0.15.11 app.apibuilder.io/flow/common/latest/anorm_2_8_parsers
 */
package io.flow.common.v0.anorm.conversions {

  import anorm.{Column, MetaDataItem, TypeDoesNotMatch}
  import play.api.libs.json.{JsArray, JsObject, JsValue}
  import scala.util.{Failure, Success, Try}
  import play.api.libs.json.JodaReads._

  /**
    * Conversions to collections of objects using JSON.
    */
  object Util {

    def parser[T](
      f: play.api.libs.json.JsValue => T
    ) = anorm.Column.nonNull { (value, meta) =>
      val MetaDataItem(columnName, nullable, clazz) = meta
      value match {
        case json: org.postgresql.util.PGobject => parseJson(f, columnName.qualified, json.getValue)
        case json: java.lang.String => parseJson(f, columnName.qualified, json)
        case _=> {
          Left(
            TypeDoesNotMatch(
              s"Column[${columnName.qualified}] error converting $value to Json. Expected instance of type[org.postgresql.util.PGobject] and not[${value.asInstanceOf[AnyRef].getClass}]"
            )
          )
        }


      }
    }

    private[this] def parseJson[T](f: play.api.libs.json.JsValue => T, columnName: String, value: String) = {
      Try {
        f(
          play.api.libs.json.Json.parse(value)
        )
      } match {
        case Success(result) => Right(result)
        case Failure(ex) => Left(
          TypeDoesNotMatch(
            s"Column[$columnName] error parsing json $value: $ex"
          )
        )
      }
    }

  }

  object Types {
    import io.flow.common.v0.models.json._
    implicit val columnToSeqCommonAttributeDataType: Column[Seq[_root_.io.flow.common.v0.models.AttributeDataType]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.AttributeDataType]] }
    implicit val columnToMapCommonAttributeDataType: Column[Map[String, _root_.io.flow.common.v0.models.AttributeDataType]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.AttributeDataType]] }
    implicit val columnToSeqCommonAvailabilityStatus: Column[Seq[_root_.io.flow.common.v0.models.AvailabilityStatus]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.AvailabilityStatus]] }
    implicit val columnToMapCommonAvailabilityStatus: Column[Map[String, _root_.io.flow.common.v0.models.AvailabilityStatus]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.AvailabilityStatus]] }
    implicit val columnToSeqCommonCalendar: Column[Seq[_root_.io.flow.common.v0.models.Calendar]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Calendar]] }
    implicit val columnToMapCommonCalendar: Column[Map[String, _root_.io.flow.common.v0.models.Calendar]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Calendar]] }
    implicit val columnToSeqCommonCapability: Column[Seq[_root_.io.flow.common.v0.models.Capability]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Capability]] }
    implicit val columnToMapCommonCapability: Column[Map[String, _root_.io.flow.common.v0.models.Capability]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Capability]] }
    implicit val columnToSeqCommonChangeType: Column[Seq[_root_.io.flow.common.v0.models.ChangeType]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.ChangeType]] }
    implicit val columnToMapCommonChangeType: Column[Map[String, _root_.io.flow.common.v0.models.ChangeType]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.ChangeType]] }
    implicit val columnToSeqCommonCurrencyLabelFormatter: Column[Seq[_root_.io.flow.common.v0.models.CurrencyLabelFormatter]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.CurrencyLabelFormatter]] }
    implicit val columnToMapCommonCurrencyLabelFormatter: Column[Map[String, _root_.io.flow.common.v0.models.CurrencyLabelFormatter]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.CurrencyLabelFormatter]] }
    implicit val columnToSeqCommonCurrencySymbolFormat: Column[Seq[_root_.io.flow.common.v0.models.CurrencySymbolFormat]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.CurrencySymbolFormat]] }
    implicit val columnToMapCommonCurrencySymbolFormat: Column[Map[String, _root_.io.flow.common.v0.models.CurrencySymbolFormat]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.CurrencySymbolFormat]] }
    implicit val columnToSeqCommonDayOfWeek: Column[Seq[_root_.io.flow.common.v0.models.DayOfWeek]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.DayOfWeek]] }
    implicit val columnToMapCommonDayOfWeek: Column[Map[String, _root_.io.flow.common.v0.models.DayOfWeek]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.DayOfWeek]] }
    implicit val columnToSeqCommonDeliveredDuty: Column[Seq[_root_.io.flow.common.v0.models.DeliveredDuty]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.DeliveredDuty]] }
    implicit val columnToMapCommonDeliveredDuty: Column[Map[String, _root_.io.flow.common.v0.models.DeliveredDuty]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.DeliveredDuty]] }
    implicit val columnToSeqCommonDiscountTarget: Column[Seq[_root_.io.flow.common.v0.models.DiscountTarget]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.DiscountTarget]] }
    implicit val columnToMapCommonDiscountTarget: Column[Map[String, _root_.io.flow.common.v0.models.DiscountTarget]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.DiscountTarget]] }
    implicit val columnToSeqCommonEnvironment: Column[Seq[_root_.io.flow.common.v0.models.Environment]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Environment]] }
    implicit val columnToMapCommonEnvironment: Column[Map[String, _root_.io.flow.common.v0.models.Environment]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Environment]] }
    implicit val columnToSeqCommonExceptionType: Column[Seq[_root_.io.flow.common.v0.models.ExceptionType]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.ExceptionType]] }
    implicit val columnToMapCommonExceptionType: Column[Map[String, _root_.io.flow.common.v0.models.ExceptionType]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.ExceptionType]] }
    implicit val columnToSeqCommonGoodsSupply: Column[Seq[_root_.io.flow.common.v0.models.GoodsSupply]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.GoodsSupply]] }
    implicit val columnToMapCommonGoodsSupply: Column[Map[String, _root_.io.flow.common.v0.models.GoodsSupply]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.GoodsSupply]] }
    implicit val columnToSeqCommonHolidayCalendar: Column[Seq[_root_.io.flow.common.v0.models.HolidayCalendar]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.HolidayCalendar]] }
    implicit val columnToMapCommonHolidayCalendar: Column[Map[String, _root_.io.flow.common.v0.models.HolidayCalendar]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.HolidayCalendar]] }
    implicit val columnToSeqCommonIncludedLevyKey: Column[Seq[_root_.io.flow.common.v0.models.IncludedLevyKey]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.IncludedLevyKey]] }
    implicit val columnToMapCommonIncludedLevyKey: Column[Map[String, _root_.io.flow.common.v0.models.IncludedLevyKey]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.IncludedLevyKey]] }
    implicit val columnToSeqCommonIncoterm: Column[Seq[_root_.io.flow.common.v0.models.Incoterm]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Incoterm]] }
    implicit val columnToMapCommonIncoterm: Column[Map[String, _root_.io.flow.common.v0.models.Incoterm]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Incoterm]] }
    implicit val columnToSeqCommonInputSpecificationType: Column[Seq[_root_.io.flow.common.v0.models.InputSpecificationType]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.InputSpecificationType]] }
    implicit val columnToMapCommonInputSpecificationType: Column[Map[String, _root_.io.flow.common.v0.models.InputSpecificationType]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.InputSpecificationType]] }
    implicit val columnToSeqCommonMarginType: Column[Seq[_root_.io.flow.common.v0.models.MarginType]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.MarginType]] }
    implicit val columnToMapCommonMarginType: Column[Map[String, _root_.io.flow.common.v0.models.MarginType]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.MarginType]] }
    implicit val columnToSeqCommonMeasurementSystem: Column[Seq[_root_.io.flow.common.v0.models.MeasurementSystem]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.MeasurementSystem]] }
    implicit val columnToMapCommonMeasurementSystem: Column[Map[String, _root_.io.flow.common.v0.models.MeasurementSystem]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.MeasurementSystem]] }
    implicit val columnToSeqCommonMerchantOfRecord: Column[Seq[_root_.io.flow.common.v0.models.MerchantOfRecord]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.MerchantOfRecord]] }
    implicit val columnToMapCommonMerchantOfRecord: Column[Map[String, _root_.io.flow.common.v0.models.MerchantOfRecord]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.MerchantOfRecord]] }
    implicit val columnToSeqCommonOrderMerchantOfRecord: Column[Seq[_root_.io.flow.common.v0.models.OrderMerchantOfRecord]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.OrderMerchantOfRecord]] }
    implicit val columnToMapCommonOrderMerchantOfRecord: Column[Map[String, _root_.io.flow.common.v0.models.OrderMerchantOfRecord]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.OrderMerchantOfRecord]] }
    implicit val columnToSeqCommonOrganizationStatus: Column[Seq[_root_.io.flow.common.v0.models.OrganizationStatus]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.OrganizationStatus]] }
    implicit val columnToMapCommonOrganizationStatus: Column[Map[String, _root_.io.flow.common.v0.models.OrganizationStatus]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.OrganizationStatus]] }
    implicit val columnToSeqCommonPriceBookStatus: Column[Seq[_root_.io.flow.common.v0.models.PriceBookStatus]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.PriceBookStatus]] }
    implicit val columnToMapCommonPriceBookStatus: Column[Map[String, _root_.io.flow.common.v0.models.PriceBookStatus]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.PriceBookStatus]] }
    implicit val columnToSeqCommonRole: Column[Seq[_root_.io.flow.common.v0.models.Role]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Role]] }
    implicit val columnToMapCommonRole: Column[Map[String, _root_.io.flow.common.v0.models.Role]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Role]] }
    implicit val columnToSeqCommonRoundingMethod: Column[Seq[_root_.io.flow.common.v0.models.RoundingMethod]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.RoundingMethod]] }
    implicit val columnToMapCommonRoundingMethod: Column[Map[String, _root_.io.flow.common.v0.models.RoundingMethod]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.RoundingMethod]] }
    implicit val columnToSeqCommonRoundingType: Column[Seq[_root_.io.flow.common.v0.models.RoundingType]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.RoundingType]] }
    implicit val columnToMapCommonRoundingType: Column[Map[String, _root_.io.flow.common.v0.models.RoundingType]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.RoundingType]] }
    implicit val columnToSeqCommonScheduleExceptionStatus: Column[Seq[_root_.io.flow.common.v0.models.ScheduleExceptionStatus]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.ScheduleExceptionStatus]] }
    implicit val columnToMapCommonScheduleExceptionStatus: Column[Map[String, _root_.io.flow.common.v0.models.ScheduleExceptionStatus]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.ScheduleExceptionStatus]] }
    implicit val columnToSeqCommonSortDirection: Column[Seq[_root_.io.flow.common.v0.models.SortDirection]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.SortDirection]] }
    implicit val columnToMapCommonSortDirection: Column[Map[String, _root_.io.flow.common.v0.models.SortDirection]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.SortDirection]] }
    implicit val columnToSeqCommonUnitOfMeasurement: Column[Seq[_root_.io.flow.common.v0.models.UnitOfMeasurement]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.UnitOfMeasurement]] }
    implicit val columnToMapCommonUnitOfMeasurement: Column[Map[String, _root_.io.flow.common.v0.models.UnitOfMeasurement]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.UnitOfMeasurement]] }
    implicit val columnToSeqCommonUnitOfTime: Column[Seq[_root_.io.flow.common.v0.models.UnitOfTime]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.UnitOfTime]] }
    implicit val columnToMapCommonUnitOfTime: Column[Map[String, _root_.io.flow.common.v0.models.UnitOfTime]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.UnitOfTime]] }
    implicit val columnToSeqCommonUserStatus: Column[Seq[_root_.io.flow.common.v0.models.UserStatus]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.UserStatus]] }
    implicit val columnToMapCommonUserStatus: Column[Map[String, _root_.io.flow.common.v0.models.UserStatus]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.UserStatus]] }
    implicit val columnToSeqCommonValueAddedService: Column[Seq[_root_.io.flow.common.v0.models.ValueAddedService]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.ValueAddedService]] }
    implicit val columnToMapCommonValueAddedService: Column[Map[String, _root_.io.flow.common.v0.models.ValueAddedService]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.ValueAddedService]] }
    implicit val columnToSeqCommonVisibility: Column[Seq[_root_.io.flow.common.v0.models.Visibility]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Visibility]] }
    implicit val columnToMapCommonVisibility: Column[Map[String, _root_.io.flow.common.v0.models.Visibility]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Visibility]] }
    implicit val columnToSeqCommonAddress: Column[Seq[_root_.io.flow.common.v0.models.Address]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Address]] }
    implicit val columnToMapCommonAddress: Column[Map[String, _root_.io.flow.common.v0.models.Address]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Address]] }
    implicit val columnToSeqCommonBillingAddress: Column[Seq[_root_.io.flow.common.v0.models.BillingAddress]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.BillingAddress]] }
    implicit val columnToMapCommonBillingAddress: Column[Map[String, _root_.io.flow.common.v0.models.BillingAddress]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.BillingAddress]] }
    implicit val columnToSeqCommonCatalogItemReference: Column[Seq[_root_.io.flow.common.v0.models.CatalogItemReference]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.CatalogItemReference]] }
    implicit val columnToMapCommonCatalogItemReference: Column[Map[String, _root_.io.flow.common.v0.models.CatalogItemReference]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.CatalogItemReference]] }
    implicit val columnToSeqCommonCatalogItemSummary: Column[Seq[_root_.io.flow.common.v0.models.CatalogItemSummary]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.CatalogItemSummary]] }
    implicit val columnToMapCommonCatalogItemSummary: Column[Map[String, _root_.io.flow.common.v0.models.CatalogItemSummary]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.CatalogItemSummary]] }
    implicit val columnToSeqCommonCheckoutReference: Column[Seq[_root_.io.flow.common.v0.models.CheckoutReference]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.CheckoutReference]] }
    implicit val columnToMapCommonCheckoutReference: Column[Map[String, _root_.io.flow.common.v0.models.CheckoutReference]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.CheckoutReference]] }
    implicit val columnToSeqCommonContact: Column[Seq[_root_.io.flow.common.v0.models.Contact]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Contact]] }
    implicit val columnToMapCommonContact: Column[Map[String, _root_.io.flow.common.v0.models.Contact]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Contact]] }
    implicit val columnToSeqCommonCustomerInvoice: Column[Seq[_root_.io.flow.common.v0.models.CustomerInvoice]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.CustomerInvoice]] }
    implicit val columnToMapCommonCustomerInvoice: Column[Map[String, _root_.io.flow.common.v0.models.CustomerInvoice]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.CustomerInvoice]] }
    implicit val columnToSeqCommonCustomerReference: Column[Seq[_root_.io.flow.common.v0.models.CustomerReference]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.CustomerReference]] }
    implicit val columnToMapCommonCustomerReference: Column[Map[String, _root_.io.flow.common.v0.models.CustomerReference]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.CustomerReference]] }
    implicit val columnToSeqCommonDatetimeRange: Column[Seq[_root_.io.flow.common.v0.models.DatetimeRange]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.DatetimeRange]] }
    implicit val columnToMapCommonDatetimeRange: Column[Map[String, _root_.io.flow.common.v0.models.DatetimeRange]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.DatetimeRange]] }
    implicit val columnToSeqCommonDimension: Column[Seq[_root_.io.flow.common.v0.models.Dimension]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Dimension]] }
    implicit val columnToMapCommonDimension: Column[Map[String, _root_.io.flow.common.v0.models.Dimension]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Dimension]] }
    implicit val columnToSeqCommonDimensions: Column[Seq[_root_.io.flow.common.v0.models.Dimensions]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Dimensions]] }
    implicit val columnToMapCommonDimensions: Column[Map[String, _root_.io.flow.common.v0.models.Dimensions]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Dimensions]] }
    implicit val columnToSeqCommonDiscountForm: Column[Seq[_root_.io.flow.common.v0.models.DiscountForm]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.DiscountForm]] }
    implicit val columnToMapCommonDiscountForm: Column[Map[String, _root_.io.flow.common.v0.models.DiscountForm]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.DiscountForm]] }
    implicit val columnToSeqCommonDiscountOfferFixed: Column[Seq[_root_.io.flow.common.v0.models.DiscountOfferFixed]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.DiscountOfferFixed]] }
    implicit val columnToMapCommonDiscountOfferFixed: Column[Map[String, _root_.io.flow.common.v0.models.DiscountOfferFixed]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.DiscountOfferFixed]] }
    implicit val columnToSeqCommonDiscountOfferPercent: Column[Seq[_root_.io.flow.common.v0.models.DiscountOfferPercent]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.DiscountOfferPercent]] }
    implicit val columnToMapCommonDiscountOfferPercent: Column[Map[String, _root_.io.flow.common.v0.models.DiscountOfferPercent]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.DiscountOfferPercent]] }
    implicit val columnToSeqCommonDiscountsForm: Column[Seq[_root_.io.flow.common.v0.models.DiscountsForm]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.DiscountsForm]] }
    implicit val columnToMapCommonDiscountsForm: Column[Map[String, _root_.io.flow.common.v0.models.DiscountsForm]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.DiscountsForm]] }
    implicit val columnToSeqCommonDuration: Column[Seq[_root_.io.flow.common.v0.models.Duration]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Duration]] }
    implicit val columnToMapCommonDuration: Column[Map[String, _root_.io.flow.common.v0.models.Duration]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Duration]] }
    implicit val columnToSeqCommonException: Column[Seq[_root_.io.flow.common.v0.models.Exception]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Exception]] }
    implicit val columnToMapCommonException: Column[Map[String, _root_.io.flow.common.v0.models.Exception]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Exception]] }
    implicit val columnToSeqCommonExperienceSummary: Column[Seq[_root_.io.flow.common.v0.models.ExperienceSummary]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.ExperienceSummary]] }
    implicit val columnToMapCommonExperienceSummary: Column[Map[String, _root_.io.flow.common.v0.models.ExperienceSummary]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.ExperienceSummary]] }
    implicit val columnToSeqCommonIncludedLevies: Column[Seq[_root_.io.flow.common.v0.models.IncludedLevies]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.IncludedLevies]] }
    implicit val columnToMapCommonIncludedLevies: Column[Map[String, _root_.io.flow.common.v0.models.IncludedLevies]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.IncludedLevies]] }
    implicit val columnToSeqCommonInputForm: Column[Seq[_root_.io.flow.common.v0.models.InputForm]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.InputForm]] }
    implicit val columnToMapCommonInputForm: Column[Map[String, _root_.io.flow.common.v0.models.InputForm]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.InputForm]] }
    implicit val columnToSeqCommonInputFormSpecification: Column[Seq[_root_.io.flow.common.v0.models.InputFormSpecification]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.InputFormSpecification]] }
    implicit val columnToMapCommonInputFormSpecification: Column[Map[String, _root_.io.flow.common.v0.models.InputFormSpecification]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.InputFormSpecification]] }
    implicit val columnToSeqCommonInputSpecification: Column[Seq[_root_.io.flow.common.v0.models.InputSpecification]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.InputSpecification]] }
    implicit val columnToMapCommonInputSpecification: Column[Map[String, _root_.io.flow.common.v0.models.InputSpecification]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.InputSpecification]] }
    implicit val columnToSeqCommonInputSpecificationLimitationMax: Column[Seq[_root_.io.flow.common.v0.models.InputSpecificationLimitationMax]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.InputSpecificationLimitationMax]] }
    implicit val columnToMapCommonInputSpecificationLimitationMax: Column[Map[String, _root_.io.flow.common.v0.models.InputSpecificationLimitationMax]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.InputSpecificationLimitationMax]] }
    implicit val columnToSeqCommonInputSpecificationLimitations: Column[Seq[_root_.io.flow.common.v0.models.InputSpecificationLimitations]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.InputSpecificationLimitations]] }
    implicit val columnToMapCommonInputSpecificationLimitations: Column[Map[String, _root_.io.flow.common.v0.models.InputSpecificationLimitations]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.InputSpecificationLimitations]] }
    implicit val columnToSeqCommonItemReference: Column[Seq[_root_.io.flow.common.v0.models.ItemReference]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.ItemReference]] }
    implicit val columnToMapCommonItemReference: Column[Map[String, _root_.io.flow.common.v0.models.ItemReference]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.ItemReference]] }
    implicit val columnToSeqCommonLineItem: Column[Seq[_root_.io.flow.common.v0.models.LineItem]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.LineItem]] }
    implicit val columnToMapCommonLineItem: Column[Map[String, _root_.io.flow.common.v0.models.LineItem]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.LineItem]] }
    implicit val columnToSeqCommonLineItemAttributesForm: Column[Seq[_root_.io.flow.common.v0.models.LineItemAttributesForm]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.LineItemAttributesForm]] }
    implicit val columnToMapCommonLineItemAttributesForm: Column[Map[String, _root_.io.flow.common.v0.models.LineItemAttributesForm]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.LineItemAttributesForm]] }
    implicit val columnToSeqCommonLineItemForm: Column[Seq[_root_.io.flow.common.v0.models.LineItemForm]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.LineItemForm]] }
    implicit val columnToMapCommonLineItemForm: Column[Map[String, _root_.io.flow.common.v0.models.LineItemForm]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.LineItemForm]] }
    implicit val columnToSeqCommonLineItemQuantityForm: Column[Seq[_root_.io.flow.common.v0.models.LineItemQuantityForm]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.LineItemQuantityForm]] }
    implicit val columnToMapCommonLineItemQuantityForm: Column[Map[String, _root_.io.flow.common.v0.models.LineItemQuantityForm]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.LineItemQuantityForm]] }
    implicit val columnToSeqCommonMargin: Column[Seq[_root_.io.flow.common.v0.models.Margin]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Margin]] }
    implicit val columnToMapCommonMargin: Column[Map[String, _root_.io.flow.common.v0.models.Margin]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Margin]] }
    implicit val columnToSeqCommonMeasurement: Column[Seq[_root_.io.flow.common.v0.models.Measurement]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Measurement]] }
    implicit val columnToMapCommonMeasurement: Column[Map[String, _root_.io.flow.common.v0.models.Measurement]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Measurement]] }
    implicit val columnToSeqCommonMerchantOfRecordEntity: Column[Seq[_root_.io.flow.common.v0.models.MerchantOfRecordEntity]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.MerchantOfRecordEntity]] }
    implicit val columnToMapCommonMerchantOfRecordEntity: Column[Map[String, _root_.io.flow.common.v0.models.MerchantOfRecordEntity]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.MerchantOfRecordEntity]] }
    implicit val columnToSeqCommonMerchantOfRecordEntityRegistration: Column[Seq[_root_.io.flow.common.v0.models.MerchantOfRecordEntityRegistration]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.MerchantOfRecordEntityRegistration]] }
    implicit val columnToMapCommonMerchantOfRecordEntityRegistration: Column[Map[String, _root_.io.flow.common.v0.models.MerchantOfRecordEntityRegistration]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.MerchantOfRecordEntityRegistration]] }
    implicit val columnToSeqCommonMoney: Column[Seq[_root_.io.flow.common.v0.models.Money]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Money]] }
    implicit val columnToMapCommonMoney: Column[Map[String, _root_.io.flow.common.v0.models.Money]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Money]] }
    implicit val columnToSeqCommonMoneyWithBase: Column[Seq[_root_.io.flow.common.v0.models.MoneyWithBase]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.MoneyWithBase]] }
    implicit val columnToMapCommonMoneyWithBase: Column[Map[String, _root_.io.flow.common.v0.models.MoneyWithBase]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.MoneyWithBase]] }
    implicit val columnToSeqCommonMoneyWithOptionalBase: Column[Seq[_root_.io.flow.common.v0.models.MoneyWithOptionalBase]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.MoneyWithOptionalBase]] }
    implicit val columnToMapCommonMoneyWithOptionalBase: Column[Map[String, _root_.io.flow.common.v0.models.MoneyWithOptionalBase]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.MoneyWithOptionalBase]] }
    implicit val columnToSeqCommonName: Column[Seq[_root_.io.flow.common.v0.models.Name]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Name]] }
    implicit val columnToMapCommonName: Column[Map[String, _root_.io.flow.common.v0.models.Name]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Name]] }
    implicit val columnToSeqCommonOrderCustomer: Column[Seq[_root_.io.flow.common.v0.models.OrderCustomer]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.OrderCustomer]] }
    implicit val columnToMapCommonOrderCustomer: Column[Map[String, _root_.io.flow.common.v0.models.OrderCustomer]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.OrderCustomer]] }
    implicit val columnToSeqCommonOrderCustomerForm: Column[Seq[_root_.io.flow.common.v0.models.OrderCustomerForm]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.OrderCustomerForm]] }
    implicit val columnToMapCommonOrderCustomerForm: Column[Map[String, _root_.io.flow.common.v0.models.OrderCustomerForm]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.OrderCustomerForm]] }
    implicit val columnToSeqCommonOrganization: Column[Seq[_root_.io.flow.common.v0.models.Organization]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Organization]] }
    implicit val columnToMapCommonOrganization: Column[Map[String, _root_.io.flow.common.v0.models.Organization]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Organization]] }
    implicit val columnToSeqCommonOrganizationDefaults: Column[Seq[_root_.io.flow.common.v0.models.OrganizationDefaults]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.OrganizationDefaults]] }
    implicit val columnToMapCommonOrganizationDefaults: Column[Map[String, _root_.io.flow.common.v0.models.OrganizationDefaults]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.OrganizationDefaults]] }
    implicit val columnToSeqCommonOrganizationReference: Column[Seq[_root_.io.flow.common.v0.models.OrganizationReference]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.OrganizationReference]] }
    implicit val columnToMapCommonOrganizationReference: Column[Map[String, _root_.io.flow.common.v0.models.OrganizationReference]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.OrganizationReference]] }
    implicit val columnToSeqCommonOrganizationSummary: Column[Seq[_root_.io.flow.common.v0.models.OrganizationSummary]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.OrganizationSummary]] }
    implicit val columnToMapCommonOrganizationSummary: Column[Map[String, _root_.io.flow.common.v0.models.OrganizationSummary]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.OrganizationSummary]] }
    implicit val columnToSeqCommonPartnerReference: Column[Seq[_root_.io.flow.common.v0.models.PartnerReference]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.PartnerReference]] }
    implicit val columnToMapCommonPartnerReference: Column[Map[String, _root_.io.flow.common.v0.models.PartnerReference]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.PartnerReference]] }
    implicit val columnToSeqCommonPrice: Column[Seq[_root_.io.flow.common.v0.models.Price]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Price]] }
    implicit val columnToMapCommonPrice: Column[Map[String, _root_.io.flow.common.v0.models.Price]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Price]] }
    implicit val columnToSeqCommonPriceForm: Column[Seq[_root_.io.flow.common.v0.models.PriceForm]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.PriceForm]] }
    implicit val columnToMapCommonPriceForm: Column[Map[String, _root_.io.flow.common.v0.models.PriceForm]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.PriceForm]] }
    implicit val columnToSeqCommonPriceSourceCatalog: Column[Seq[_root_.io.flow.common.v0.models.PriceSourceCatalog]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.PriceSourceCatalog]] }
    implicit val columnToMapCommonPriceSourceCatalog: Column[Map[String, _root_.io.flow.common.v0.models.PriceSourceCatalog]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.PriceSourceCatalog]] }
    implicit val columnToSeqCommonPriceSourcePriceBook: Column[Seq[_root_.io.flow.common.v0.models.PriceSourcePriceBook]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.PriceSourcePriceBook]] }
    implicit val columnToMapCommonPriceSourcePriceBook: Column[Map[String, _root_.io.flow.common.v0.models.PriceSourcePriceBook]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.PriceSourcePriceBook]] }
    implicit val columnToSeqCommonPriceSourcePriceBookReference: Column[Seq[_root_.io.flow.common.v0.models.PriceSourcePriceBookReference]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.PriceSourcePriceBookReference]] }
    implicit val columnToMapCommonPriceSourcePriceBookReference: Column[Map[String, _root_.io.flow.common.v0.models.PriceSourcePriceBookReference]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.PriceSourcePriceBookReference]] }
    implicit val columnToSeqCommonPriceSourceProvided: Column[Seq[_root_.io.flow.common.v0.models.PriceSourceProvided]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.PriceSourceProvided]] }
    implicit val columnToMapCommonPriceSourceProvided: Column[Map[String, _root_.io.flow.common.v0.models.PriceSourceProvided]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.PriceSourceProvided]] }
    implicit val columnToSeqCommonPriceWithBase: Column[Seq[_root_.io.flow.common.v0.models.PriceWithBase]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.PriceWithBase]] }
    implicit val columnToMapCommonPriceWithBase: Column[Map[String, _root_.io.flow.common.v0.models.PriceWithBase]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.PriceWithBase]] }
    implicit val columnToSeqCommonRepeatDaily: Column[Seq[_root_.io.flow.common.v0.models.RepeatDaily]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.RepeatDaily]] }
    implicit val columnToMapCommonRepeatDaily: Column[Map[String, _root_.io.flow.common.v0.models.RepeatDaily]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.RepeatDaily]] }
    implicit val columnToSeqCommonRepeatHourly: Column[Seq[_root_.io.flow.common.v0.models.RepeatHourly]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.RepeatHourly]] }
    implicit val columnToMapCommonRepeatHourly: Column[Map[String, _root_.io.flow.common.v0.models.RepeatHourly]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.RepeatHourly]] }
    implicit val columnToSeqCommonRepeatMonthly: Column[Seq[_root_.io.flow.common.v0.models.RepeatMonthly]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.RepeatMonthly]] }
    implicit val columnToMapCommonRepeatMonthly: Column[Map[String, _root_.io.flow.common.v0.models.RepeatMonthly]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.RepeatMonthly]] }
    implicit val columnToSeqCommonRepeatWeekly: Column[Seq[_root_.io.flow.common.v0.models.RepeatWeekly]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.RepeatWeekly]] }
    implicit val columnToMapCommonRepeatWeekly: Column[Map[String, _root_.io.flow.common.v0.models.RepeatWeekly]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.RepeatWeekly]] }
    implicit val columnToSeqCommonRounding: Column[Seq[_root_.io.flow.common.v0.models.Rounding]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Rounding]] }
    implicit val columnToMapCommonRounding: Column[Map[String, _root_.io.flow.common.v0.models.Rounding]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Rounding]] }
    implicit val columnToSeqCommonSchedule: Column[Seq[_root_.io.flow.common.v0.models.Schedule]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Schedule]] }
    implicit val columnToMapCommonSchedule: Column[Map[String, _root_.io.flow.common.v0.models.Schedule]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Schedule]] }
    implicit val columnToSeqCommonSessionReference: Column[Seq[_root_.io.flow.common.v0.models.SessionReference]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.SessionReference]] }
    implicit val columnToMapCommonSessionReference: Column[Map[String, _root_.io.flow.common.v0.models.SessionReference]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.SessionReference]] }
    implicit val columnToSeqCommonUser: Column[Seq[_root_.io.flow.common.v0.models.User]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.User]] }
    implicit val columnToMapCommonUser: Column[Map[String, _root_.io.flow.common.v0.models.User]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.User]] }
    implicit val columnToSeqCommonUserReference: Column[Seq[_root_.io.flow.common.v0.models.UserReference]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.UserReference]] }
    implicit val columnToMapCommonUserReference: Column[Map[String, _root_.io.flow.common.v0.models.UserReference]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.UserReference]] }
    implicit val columnToSeqCommonZone: Column[Seq[_root_.io.flow.common.v0.models.Zone]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.Zone]] }
    implicit val columnToMapCommonZone: Column[Map[String, _root_.io.flow.common.v0.models.Zone]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.Zone]] }
    implicit val columnToSeqCommonDiscountOffer: Column[Seq[_root_.io.flow.common.v0.models.DiscountOffer]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.DiscountOffer]] }
    implicit val columnToMapCommonDiscountOffer: Column[Map[String, _root_.io.flow.common.v0.models.DiscountOffer]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.DiscountOffer]] }
    implicit val columnToSeqCommonExpandableOrganization: Column[Seq[_root_.io.flow.common.v0.models.ExpandableOrganization]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.ExpandableOrganization]] }
    implicit val columnToMapCommonExpandableOrganization: Column[Map[String, _root_.io.flow.common.v0.models.ExpandableOrganization]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.ExpandableOrganization]] }
    implicit val columnToSeqCommonExpandableUser: Column[Seq[_root_.io.flow.common.v0.models.ExpandableUser]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.ExpandableUser]] }
    implicit val columnToMapCommonExpandableUser: Column[Map[String, _root_.io.flow.common.v0.models.ExpandableUser]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.ExpandableUser]] }
    implicit val columnToSeqCommonInputSpecificationLimitation: Column[Seq[_root_.io.flow.common.v0.models.InputSpecificationLimitation]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.InputSpecificationLimitation]] }
    implicit val columnToMapCommonInputSpecificationLimitation: Column[Map[String, _root_.io.flow.common.v0.models.InputSpecificationLimitation]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.InputSpecificationLimitation]] }
    implicit val columnToSeqCommonPriceSource: Column[Seq[_root_.io.flow.common.v0.models.PriceSource]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.PriceSource]] }
    implicit val columnToMapCommonPriceSource: Column[Map[String, _root_.io.flow.common.v0.models.PriceSource]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.PriceSource]] }
    implicit val columnToSeqCommonRepeatSchedule: Column[Seq[_root_.io.flow.common.v0.models.RepeatSchedule]] = Util.parser { _.as[Seq[_root_.io.flow.common.v0.models.RepeatSchedule]] }
    implicit val columnToMapCommonRepeatSchedule: Column[Map[String, _root_.io.flow.common.v0.models.RepeatSchedule]] = Util.parser { _.as[Map[String, _root_.io.flow.common.v0.models.RepeatSchedule]] }
  }

  object Standard {
    implicit val columnToJsObject: Column[play.api.libs.json.JsObject] = Util.parser { _.as[play.api.libs.json.JsObject] }
    implicit val columnToSeqBoolean: Column[Seq[Boolean]] = Util.parser { _.as[Seq[Boolean]] }
    implicit val columnToMapBoolean: Column[Map[String, Boolean]] = Util.parser { _.as[Map[String, Boolean]] }
    implicit val columnToSeqDouble: Column[Seq[Double]] = Util.parser { _.as[Seq[Double]] }
    implicit val columnToMapDouble: Column[Map[String, Double]] = Util.parser { _.as[Map[String, Double]] }
    implicit val columnToSeqInt: Column[Seq[Int]] = Util.parser { _.as[Seq[Int]] }
    implicit val columnToMapInt: Column[Map[String, Int]] = Util.parser { _.as[Map[String, Int]] }
    implicit val columnToSeqLong: Column[Seq[Long]] = Util.parser { _.as[Seq[Long]] }
    implicit val columnToMapLong: Column[Map[String, Long]] = Util.parser { _.as[Map[String, Long]] }
    implicit val columnToSeqLocalDate: Column[Seq[_root_.org.joda.time.LocalDate]] = Util.parser { _.as[Seq[_root_.org.joda.time.LocalDate]] }
    implicit val columnToMapLocalDate: Column[Map[String, _root_.org.joda.time.LocalDate]] = Util.parser { _.as[Map[String, _root_.org.joda.time.LocalDate]] }
    implicit val columnToSeqDateTime: Column[Seq[_root_.org.joda.time.DateTime]] = Util.parser { _.as[Seq[_root_.org.joda.time.DateTime]] }
    implicit val columnToMapDateTime: Column[Map[String, _root_.org.joda.time.DateTime]] = Util.parser { _.as[Map[String, _root_.org.joda.time.DateTime]] }
    implicit val columnToSeqBigDecimal: Column[Seq[BigDecimal]] = Util.parser { _.as[Seq[BigDecimal]] }
    implicit val columnToMapBigDecimal: Column[Map[String, BigDecimal]] = Util.parser { _.as[Map[String, BigDecimal]] }
    implicit val columnToSeqJsObject: Column[Seq[_root_.play.api.libs.json.JsObject]] = Util.parser { _.as[Seq[_root_.play.api.libs.json.JsObject]] }
    implicit val columnToMapJsObject: Column[Map[String, _root_.play.api.libs.json.JsObject]] = Util.parser { _.as[Map[String, _root_.play.api.libs.json.JsObject]] }
    implicit val columnToSeqJsValue: Column[Seq[_root_.play.api.libs.json.JsValue]] = Util.parser { _.as[Seq[_root_.play.api.libs.json.JsValue]] }
    implicit val columnToMapJsValue: Column[Map[String, _root_.play.api.libs.json.JsValue]] = Util.parser { _.as[Map[String, _root_.play.api.libs.json.JsValue]] }
    implicit val columnToSeqString: Column[Seq[String]] = Util.parser { _.as[Seq[String]] }
    implicit val columnToMapString: Column[Map[String, String]] = Util.parser { _.as[Map[String, String]] }
    implicit val columnToSeqUUID: Column[Seq[_root_.java.util.UUID]] = Util.parser { _.as[Seq[_root_.java.util.UUID]] }
    implicit val columnToMapUUID: Column[Map[String, _root_.java.util.UUID]] = Util.parser { _.as[Map[String, _root_.java.util.UUID]] }
  }

}