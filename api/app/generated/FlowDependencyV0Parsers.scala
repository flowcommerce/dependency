/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.7.96
 * apibuilder 0.15.11 app.apibuilder.io/flow/dependency/latest/anorm_2_8_parsers
 */
import anorm._

package io.flow.dependency.v0.anorm.parsers {

  import io.flow.dependency.v0.anorm.conversions.Standard._

  import io.flow.common.v0.anorm.conversions.Types._
  import io.flow.dependency.v0.anorm.conversions.Types._

  object BinaryType {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.BinaryType] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(name: String = "binary_type", prefixOpt: Option[String] = None): RowParser[io.flow.dependency.v0.models.BinaryType] = {
      SqlParser.str(prefixOpt.getOrElse("") + name) map {
        case value => io.flow.dependency.v0.models.BinaryType(value)
      }
    }

  }

  object Publication {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.Publication] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(name: String = "publication", prefixOpt: Option[String] = None): RowParser[io.flow.dependency.v0.models.Publication] = {
      SqlParser.str(prefixOpt.getOrElse("") + name) map {
        case value => io.flow.dependency.v0.models.Publication(value)
      }
    }

  }

  object RecommendationType {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.RecommendationType] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(name: String = "recommendation_type", prefixOpt: Option[String] = None): RowParser[io.flow.dependency.v0.models.RecommendationType] = {
      SqlParser.str(prefixOpt.getOrElse("") + name) map {
        case value => io.flow.dependency.v0.models.RecommendationType(value)
      }
    }

  }

  object Role {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.Role] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(name: String = "role", prefixOpt: Option[String] = None): RowParser[io.flow.dependency.v0.models.Role] = {
      SqlParser.str(prefixOpt.getOrElse("") + name) map {
        case value => io.flow.dependency.v0.models.Role(value)
      }
    }

  }

  object Scms {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.Scms] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(name: String = "scms", prefixOpt: Option[String] = None): RowParser[io.flow.dependency.v0.models.Scms] = {
      SqlParser.str(prefixOpt.getOrElse("") + name) map {
        case value => io.flow.dependency.v0.models.Scms(value)
      }
    }

  }

  object SyncEvent {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.SyncEvent] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(name: String = "sync_event", prefixOpt: Option[String] = None): RowParser[io.flow.dependency.v0.models.SyncEvent] = {
      SqlParser.str(prefixOpt.getOrElse("") + name) map {
        case value => io.flow.dependency.v0.models.SyncEvent(value)
      }
    }

  }

  object SyncType {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.SyncType] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(name: String = "sync_type", prefixOpt: Option[String] = None): RowParser[io.flow.dependency.v0.models.SyncType] = {
      SqlParser.str(prefixOpt.getOrElse("") + name) map {
        case value => io.flow.dependency.v0.models.SyncType(value)
      }
    }

  }

  object Visibility {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.Visibility] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(name: String = "visibility", prefixOpt: Option[String] = None): RowParser[io.flow.dependency.v0.models.Visibility] = {
      SqlParser.str(prefixOpt.getOrElse("") + name) map {
        case value => io.flow.dependency.v0.models.Visibility(value)
      }
    }

  }

  object Binary {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.Binary] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      name: String = "name",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.Binary] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(prefixOpt.getOrElse("") + organizationPrefix) ~
      io.flow.dependency.v0.anorm.parsers.BinaryType.parser(prefixOpt.getOrElse("") + name) map {
        case id ~ organization ~ name => {
          io.flow.dependency.v0.models.Binary(
            id = id,
            organization = organization,
            name = name
          )
        }
      }
    }

  }

  object BinaryForm {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.BinaryForm] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      organizationId: String = "organization_id",
      name: String = "name",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.BinaryForm] = {
      SqlParser.str(prefixOpt.getOrElse("") + organizationId) ~
      io.flow.dependency.v0.anorm.parsers.BinaryType.parser(prefixOpt.getOrElse("") + name) map {
        case organizationId ~ name => {
          io.flow.dependency.v0.models.BinaryForm(
            organizationId = organizationId,
            name = name
          )
        }
      }
    }

  }

  object BinarySummary {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.BinarySummary] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      name: String = "name",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.BinarySummary] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(prefixOpt.getOrElse("") + organizationPrefix) ~
      io.flow.dependency.v0.anorm.parsers.BinaryType.parser(prefixOpt.getOrElse("") + name) map {
        case id ~ organization ~ name => {
          io.flow.dependency.v0.models.BinarySummary(
            id = id,
            organization = organization,
            name = name
          )
        }
      }
    }

  }

  object BinaryVersion {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.BinaryVersion] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      binaryPrefix: String = "binary",
      version: String = "version",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.BinaryVersion] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.dependency.v0.anorm.parsers.Binary.parserWithPrefix(prefixOpt.getOrElse("") + binaryPrefix) ~
      SqlParser.str(prefixOpt.getOrElse("") + version) map {
        case id ~ binary ~ version => {
          io.flow.dependency.v0.models.BinaryVersion(
            id = id,
            binary = binary,
            version = version
          )
        }
      }
    }

  }

  object GithubAuthenticationForm {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.GithubAuthenticationForm] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      code: String = "code",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.GithubAuthenticationForm] = {
      SqlParser.str(prefixOpt.getOrElse("") + code) map {
        case code => {
          io.flow.dependency.v0.models.GithubAuthenticationForm(
            code = code
          )
        }
      }
    }

  }

  object GithubUser {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.GithubUser] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      userPrefix: String = "user",
      githubUserId: String = "github_user_id",
      login: String = "login",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.GithubUser] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.common.v0.anorm.parsers.UserReference.parserWithPrefix(prefixOpt.getOrElse("") + userPrefix) ~
      SqlParser.long(prefixOpt.getOrElse("") + githubUserId) ~
      SqlParser.str(prefixOpt.getOrElse("") + login) map {
        case id ~ user ~ githubUserId ~ login => {
          io.flow.dependency.v0.models.GithubUser(
            id = id,
            user = user,
            githubUserId = githubUserId,
            login = login
          )
        }
      }
    }

  }

  object GithubUserForm {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.GithubUserForm] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      userId: String = "user_id",
      githubUserId: String = "github_user_id",
      login: String = "login",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.GithubUserForm] = {
      SqlParser.str(prefixOpt.getOrElse("") + userId) ~
      SqlParser.long(prefixOpt.getOrElse("") + githubUserId) ~
      SqlParser.str(prefixOpt.getOrElse("") + login) map {
        case userId ~ githubUserId ~ login => {
          io.flow.dependency.v0.models.GithubUserForm(
            userId = userId,
            githubUserId = githubUserId,
            login = login
          )
        }
      }
    }

  }

  object GithubWebhook {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.GithubWebhook] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.GithubWebhook] = {
      SqlParser.long(prefixOpt.getOrElse("") + id) map {
        case id => {
          io.flow.dependency.v0.models.GithubWebhook(
            id = id
          )
        }
      }
    }

  }

  object Item {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.Item] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      visibility: String = "visibility",
      summaryPrefix: String = "summary",
      label: String = "label",
      description: String = "description",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.Item] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(prefixOpt.getOrElse("") + organizationPrefix) ~
      io.flow.dependency.v0.anorm.parsers.Visibility.parser(prefixOpt.getOrElse("") + visibility) ~
      io.flow.dependency.v0.anorm.parsers.ItemSummary.parserWithPrefix(prefixOpt.getOrElse("") + summaryPrefix) ~
      SqlParser.str(prefixOpt.getOrElse("") + label) ~
      SqlParser.str(prefixOpt.getOrElse("") + description).? map {
        case id ~ organization ~ visibility ~ summary ~ label ~ description => {
          io.flow.dependency.v0.models.Item(
            id = id,
            organization = organization,
            visibility = visibility,
            summary = summary,
            label = label,
            description = description
          )
        }
      }
    }

  }

  object Library {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.Library] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      groupId: String = "group_id",
      artifactId: String = "artifact_id",
      resolverPrefix: String = "resolver",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.Library] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(prefixOpt.getOrElse("") + organizationPrefix) ~
      SqlParser.str(prefixOpt.getOrElse("") + groupId) ~
      SqlParser.str(prefixOpt.getOrElse("") + artifactId) ~
      io.flow.dependency.v0.anorm.parsers.ResolverSummary.parserWithPrefix(prefixOpt.getOrElse("") + resolverPrefix) map {
        case id ~ organization ~ groupId ~ artifactId ~ resolver => {
          io.flow.dependency.v0.models.Library(
            id = id,
            organization = organization,
            groupId = groupId,
            artifactId = artifactId,
            resolver = resolver
          )
        }
      }
    }

  }

  object LibraryForm {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.LibraryForm] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      organizationId: String = "organization_id",
      groupId: String = "group_id",
      artifactId: String = "artifact_id",
      resolverId: String = "resolver_id",
      versionPrefix: String = "version",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.LibraryForm] = {
      SqlParser.str(prefixOpt.getOrElse("") + organizationId) ~
      SqlParser.str(prefixOpt.getOrElse("") + groupId) ~
      SqlParser.str(prefixOpt.getOrElse("") + artifactId) ~
      SqlParser.str(prefixOpt.getOrElse("") + resolverId) ~
      io.flow.dependency.v0.anorm.parsers.VersionForm.parserWithPrefix(prefixOpt.getOrElse("") + versionPrefix).? map {
        case organizationId ~ groupId ~ artifactId ~ resolverId ~ version => {
          io.flow.dependency.v0.models.LibraryForm(
            organizationId = organizationId,
            groupId = groupId,
            artifactId = artifactId,
            resolverId = resolverId,
            version = version
          )
        }
      }
    }

  }

  object LibrarySummary {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.LibrarySummary] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      groupId: String = "group_id",
      artifactId: String = "artifact_id",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.LibrarySummary] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(prefixOpt.getOrElse("") + organizationPrefix) ~
      SqlParser.str(prefixOpt.getOrElse("") + groupId) ~
      SqlParser.str(prefixOpt.getOrElse("") + artifactId) map {
        case id ~ organization ~ groupId ~ artifactId => {
          io.flow.dependency.v0.models.LibrarySummary(
            id = id,
            organization = organization,
            groupId = groupId,
            artifactId = artifactId
          )
        }
      }
    }

  }

  object LibraryVersion {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.LibraryVersion] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      libraryPrefix: String = "library",
      version: String = "version",
      crossBuildVersion: String = "cross_build_version",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.LibraryVersion] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.dependency.v0.anorm.parsers.Library.parserWithPrefix(prefixOpt.getOrElse("") + libraryPrefix) ~
      SqlParser.str(prefixOpt.getOrElse("") + version) ~
      SqlParser.str(prefixOpt.getOrElse("") + crossBuildVersion).? map {
        case id ~ library ~ version ~ crossBuildVersion => {
          io.flow.dependency.v0.models.LibraryVersion(
            id = id,
            library = library,
            version = version,
            crossBuildVersion = crossBuildVersion
          )
        }
      }
    }

  }

  object Membership {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.Membership] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      userPrefix: String = "user",
      organizationPrefix: String = "organization",
      role: String = "role",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.Membership] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.dependency.v0.anorm.parsers.UserSummary.parserWithPrefix(prefixOpt.getOrElse("") + userPrefix) ~
      io.flow.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(prefixOpt.getOrElse("") + organizationPrefix) ~
      io.flow.dependency.v0.anorm.parsers.Role.parser(prefixOpt.getOrElse("") + role) map {
        case id ~ user ~ organization ~ role => {
          io.flow.dependency.v0.models.Membership(
            id = id,
            user = user,
            organization = organization,
            role = role
          )
        }
      }
    }

  }

  object MembershipForm {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.MembershipForm] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      userId: String = "user_id",
      organization: String = "organization",
      role: String = "role",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.MembershipForm] = {
      SqlParser.str(prefixOpt.getOrElse("") + userId) ~
      SqlParser.str(prefixOpt.getOrElse("") + organization) ~
      io.flow.dependency.v0.anorm.parsers.Role.parser(prefixOpt.getOrElse("") + role) map {
        case userId ~ organization ~ role => {
          io.flow.dependency.v0.models.MembershipForm(
            userId = userId,
            organization = organization,
            role = role
          )
        }
      }
    }

  }

  object Organization {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.Organization] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      userPrefix: String = "user",
      key: String = "key",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.Organization] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.common.v0.anorm.parsers.UserReference.parserWithPrefix(prefixOpt.getOrElse("") + userPrefix) ~
      SqlParser.str(prefixOpt.getOrElse("") + key) map {
        case id ~ user ~ key => {
          io.flow.dependency.v0.models.Organization(
            id = id,
            user = user,
            key = key
          )
        }
      }
    }

  }

  object OrganizationForm {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.OrganizationForm] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      key: String = "key",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.OrganizationForm] = {
      SqlParser.str(prefixOpt.getOrElse("") + key) map {
        case key => {
          io.flow.dependency.v0.models.OrganizationForm(
            key = key
          )
        }
      }
    }

  }

  object OrganizationSummary {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.OrganizationSummary] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      key: String = "key",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.OrganizationSummary] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      SqlParser.str(prefixOpt.getOrElse("") + key) map {
        case id ~ key => {
          io.flow.dependency.v0.models.OrganizationSummary(
            id = id,
            key = key
          )
        }
      }
    }

  }

  object Project {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.Project] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      userPrefix: String = "user",
      visibility: String = "visibility",
      scms: String = "scms",
      name: String = "name",
      uri: String = "uri",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.Project] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(prefixOpt.getOrElse("") + organizationPrefix) ~
      io.flow.common.v0.anorm.parsers.UserReference.parserWithPrefix(prefixOpt.getOrElse("") + userPrefix) ~
      io.flow.dependency.v0.anorm.parsers.Visibility.parser(prefixOpt.getOrElse("") + visibility) ~
      io.flow.dependency.v0.anorm.parsers.Scms.parser(prefixOpt.getOrElse("") + scms) ~
      SqlParser.str(prefixOpt.getOrElse("") + name) ~
      SqlParser.str(prefixOpt.getOrElse("") + uri) map {
        case id ~ organization ~ user ~ visibility ~ scms ~ name ~ uri => {
          io.flow.dependency.v0.models.Project(
            id = id,
            organization = organization,
            user = user,
            visibility = visibility,
            scms = scms,
            name = name,
            uri = uri
          )
        }
      }
    }

  }

  object ProjectBinary {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.ProjectBinary] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      projectPrefix: String = "project",
      name: String = "name",
      version: String = "version",
      path: String = "path",
      binaryPrefix: String = "binary",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.ProjectBinary] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.dependency.v0.anorm.parsers.ProjectDetail.parserWithPrefix(prefixOpt.getOrElse("") + projectPrefix) ~
      SqlParser.str(prefixOpt.getOrElse("") + name) ~
      SqlParser.str(prefixOpt.getOrElse("") + version) ~
      SqlParser.str(prefixOpt.getOrElse("") + path) ~
      io.flow.dependency.v0.anorm.parsers.Reference.parserWithPrefix(prefixOpt.getOrElse("") + binaryPrefix).? map {
        case id ~ project ~ name ~ version ~ path ~ binary => {
          io.flow.dependency.v0.models.ProjectBinary(
            id = id,
            project = project,
            name = name,
            version = version,
            path = path,
            binary = binary
          )
        }
      }
    }

  }

  object ProjectDependencyResolution {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.ProjectDependencyResolution] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      resolved: String = "resolved",
      unresolved: String = "unresolved",
      steps: String = "steps",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.ProjectDependencyResolution] = {
      SqlParser.get[Seq[io.flow.dependency.v0.models.ProjectDependencyResolutionResolved]](prefixOpt.getOrElse("") + resolved) ~
      SqlParser.get[Seq[io.flow.dependency.v0.models.ProjectUnresolvedSummary]](prefixOpt.getOrElse("") + unresolved) ~
      SqlParser.get[Map[String, String]](prefixOpt.getOrElse("") + steps) map {
        case resolved ~ unresolved ~ steps => {
          io.flow.dependency.v0.models.ProjectDependencyResolution(
            resolved = resolved,
            unresolved = unresolved,
            steps = steps
          )
        }
      }
    }

  }

  object ProjectDependencyResolutionResolved {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.ProjectDependencyResolutionResolved] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      projects: String = "projects",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.ProjectDependencyResolutionResolved] = {
      SqlParser.get[Seq[io.flow.dependency.v0.models.ProjectSummary]](prefixOpt.getOrElse("") + projects) map {
        case projects => {
          io.flow.dependency.v0.models.ProjectDependencyResolutionResolved(
            projects = projects
          )
        }
      }
    }

  }

  object ProjectDetail {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.ProjectDetail] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      name: String = "name",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.ProjectDetail] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(prefixOpt.getOrElse("") + organizationPrefix) ~
      SqlParser.str(prefixOpt.getOrElse("") + name) map {
        case id ~ organization ~ name => {
          io.flow.dependency.v0.models.ProjectDetail(
            id = id,
            organization = organization,
            name = name
          )
        }
      }
    }

  }

  object ProjectForm {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.ProjectForm] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      organization: String = "organization",
      name: String = "name",
      visibility: String = "visibility",
      scms: String = "scms",
      uri: String = "uri",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.ProjectForm] = {
      SqlParser.str(prefixOpt.getOrElse("") + organization) ~
      SqlParser.str(prefixOpt.getOrElse("") + name) ~
      io.flow.dependency.v0.anorm.parsers.Visibility.parser(prefixOpt.getOrElse("") + visibility) ~
      io.flow.dependency.v0.anorm.parsers.Scms.parser(prefixOpt.getOrElse("") + scms) ~
      SqlParser.str(prefixOpt.getOrElse("") + uri) map {
        case organization ~ name ~ visibility ~ scms ~ uri => {
          io.flow.dependency.v0.models.ProjectForm(
            organization = organization,
            name = name,
            visibility = visibility,
            scms = scms,
            uri = uri
          )
        }
      }
    }

  }

  object ProjectLibrary {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.ProjectLibrary] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      projectPrefix: String = "project",
      groupId: String = "group_id",
      artifactId: String = "artifact_id",
      version: String = "version",
      crossBuildVersion: String = "cross_build_version",
      path: String = "path",
      libraryPrefix: String = "library",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.ProjectLibrary] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.dependency.v0.anorm.parsers.ProjectDetail.parserWithPrefix(prefixOpt.getOrElse("") + projectPrefix) ~
      SqlParser.str(prefixOpt.getOrElse("") + groupId) ~
      SqlParser.str(prefixOpt.getOrElse("") + artifactId) ~
      SqlParser.str(prefixOpt.getOrElse("") + version) ~
      SqlParser.str(prefixOpt.getOrElse("") + crossBuildVersion).? ~
      SqlParser.str(prefixOpt.getOrElse("") + path) ~
      io.flow.dependency.v0.anorm.parsers.Reference.parserWithPrefix(prefixOpt.getOrElse("") + libraryPrefix).? map {
        case id ~ project ~ groupId ~ artifactId ~ version ~ crossBuildVersion ~ path ~ library => {
          io.flow.dependency.v0.models.ProjectLibrary(
            id = id,
            project = project,
            groupId = groupId,
            artifactId = artifactId,
            version = version,
            crossBuildVersion = crossBuildVersion,
            path = path,
            library = library
          )
        }
      }
    }

  }

  object ProjectPatchForm {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.ProjectPatchForm] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      name: String = "name",
      visibility: String = "visibility",
      scms: String = "scms",
      uri: String = "uri",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.ProjectPatchForm] = {
      SqlParser.str(prefixOpt.getOrElse("") + name).? ~
      io.flow.dependency.v0.anorm.parsers.Visibility.parser(prefixOpt.getOrElse("") + visibility).? ~
      io.flow.dependency.v0.anorm.parsers.Scms.parser(prefixOpt.getOrElse("") + scms).? ~
      SqlParser.str(prefixOpt.getOrElse("") + uri).? map {
        case name ~ visibility ~ scms ~ uri => {
          io.flow.dependency.v0.models.ProjectPatchForm(
            name = name,
            visibility = visibility,
            scms = scms,
            uri = uri
          )
        }
      }
    }

  }

  object ProjectSummary {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.ProjectSummary] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      name: String = "name",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.ProjectSummary] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(prefixOpt.getOrElse("") + organizationPrefix) ~
      SqlParser.str(prefixOpt.getOrElse("") + name) map {
        case id ~ organization ~ name => {
          io.flow.dependency.v0.models.ProjectSummary(
            id = id,
            organization = organization,
            name = name
          )
        }
      }
    }

  }

  object ProjectUnresolvedSummary {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.ProjectUnresolvedSummary] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      projectPrefix: String = "project",
      resolvedLibraries: String = "resolved_libraries",
      unresolvedLibraries: String = "unresolved_libraries",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.ProjectUnresolvedSummary] = {
      io.flow.dependency.v0.anorm.parsers.ProjectSummary.parserWithPrefix(prefixOpt.getOrElse("") + projectPrefix) ~
      SqlParser.get[Seq[String]](prefixOpt.getOrElse("") + resolvedLibraries) ~
      SqlParser.get[Seq[String]](prefixOpt.getOrElse("") + unresolvedLibraries) map {
        case project ~ resolvedLibraries ~ unresolvedLibraries => {
          io.flow.dependency.v0.models.ProjectUnresolvedSummary(
            project = project,
            resolvedLibraries = resolvedLibraries,
            unresolvedLibraries = unresolvedLibraries
          )
        }
      }
    }

  }

  object Recommendation {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.Recommendation] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      projectPrefix: String = "project",
      `type`: String = "type",
      objectPrefix: String = "object",
      name: String = "name",
      from: String = "from",
      to: String = "to",
      createdAt: String = "created_at",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.Recommendation] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.dependency.v0.anorm.parsers.ProjectDetail.parserWithPrefix(prefixOpt.getOrElse("") + projectPrefix) ~
      io.flow.dependency.v0.anorm.parsers.RecommendationType.parser(prefixOpt.getOrElse("") + `type`) ~
      io.flow.dependency.v0.anorm.parsers.Reference.parserWithPrefix(prefixOpt.getOrElse("") + objectPrefix) ~
      SqlParser.str(prefixOpt.getOrElse("") + name) ~
      SqlParser.str(prefixOpt.getOrElse("") + from) ~
      SqlParser.str(prefixOpt.getOrElse("") + to) ~
      SqlParser.get[_root_.org.joda.time.DateTime](prefixOpt.getOrElse("") + createdAt) map {
        case id ~ project ~ typeInstance ~ objectInstance ~ name ~ from ~ to ~ createdAt => {
          io.flow.dependency.v0.models.Recommendation(
            id = id,
            project = project,
            `type` = typeInstance,
            `object` = objectInstance,
            name = name,
            from = from,
            to = to,
            createdAt = createdAt
          )
        }
      }
    }

  }

  object Reference {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.Reference] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.Reference] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) map {
        case id => {
          io.flow.dependency.v0.models.Reference(
            id = id
          )
        }
      }
    }

  }

  object Repository {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.Repository] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      name: String = "name",
      visibility: String = "visibility",
      uri: String = "uri",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.Repository] = {
      SqlParser.str(prefixOpt.getOrElse("") + name) ~
      io.flow.dependency.v0.anorm.parsers.Visibility.parser(prefixOpt.getOrElse("") + visibility) ~
      SqlParser.str(prefixOpt.getOrElse("") + uri) map {
        case name ~ visibility ~ uri => {
          io.flow.dependency.v0.models.Repository(
            name = name,
            visibility = visibility,
            uri = uri
          )
        }
      }
    }

  }

  object Resolver {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.Resolver] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      visibility: String = "visibility",
      organizationPrefix: String = "organization",
      uri: String = "uri",
      credentialsPrefix: String = "credentials",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.Resolver] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.dependency.v0.anorm.parsers.Visibility.parser(prefixOpt.getOrElse("") + visibility) ~
      io.flow.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(prefixOpt.getOrElse("") + organizationPrefix).? ~
      SqlParser.str(prefixOpt.getOrElse("") + uri) ~
      io.flow.dependency.v0.anorm.parsers.Credentials.parserWithPrefix(prefixOpt.getOrElse("") + credentialsPrefix).? map {
        case id ~ visibility ~ organization ~ uri ~ credentials => {
          io.flow.dependency.v0.models.Resolver(
            id = id,
            visibility = visibility,
            organization = organization,
            uri = uri,
            credentials = credentials
          )
        }
      }
    }

  }

  object ResolverForm {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.ResolverForm] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      visibility: String = "visibility",
      organization: String = "organization",
      uri: String = "uri",
      credentialsPrefix: String = "credentials",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.ResolverForm] = {
      io.flow.dependency.v0.anorm.parsers.Visibility.parser(prefixOpt.getOrElse("") + visibility) ~
      SqlParser.str(prefixOpt.getOrElse("") + organization) ~
      SqlParser.str(prefixOpt.getOrElse("") + uri) ~
      io.flow.dependency.v0.anorm.parsers.Credentials.parserWithPrefix(prefixOpt.getOrElse("") + credentialsPrefix).? map {
        case visibility ~ organization ~ uri ~ credentials => {
          io.flow.dependency.v0.models.ResolverForm(
            visibility = visibility,
            organization = organization,
            uri = uri,
            credentials = credentials
          )
        }
      }
    }

  }

  object ResolverSummary {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.ResolverSummary] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      organizationPrefix: String = "organization",
      visibility: String = "visibility",
      uri: String = "uri",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.ResolverSummary] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.dependency.v0.anorm.parsers.OrganizationSummary.parserWithPrefix(prefixOpt.getOrElse("") + organizationPrefix).? ~
      io.flow.dependency.v0.anorm.parsers.Visibility.parser(prefixOpt.getOrElse("") + visibility) ~
      SqlParser.str(prefixOpt.getOrElse("") + uri) map {
        case id ~ organization ~ visibility ~ uri => {
          io.flow.dependency.v0.models.ResolverSummary(
            id = id,
            organization = organization,
            visibility = visibility,
            uri = uri
          )
        }
      }
    }

  }

  object Subscription {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.Subscription] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      userPrefix: String = "user",
      publication: String = "publication",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.Subscription] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.common.v0.anorm.parsers.UserReference.parserWithPrefix(prefixOpt.getOrElse("") + userPrefix) ~
      io.flow.dependency.v0.anorm.parsers.Publication.parser(prefixOpt.getOrElse("") + publication) map {
        case id ~ user ~ publication => {
          io.flow.dependency.v0.models.Subscription(
            id = id,
            user = user,
            publication = publication
          )
        }
      }
    }

  }

  object SubscriptionForm {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.SubscriptionForm] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      userId: String = "user_id",
      publication: String = "publication",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.SubscriptionForm] = {
      SqlParser.str(prefixOpt.getOrElse("") + userId) ~
      io.flow.dependency.v0.anorm.parsers.Publication.parser(prefixOpt.getOrElse("") + publication) map {
        case userId ~ publication => {
          io.flow.dependency.v0.models.SubscriptionForm(
            userId = userId,
            publication = publication
          )
        }
      }
    }

  }

  object Sync {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.Sync] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      objectId: String = "object_id",
      event: String = "event",
      createdAt: String = "created_at",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.Sync] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      SqlParser.str(prefixOpt.getOrElse("") + objectId) ~
      io.flow.dependency.v0.anorm.parsers.SyncEvent.parser(prefixOpt.getOrElse("") + event) ~
      SqlParser.get[_root_.org.joda.time.DateTime](prefixOpt.getOrElse("") + createdAt) map {
        case id ~ objectId ~ event ~ createdAt => {
          io.flow.dependency.v0.models.Sync(
            id = id,
            objectId = objectId,
            event = event,
            createdAt = createdAt
          )
        }
      }
    }

  }

  object TaskDataSync {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.TaskDataSync] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      `type`: String = "type",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.TaskDataSync] = {
      io.flow.dependency.v0.anorm.parsers.SyncType.parser(prefixOpt.getOrElse("") + `type`).? map {
        case typeInstance => {
          io.flow.dependency.v0.models.TaskDataSync(
            `type` = typeInstance
          )
        }
      }
    }

  }

  object TaskDataSyncLibrariesByPrefix {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.TaskDataSyncLibrariesByPrefix] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      userId: String = "user_id",
      prefix: String = "prefix",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.TaskDataSyncLibrariesByPrefix] = {
      SqlParser.str(prefixOpt.getOrElse("") + userId) ~
      SqlParser.str(prefixOpt.getOrElse("") + prefix) map {
        case userId ~ prefix => {
          io.flow.dependency.v0.models.TaskDataSyncLibrariesByPrefix(
            userId = userId,
            prefix = prefix
          )
        }
      }
    }

  }

  object TaskDataSyncOne {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.TaskDataSyncOne] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      `type`: String = "type",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.TaskDataSyncOne] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.dependency.v0.anorm.parsers.SyncType.parser(prefixOpt.getOrElse("") + `type`) map {
        case id ~ typeInstance => {
          io.flow.dependency.v0.models.TaskDataSyncOne(
            id = id,
            `type` = typeInstance
          )
        }
      }
    }

  }

  object TaskDataSyncOrganizationLibraries {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.TaskDataSyncOrganizationLibraries] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      organizationId: String = "organization_id",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.TaskDataSyncOrganizationLibraries] = {
      SqlParser.str(prefixOpt.getOrElse("") + organizationId) map {
        case organizationId => {
          io.flow.dependency.v0.models.TaskDataSyncOrganizationLibraries(
            organizationId = organizationId
          )
        }
      }
    }

  }

  object TaskDataUpserted {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.TaskDataUpserted] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      `type`: String = "type",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.TaskDataUpserted] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.dependency.v0.anorm.parsers.SyncType.parser(prefixOpt.getOrElse("") + `type`) map {
        case id ~ typeInstance => {
          io.flow.dependency.v0.models.TaskDataUpserted(
            id = id,
            `type` = typeInstance
          )
        }
      }
    }

  }

  object Token {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.Token] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      userPrefix: String = "user",
      masked: String = "masked",
      cleartext: String = "cleartext",
      description: String = "description",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.Token] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.common.v0.anorm.parsers.UserReference.parserWithPrefix(prefixOpt.getOrElse("") + userPrefix) ~
      SqlParser.str(prefixOpt.getOrElse("") + masked) ~
      SqlParser.str(prefixOpt.getOrElse("") + cleartext).? ~
      SqlParser.str(prefixOpt.getOrElse("") + description).? map {
        case id ~ user ~ masked ~ cleartext ~ description => {
          io.flow.dependency.v0.models.Token(
            id = id,
            user = user,
            masked = masked,
            cleartext = cleartext,
            description = description
          )
        }
      }
    }

  }

  object TokenForm {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.TokenForm] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      userId: String = "user_id",
      description: String = "description",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.TokenForm] = {
      SqlParser.str(prefixOpt.getOrElse("") + userId) ~
      SqlParser.str(prefixOpt.getOrElse("") + description).? map {
        case userId ~ description => {
          io.flow.dependency.v0.models.TokenForm(
            userId = userId,
            description = description
          )
        }
      }
    }

  }

  object UserForm {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.UserForm] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      email: String = "email",
      namePrefix: String = "name",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.UserForm] = {
      SqlParser.str(prefixOpt.getOrElse("") + email).? ~
      io.flow.common.v0.anorm.parsers.Name.parserWithPrefix(prefixOpt.getOrElse("") + namePrefix).? map {
        case email ~ name => {
          io.flow.dependency.v0.models.UserForm(
            email = email,
            name = name
          )
        }
      }
    }

  }

  object UserIdentifier {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.UserIdentifier] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      userPrefix: String = "user",
      value: String = "value",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.UserIdentifier] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      io.flow.common.v0.anorm.parsers.UserReference.parserWithPrefix(prefixOpt.getOrElse("") + userPrefix) ~
      SqlParser.str(prefixOpt.getOrElse("") + value) map {
        case id ~ user ~ value => {
          io.flow.dependency.v0.models.UserIdentifier(
            id = id,
            user = user,
            value = value
          )
        }
      }
    }

  }

  object UserSummary {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.UserSummary] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      email: String = "email",
      namePrefix: String = "name",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.UserSummary] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      SqlParser.str(prefixOpt.getOrElse("") + email).? ~
      io.flow.common.v0.anorm.parsers.Name.parserWithPrefix(prefixOpt.getOrElse("") + namePrefix) map {
        case id ~ email ~ name => {
          io.flow.dependency.v0.models.UserSummary(
            id = id,
            email = email,
            name = name
          )
        }
      }
    }

  }

  object UsernamePassword {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.UsernamePassword] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      username: String = "username",
      password: String = "password",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.UsernamePassword] = {
      SqlParser.str(prefixOpt.getOrElse("") + username) ~
      SqlParser.str(prefixOpt.getOrElse("") + password).? map {
        case username ~ password => {
          io.flow.dependency.v0.models.UsernamePassword(
            username = username,
            password = password
          )
        }
      }
    }

  }

  object VersionForm {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[io.flow.dependency.v0.models.VersionForm] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      version: String = "version",
      crossBuildVersion: String = "cross_build_version",
      prefixOpt: Option[String] = None
    ): RowParser[io.flow.dependency.v0.models.VersionForm] = {
      SqlParser.str(prefixOpt.getOrElse("") + version) ~
      SqlParser.str(prefixOpt.getOrElse("") + crossBuildVersion).? map {
        case version ~ crossBuildVersion => {
          io.flow.dependency.v0.models.VersionForm(
            version = version,
            crossBuildVersion = crossBuildVersion
          )
        }
      }
    }

  }

  object Credentials {

    def parserWithPrefix(prefix: String, sep: String = "_") = {
      io.flow.dependency.v0.anorm.parsers.UsernamePassword.parser(prefixOpt = Some(s"$prefix$sep"))
    }

    def parser() = {
      io.flow.dependency.v0.anorm.parsers.UsernamePassword.parser()
    }

  }

  object ItemSummary {

    def parserWithPrefix(prefix: String, sep: String = "_") = {
      io.flow.dependency.v0.anorm.parsers.BinarySummary.parser(prefixOpt = Some(s"$prefix$sep")) |
      io.flow.dependency.v0.anorm.parsers.LibrarySummary.parser(prefixOpt = Some(s"$prefix$sep")) |
      io.flow.dependency.v0.anorm.parsers.ProjectSummary.parser(prefixOpt = Some(s"$prefix$sep"))
    }

    def parser() = {
      io.flow.dependency.v0.anorm.parsers.BinarySummary.parser() |
      io.flow.dependency.v0.anorm.parsers.LibrarySummary.parser() |
      io.flow.dependency.v0.anorm.parsers.ProjectSummary.parser()
    }

  }

  object TaskData {

    def parserWithPrefix(prefix: String, sep: String = "_") = {
      io.flow.dependency.v0.anorm.parsers.TaskDataUpserted.parser(prefixOpt = Some(s"$prefix$sep")) |
      io.flow.dependency.v0.anorm.parsers.TaskDataSync.parser(prefixOpt = Some(s"$prefix$sep")) |
      io.flow.dependency.v0.anorm.parsers.TaskDataSyncOne.parser(prefixOpt = Some(s"$prefix$sep")) |
      io.flow.dependency.v0.anorm.parsers.TaskDataSyncLibrariesByPrefix.parser(prefixOpt = Some(s"$prefix$sep")) |
      io.flow.dependency.v0.anorm.parsers.TaskDataSyncOrganizationLibraries.parser(prefixOpt = Some(s"$prefix$sep"))
    }

    def parser() = {
      io.flow.dependency.v0.anorm.parsers.TaskDataUpserted.parser() |
      io.flow.dependency.v0.anorm.parsers.TaskDataSync.parser() |
      io.flow.dependency.v0.anorm.parsers.TaskDataSyncOne.parser() |
      io.flow.dependency.v0.anorm.parsers.TaskDataSyncLibrariesByPrefix.parser() |
      io.flow.dependency.v0.anorm.parsers.TaskDataSyncOrganizationLibraries.parser()
    }

  }

}