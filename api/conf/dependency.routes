# Generated by API Builder - https://www.apibuilder.io
# Service version: 0.7.27
# apibuilder 0.14.89 app.apibuilder.io/flow/dependency/latest/play_2_x_routes

GET        /binaries                         controllers.Binaries.get(id: _root_.scala.Option[String], ids: _root_.scala.Option[List[String]], project_id: _root_.scala.Option[String], name: _root_.scala.Option[String], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /binaries/:id                     controllers.Binaries.getById(id: String)
POST       /binaries                         controllers.Binaries.post()
DELETE     /binaries/:id                     controllers.Binaries.deleteById(id: String)
GET        /binary_versions                  controllers.BinaryVersions.get(id: _root_.scala.Option[String], ids: _root_.scala.Option[List[String]], binary_id: _root_.scala.Option[String], project_id: _root_.scala.Option[String], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /binary_versions/:id              controllers.BinaryVersions.getById(id: String)
POST       /authentications/github           controllers.GithubUsers.postGithub()
POST       /webhooks/github/:project_id      controllers.GithubWebhooks.postByProjectId(project_id: String)
GET        /users                            controllers.Users.get(id: _root_.scala.Option[String], email: _root_.scala.Option[String], identifier: _root_.scala.Option[String])
GET        /users/:id                        controllers.Users.getById(id: String)
GET        /users/:id/identifier             controllers.Users.getIdentifierById(id: String)
POST       /users                            controllers.Users.post()
GET        /_internal_/healthcheck           controllers.Healthchecks.getHealthcheck()
GET        /items                            controllers.Items.get(q: _root_.scala.Option[String], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /libraries                        controllers.Libraries.get(id: _root_.scala.Option[String], ids: _root_.scala.Option[List[String]], project_id: _root_.scala.Option[String], group_id: _root_.scala.Option[String], artifact_id: _root_.scala.Option[String], resolver_id: _root_.scala.Option[String], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /libraries/:id                    controllers.Libraries.getById(id: String)
POST       /libraries                        controllers.Libraries.post()
DELETE     /libraries/:id                    controllers.Libraries.deleteById(id: String)
GET        /library_versions                 controllers.LibraryVersions.get(id: _root_.scala.Option[String], ids: _root_.scala.Option[List[String]], library_id: _root_.scala.Option[String], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /library_versions/:id             controllers.LibraryVersions.getById(id: String)
GET        /memberships                      controllers.Memberships.get(id: _root_.scala.Option[String], ids: _root_.scala.Option[List[String]], organization: _root_.scala.Option[String], user_id: _root_.scala.Option[String], role: _root_.scala.Option[io.flow.dependency.v0.models.Role], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /memberships/:id                  controllers.Memberships.getById(id: String)
POST       /memberships                      controllers.Memberships.post()
DELETE     /memberships/:id                  controllers.Memberships.deleteById(id: String)
GET        /organizations                    controllers.Organizations.get(id: _root_.scala.Option[String], ids: _root_.scala.Option[List[String]], user_id: _root_.scala.Option[String], key: _root_.scala.Option[String], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /organizations/users/:user_id     controllers.Organizations.getUsersByUserId(user_id: String)
GET        /organizations/:id                controllers.Organizations.getById(id: String)
POST       /organizations                    controllers.Organizations.post()
PUT        /organizations/:id                controllers.Organizations.putById(id: String)
DELETE     /organizations/:id                controllers.Organizations.deleteById(id: String)
GET        /projects                         controllers.Projects.get(id: _root_.scala.Option[String], ids: _root_.scala.Option[List[String]], organization: _root_.scala.Option[String], name: _root_.scala.Option[String], group_id: _root_.scala.Option[String], artifact_id: _root_.scala.Option[String], version: _root_.scala.Option[String], library_id: _root_.scala.Option[String], binary: _root_.scala.Option[String], binary_id: _root_.scala.Option[String], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /projects/:id                     controllers.Projects.getById(id: String)
POST       /projects                         controllers.Projects.post()
PUT        /projects/:id                     controllers.Projects.putById(id: String)
PATCH      /projects/:id                     controllers.Projects.patchById(id: String)
DELETE     /projects/:id                     controllers.Projects.deleteById(id: String)
GET        /project_binaries                 controllers.ProjectBinaries.get(id: _root_.scala.Option[String], ids: _root_.scala.Option[List[String]], project_id: _root_.scala.Option[String], binary_id: _root_.scala.Option[String], is_synced: _root_.scala.Option[Boolean], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /project_libraries                controllers.ProjectLibraries.get(id: _root_.scala.Option[String], ids: _root_.scala.Option[List[String]], project_id: _root_.scala.Option[String], library_id: _root_.scala.Option[String], is_synced: _root_.scala.Option[Boolean], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /recommendations                  controllers.Recommendations.get(organization: _root_.scala.Option[String], project_id: _root_.scala.Option[String], type: _root_.scala.Option[io.flow.dependency.v0.models.RecommendationType], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /repositories/github              controllers.Repositories.getGithub(owner: _root_.scala.Option[String], name: _root_.scala.Option[String], organization_id: _root_.scala.Option[String], existing_project: _root_.scala.Option[Boolean], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /resolvers                        controllers.Resolvers.get(id: _root_.scala.Option[String], ids: _root_.scala.Option[List[String]], organization: _root_.scala.Option[String], visibility: _root_.scala.Option[io.flow.dependency.v0.models.Visibility], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /resolvers/:id                    controllers.Resolvers.getById(id: String)
POST       /resolvers                        controllers.Resolvers.post()
DELETE     /resolvers/:id                    controllers.Resolvers.deleteById(id: String)
GET        /subscriptions                    controllers.Subscriptions.get(id: _root_.scala.Option[String], ids: _root_.scala.Option[List[String]], user_id: _root_.scala.Option[String], identifier: _root_.scala.Option[String], publication: _root_.scala.Option[io.flow.dependency.v0.models.Publication], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /subscriptions/:id                controllers.Subscriptions.getById(id: String)
POST       /subscriptions                    controllers.Subscriptions.post(identifier: _root_.scala.Option[String])
DELETE     /subscriptions/:id                controllers.Subscriptions.deleteById(id: String, identifier: _root_.scala.Option[String])
GET        /syncs                            controllers.Syncs.get(object_id: _root_.scala.Option[String], event: _root_.scala.Option[io.flow.dependency.v0.models.SyncEvent], limit: Long ?= 25L, offset: Long ?= 0L)
POST       /syncs/all                        controllers.Syncs.postAll()
POST       /syncs/libraries                  controllers.Syncs.postLibraries(group_id: _root_.scala.Option[String])
POST       /syncs/binaries/:id               controllers.Syncs.postBinariesById(id: String)
POST       /syncs/libraries/:id              controllers.Syncs.postLibrariesById(id: String)
POST       /syncs/projects/:id               controllers.Syncs.postProjectsById(id: String)
GET        /tokens                           controllers.Tokens.get(id: _root_.scala.Option[List[String]], user_id: _root_.scala.Option[String], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /tokens/:id                       controllers.Tokens.getById(id: String)
POST       /tokens                           controllers.Tokens.post()
DELETE     /tokens/:id                       controllers.Tokens.deleteById(id: String)